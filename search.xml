<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络第五章</title>
      <link href="/2021/06/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%BA%94%E7%AB%A0/"/>
      <url>/2021/06/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-5-章-运输层"><a href="#第-5-章-运输层" class="headerlink" title="第 5 章  运输层"></a>第 5 章  运输层</h1><h2 id="运输层协议概述"><a href="#运输层协议概述" class="headerlink" title="运输层协议概述"></a>运输层协议概述</h2><h3 id="进程之间的通信"><a href="#进程之间的通信" class="headerlink" title="进程之间的通信"></a>进程之间的通信</h3><ul><li>运输层向它上面的应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。</li><li>两个主机进行通信实际上就是两个主机中的应用进程互相通信。 </li><li>应用进程之间的通信又称为端到端的通信。 </li><li>运输层协议和网络层协议的主要区别</li></ul><h3 id="运输层的两个主要协议"><a href="#运输层的两个主要协议" class="headerlink" title="运输层的两个主要协议"></a>运输层的两个主要协议</h3><ul><li>(1) 用户数据报协议 UDP(User Datagram Protocol)<ul><li>UDP 传送的数据单位协议是 UDP 报文或用户数据报。</li></ul></li><li>(2) 传输控制协议 TCP(Transmission Control Protocol)<ul><li>TCP 传送的数据单位协议是 TCP 报文段(segment)</li></ul></li></ul><h3 id="运输层的端口"><a href="#运输层的端口" class="headerlink" title="运输层的端口"></a>运输层的端口</h3><ul><li>软件端口与硬件端口<ul><li>在协议栈层间的抽象的协议端口是软件端口。</li><li>路由器或交换机上的端口是硬件端口。</li></ul></li><li>三类端口<ul><li>熟知端口，数值一般为 0~1023。</li><li>登记端口号，数值为1024~49151，为没有熟知端口号的应用程序使用的。使用这个范围的端口号必须在 IANA 登记，以防止重复。</li><li>客户端口号或短暂端口号，数值为49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。</li></ul></li></ul><h2 id="用户数据报协议-UDP"><a href="#用户数据报协议-UDP" class="headerlink" title="用户数据报协议 UDP"></a>用户数据报协议 UDP</h2><h3 id="UDP-概述"><a href="#UDP-概述" class="headerlink" title="UDP 概述"></a>UDP 概述</h3><ul><li>用户数据报协议 UDP（User Datagram Protocol）是无连接的，尽最大可能交付，没有拥塞控制，面向报文（对于应用程序传下来的报文不合并也不拆分，只是添加 UDP 首部），支持一对一、一对多、多对一和多对多的交互通信。</li></ul><h3 id="UDP-的首部格式"><a href="#UDP-的首部格式" class="headerlink" title="UDP 的首部格式"></a>UDP 的首部格式</h3><h2 id="传输控制协议-TCP-概述"><a href="#传输控制协议-TCP-概述" class="headerlink" title="传输控制协议 TCP 概述"></a>传输控制协议 TCP 概述</h2><h3 id="TCP-最主要的特点"><a href="#TCP-最主要的特点" class="headerlink" title="TCP 最主要的特点"></a>TCP 最主要的特点</h3><ul><li>传输控制协议 TCP（Transmission Control Protocol）是面向连接的，提供可靠交付，有流量控制，拥塞控制，提供全双工通信，面向字节流（把应用层传下来的报文看成字节流，把字节流组织成大小不等的数据块），每一条 TCP 连接只能是点对点的（一对一）。</li></ul><h3 id="TCP-的连接"><a href="#TCP-的连接" class="headerlink" title="TCP 的连接"></a>TCP 的连接</h3><ul><li>TCP 连接的端点叫做套接字(socket)或插口。<ul><li>套接字 socket &#x3D; (IP地址: 端口号)</li></ul></li></ul><h2 id="可靠传输的工作原理"><a href="#可靠传输的工作原理" class="headerlink" title="可靠传输的工作原理"></a>可靠传输的工作原理</h2><h3 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h3><h3 id="连续-ARQ-协议"><a href="#连续-ARQ-协议" class="headerlink" title="连续 ARQ 协议"></a>连续 ARQ 协议</h3><h2 id="TCP-报文段的首部格式"><a href="#TCP-报文段的首部格式" class="headerlink" title="TCP 报文段的首部格式"></a>TCP 报文段的首部格式</h2><p><strong>序号 ：</strong>用于对字节流进行编号，例如序号为 301，表示第一个字节的编号为 301，如果携带的数据长度为 100 字节，那么下一个报文段的序号应为 401。</p><p><strong>确认号 ：</strong>期望收到的下一个报文段的序号。例如 B 正确收到 A 发送来的一个报文段，序号为 501，携带的数据长度为 200 字节，因此 B 期望下一个报文段的序号为 701，B 发送给 A 的确认报文段中确认号就为 701。</p><p><strong>数据偏移 ：</strong>指的是数据部分距离报文段起始处的偏移量，实际上指的是首部的长度。</p><p><strong>确认 ACK ：</strong>当 ACK&#x3D;1 时确认号字段有效，否则无效。TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 置 1。</p><p><strong>同步 SYN ：</strong>在连接建立时用来同步序号。当 SYN&#x3D;1，ACK&#x3D;0 时表示这是一个连接请求报文段。若对方同意建立连接，则响应报文中 SYN&#x3D;1，ACK&#x3D;1。</p><p><strong>终止 FIN ：</strong>用来释放一个连接，当 FIN&#x3D;1 时，表示此报文段的发送方的数据已发送完毕，并要求释放连接。</p><p>窗口 ：窗口值作为接收方让发送方设置其发送窗口的依据。之所以要有这个限制，是因为接收方的数据缓存空间是有限的。</p><h3 id="概要-示意图"><a href="#概要-示意图" class="headerlink" title="概要: 示意图"></a>概要: 示意图</h3><h2 id="TCP-可靠传输的实现"><a href="#TCP-可靠传输的实现" class="headerlink" title="TCP 可靠传输的实现"></a>TCP 可靠传输的实现</h2><h3 id="以字节为单位的滑动窗口"><a href="#以字节为单位的滑动窗口" class="headerlink" title="以字节为单位的滑动窗口"></a>以字节为单位的滑动窗口</h3><ul><li>窗口是缓存的一部分，用来暂时存放字节流。发送方和接收方各有一个窗口，接收方通过 TCP 报文段中的窗口字段告诉发送方自己的窗口大小，发送方根据这个值和其它信息设置自己的窗口大小。</li></ul><p>发送窗口内的字节都允许被发送，接收窗口内的字节都允许被接收。如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。</p><p>接收窗口只会对窗口内最后一个按序到达的字节进行确认，例如接收窗口已经收到的字节为 {31, 34, 35}，其中 {31} 按序到达，而 {34, 35} 就不是，因此只对字节 31 进行确认。发送方得到一个字节的确认之后，就知道这个字节之前的所有字节都已经被接收。<br>    * 1<br>    * 2<br>    * 3<br>    *  4</p><h3 id="超时重传时间的选择"><a href="#超时重传时间的选择" class="headerlink" title="超时重传时间的选择"></a>超时重传时间的选择</h3><ul><li>超时重传<ul><li>TCP 使用超时重传来实现可靠传输：如果一个已经发送的报文段在超时时间内没有收到确认，那么就重传这个报文段。</li></ul></li></ul><p>一个报文段从发送再到接收到确认所经过的时间称为往返时间 RTT，加权平均往返时间 RTTs 计算如下：<br>    * 其中，0 ≤ a ＜ 1，RTTs 随着 a 的增加更容易受到 RTT 的影响。</p><p>超时时间 RTO 应该略大于 RTTs，TCP 使用的超时时间计算如下：（其中 RTTd 为偏差的加权平均值）</p><h3 id="选择确认-SACK"><a href="#选择确认-SACK" class="headerlink" title="选择确认 SACK"></a>选择确认 SACK</h3><h2 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h2><h3 id="利用滑动窗口实现流量控制"><a href="#利用滑动窗口实现流量控制" class="headerlink" title="利用滑动窗口实现流量控制"></a>利用滑动窗口实现流量控制</h3><ul><li>TCP 流量控制<ul><li>流量控制是为了控制发送方发送速率，保证接收方来得及接收。</li></ul></li></ul><p>接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><ul><li>流量控制举例</li></ul><h3 id="必须考虑传输效率"><a href="#必须考虑传输效率" class="headerlink" title="必须考虑传输效率"></a>必须考虑传输效率</h3><h2 id="TCP-的拥塞控制"><a href="#TCP-的拥塞控制" class="headerlink" title="TCP 的拥塞控制"></a>TCP 的拥塞控制</h2><h3 id="拥塞控制的一般原理"><a href="#拥塞控制的一般原理" class="headerlink" title="拥塞控制的一般原理"></a>拥塞控制的一般原理</h3><ul><li>如果网络出现拥塞，分组将会丢失，此时发送方会继续重传，从而导致网络拥塞程度更高。因此当出现拥塞时，应当控制发送方的速率。这一点和流量控制很像，但是出发点不同。流量控制是为了让接收方能来得及接收，而拥塞控制是为了降低整个网络的拥塞程度。</li><li>拥塞控制所起的作用</li></ul><h3 id="几种拥塞控制方法"><a href="#几种拥塞控制方法" class="headerlink" title="几种拥塞控制方法"></a>几种拥塞控制方法</h3><ul><li>TCP 主要通过四个算法来进行拥塞控制：慢开始、拥塞避免、快重传、快恢复。<ul><li>发送方需要维护一个叫做拥塞窗口（cwnd）的状态变量，注意拥塞窗口与发送方窗口的区别：拥塞窗口只是一个状态变量，实际决定发送方能发送多少数据的是发送方窗口。</li></ul></li></ul><p>为了便于讨论，做如下假设：</p><p>接收方有足够大的接收缓存，因此不会发生流量控制；<br>虽然 TCP 的窗口基于字节，但是这里设窗口的大小单位为报文段。<br>    * 1. 慢开始与拥塞避免<br>        * 发送的最初执行慢开始，令 cwnd &#x3D; 1，发送方只能发送 1 个报文段；当收到确认后，将 cwnd 加倍，因此之后发送方能够发送的报文段数量为：2、4、8 …</p><p>注意到慢开始每个轮次都将 cwnd 加倍，这样会让 cwnd 增长速度非常快，从而使得发送方发送的速度增长速度过快，网络拥塞的可能性也就更高。设置一个慢开始门限 ssthresh，当 cwnd &gt;&#x3D; ssthresh 时，进入拥塞避免，每个轮次只将 cwnd 加 1。</p><p>如果出现了超时，则令 ssthresh &#x3D; cwnd &#x2F; 2，然后重新执行慢开始。<br>    * 2. 快重传与快恢复<br>        * 在接收方，要求每次接收到报文段都应该对最后一个已收到的有序报文段进行确认。例如已经接收到 M1 和 M2，此时收到 M4，应当发送对 M2 的确认。</p><p>在发送方，如果收到三个重复确认，那么可以知道下一个报文段丢失，此时执行快重传，立即重传下一个报文段。例如收到三个 M2，则 M3 丢失，立即重传 M3。</p><p>在这种情况下，只是丢失个别报文段，而不是网络拥塞。因此执行快恢复，令 ssthresh &#x3D; cwnd &#x2F; 2 ，cwnd &#x3D; ssthresh，注意到此时直接进入拥塞避免。</p><p>慢开始和快恢复的快慢指的是 cwnd 的设定值，而不是 cwnd 的增长速率。慢开始 cwnd 设定为 1，而快恢复 cwnd 设定为 ssthresh。</p><h3 id="随机早期检测-RED"><a href="#随机早期检测-RED" class="headerlink" title="随机早期检测 RED"></a>随机早期检测 RED</h3><h2 id="TCP-的运输连接管理"><a href="#TCP-的运输连接管理" class="headerlink" title="TCP 的运输连接管理"></a>TCP 的运输连接管理</h2><h3 id="TCP-的连接建立"><a href="#TCP-的连接建立" class="headerlink" title="TCP 的连接建立"></a>TCP 的连接建立</h3><ul><li>假设 A 为客户端，B 为服务器端。</li></ul><p>首先 B 处于 LISTEN（监听）状态，等待客户的连接请求。</p><p>A 向 B 发送连接请求报文，SYN&#x3D;1，ACK&#x3D;0，选择一个初始的序号 x。</p><p>B 收到连接请求报文，如果同意建立连接，则向 A 发送连接确认报文，SYN&#x3D;1，ACK&#x3D;1，确认号为 x+1，同时也选择一个初始的序号 y。</p><p>A 收到 B 的连接确认报文后，还要向 B 发出确认，确认号为 y+1，序号为 x+1。</p><p>B 收到 A 的确认后，连接建立。</p><ul><li>三次握手的原因<ul><li>第三次握手是为了防止失效的连接请求到达服务器，让服务器错误打开连接。</li></ul></li></ul><p>客户端发送的连接请求如果在网络中滞留，那么就会隔很长一段时间才能收到服务器端发回的连接确认。客户端等待一个超时重传时间之后，就会重新请求连接。但是这个滞留的连接请求最后还是会到达服务器，如果不进行三次握手，那么服务器就会打开两个连接。如果有第三次握手，客户端会忽略服务器之后发送的对滞留连接请求的连接确认，不进行第三次握手，因此就不会再次打开连接。</p><h3 id="TCP-的连接释放"><a href="#TCP-的连接释放" class="headerlink" title="TCP 的连接释放"></a>TCP 的连接释放</h3><ul><li>以下描述不讨论序号和确认号，因为序号和确认号的规则比较简单。并且不讨论 ACK，因为 ACK 在连接建立之后都为 1。</li></ul><p>A 发送连接释放报文，FIN&#x3D;1。</p><p>B 收到之后发出确认，此时 TCP 属于半关闭状态，B 能向 A 发送数据但是 A 不能向 B 发送数据。</p><p>当 B 不再需要连接时，发送连接释放报文，FIN&#x3D;1。</p><p>A 收到后发出确认，进入 TIME-WAIT 状态，等待 2 MSL（最大报文存活时间）后释放连接。</p><p>B 收到 A 的确认后释放连接。</p><ul><li>四次挥手的原因<ul><li>客户端发送了 FIN 连接释放报文之后，服务器收到了这个报文，就进入了 CLOSE-WAIT 状态。这个状态是为了让服务器端发送还未传送完毕的数据，传送完毕之后，服务器会发送 FIN 连接释放报文。</li></ul></li><li>TIME_WAIT<ul><li>客户端接收到服务器端的 FIN 报文后进入此状态，此时并不是直接进入 CLOSED 状态，还需要等待一个时间计时器设置的时间 2MSL。这么做有两个理由：<ul><li>确保最后一个确认报文能够到达。如果 B 没收到 A 发送来的确认报文，那么就会重新发送连接释放请求报文，A 等待一段时间就是为了处理这种情况的发生。</li><li>等待一段时间是为了让本连接持续时间内所产生的所有报文都从网络中消失，使得下一个新的连接不会出现旧的连接请求报文。</li></ul></li></ul></li></ul><h3 id="TCP-的有限状态机"><a href="#TCP-的有限状态机" class="headerlink" title="TCP 的有限状态机"></a>TCP 的有限状态机</h3><ul><li>粗实线箭头表示对客户进程的正常变迁。<br>粗虚线箭头表示对服务器进程的正常变迁。<br>另一种细线箭头表示异常变迁。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第四章</title>
      <link href="/2021/06/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
      <url>/2021/06/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-4-章-网络层"><a href="#第-4-章-网络层" class="headerlink" title="第 4 章  网络层"></a>第 4 章  网络层</h1><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><h3 id="虚电路服务"><a href="#虚电路服务" class="headerlink" title="虚电路服务"></a>虚电路服务</h3><h3 id="数据报服务"><a href="#数据报服务" class="headerlink" title="数据报服务"></a>数据报服务</h3><h3 id="概要-虚电路服务与数据报服务的对比"><a href="#概要-虚电路服务与数据报服务的对比" class="headerlink" title="概要: 虚电路服务与数据报服务的对比"></a>概要: 虚电路服务与数据报服务的对比</h3><h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="网际协议 IP"></a>网际协议 IP</h2><h3 id="网际协议-IP-是-TCP-IP-体系中两个最主要的协议之一。与-IP-协议配套使用的还有四个协议："><a href="#网际协议-IP-是-TCP-IP-体系中两个最主要的协议之一。与-IP-协议配套使用的还有四个协议：" class="headerlink" title="网际协议 IP 是 TCP&#x2F;IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有四个协议："></a>网际协议 IP 是 TCP&#x2F;IP 体系中两个最主要的协议之一。与 IP 协议配套使用的还有四个协议：</h3><ul><li>地址解析协议 ARP (Address Resolution Protocol)</li><li>逆地址解析协议 RARP   (Reverse Address Resolution Protocol)</li><li>网际控制报文协议 ICMP   (Internet Control Message Protocol)</li><li>网际组管理协议 IGMP   (Internet Group Management Protocol)</li><li>概要: 示意图</li></ul><h3 id="虚拟互连网络"><a href="#虚拟互连网络" class="headerlink" title="虚拟互连网络"></a>虚拟互连网络</h3><ul><li>网络互相连接起来要使用一些中间设备<ul><li>物理层中继系统：转发器(repeater)。</li><li>数据链路层中继系统：网桥或桥接器(bridge)。</li><li>网络层中继系统：路由器(router)。</li><li>网桥和路由器的混合物：桥路器(brouter)。</li><li>网络层以上的中继系统：网关(gateway)。</li></ul></li></ul><h3 id="IP-数据报的格式"><a href="#IP-数据报的格式" class="headerlink" title="IP 数据报的格式"></a>IP 数据报的格式</h3><ul><li>版本 : 有 4（IPv4）和 6（IPv6）两个值；</li><li>首部长度 : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</li><li>区分服务 : 用来获得更好的服务，一般情况下不使用。</li><li>总长度 : 包括首部长度和数据部分长度。</li><li>生存时间 ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</li><li>协议 ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</li><li>首部检验和 ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</li><li>标识 : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</li><li>片偏移 : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。<ul><li>IP数据报分片</li></ul></li><li>概要: 示意图</li></ul><h3 id="分类的-IP-地址"><a href="#分类的-IP-地址" class="headerlink" title="分类的 IP 地址"></a>分类的 IP 地址</h3><ul><li>IP 地址的编址方式经历了三个历史阶段：<ul><li>分类<ul><li>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。<br>IP 地址 ::&#x3D; {&lt; 网络号 &gt;, &lt; 主机号 &gt;}<ul><li>示意图</li></ul></li></ul></li><li>子网划分<ul><li>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</li></ul></li></ul></li></ul><p>IP 地址 ::&#x3D; {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p><p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p><p>注意，外部网络看不到子网的存在。<br>    * 无分类<br>        * 无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p><p>IP 地址 ::&#x3D; {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p><p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7&#x2F;20 表示前 20 位为网络前缀。</p><p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p><p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为 构成超网 。</p><p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p><h3 id="IP-地址与硬件地址"><a href="#IP-地址与硬件地址" class="headerlink" title="IP 地址与硬件地址"></a>IP 地址与硬件地址</h3><ul><li>IP层抽象的互联网屏蔽了下层很复杂的细节<br>在抽象的网络层上讨论问题，就能够使用<br>统一的、抽象的 IP 地址<br>研究主机和主机或主机和路由器之间的通信 <ul><li>示意图</li></ul></li></ul><h3 id="地址解析协议-ARP-与逆地址解析协议RARP"><a href="#地址解析协议-ARP-与逆地址解析协议RARP" class="headerlink" title="地址解析协议 ARP 与逆地址解析协议RARP"></a>地址解析协议 ARP 与逆地址解析协议RARP</h3><ul><li>缘由<ul><li>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</li></ul></li><li>地址解析协议 ARP<ul><li>ARP 实现由 IP 地址得到 MAC 地址<ul><li>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</li></ul></li></ul></li></ul><p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。<br>            * 示意图</p><ul><li>逆地址解析协议 RARP<ul><li>逆地址解析协议 RARP 使只知道自己硬件地址的主机能够知道其 IP 地址。<ul><li>这种主机往往是无盘工作站。 因此 RARP协议目前已很少使用。</li></ul></li></ul></li></ul><h3 id="IP-层转发分组的流程"><a href="#IP-层转发分组的流程" class="headerlink" title="IP 层转发分组的流程"></a>IP 层转发分组的流程</h3><ul><li>分组转发算法 <ul><li>(1)  从数据报的首部提取目的主机的 IP 地址 D, 得出目的网络地址为 N。</li><li>(2)  若网络 N 与此路由器直接相连，则把数据报直接交付目的主机 D；否则是间接交付，执行(3)。</li><li>(3)  若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给路由表中所指明的下一跳路由器；否则，执行(4)。</li><li>(4)  若路由表中有到达网络 N 的路由，则把数据报传送给路由表指明的下一跳路由器；否则，执行(5)。</li><li>(5) 若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；否则，执行(6)。</li><li>(6)  报告转发分组出错。 </li><li>概要: 示意图</li></ul></li></ul><h2 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h2><h3 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h3><h3 id="使用子网时分组转发"><a href="#使用子网时分组转发" class="headerlink" title="使用子网时分组转发"></a>使用子网时分组转发</h3><h3 id="无分类编址-CIDR（构造超网）"><a href="#无分类编址-CIDR（构造超网）" class="headerlink" title="无分类编址 CIDR（构造超网）"></a>无分类编址 CIDR（构造超网）</h3><h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。</li></ul><h3 id="ICMP-报文的种类"><a href="#ICMP-报文的种类" class="headerlink" title="ICMP 报文的种类"></a>ICMP 报文的种类</h3><ul><li>ICMP 差错报告报文<ul><li>终点不可达 </li><li>源点抑制(Source quench)  </li><li>时间超过 </li><li>参数问题 </li><li>改变路由（重定向）(Redirect)</li></ul></li><li>ICMP 询问报文<ul><li>回送请求和回答报文</li><li>时间戳请求和回答报文</li></ul></li><li>ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即类型、代码和检验和。接着的 4 个字节的内容与 ICMP 的类型有关。</li></ul><h3 id="ICMP-的应用举例"><a href="#ICMP-的应用举例" class="headerlink" title="ICMP 的应用举例"></a>ICMP 的应用举例</h3><ul><li><ol><li>Ping</li></ol><ul><li>Ping 是 ICMP 的一个重要应用，主要用来测试两台主机之间的连通性。</li></ul></li></ul><p>Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p><ul><li><ol start="2"><li>Traceroute</li></ol><ul><li>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</li></ul></li></ul><p>Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。<br>        * 源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；<br>        * 源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。<br>        * 不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。<br>        * 之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</p><h2 id="因特网的路由选择协议"><a href="#因特网的路由选择协议" class="headerlink" title="因特网的路由选择协议"></a>因特网的路由选择协议</h2><h3 id="有关路由选择协议的几个基本概念"><a href="#有关路由选择协议的几个基本概念" class="headerlink" title="有关路由选择协议的几个基本概念"></a>有关路由选择协议的几个基本概念</h3><ul><li>静态路由选择策略——即非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。 </li><li>动态路由选择策略——即自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。</li></ul><h3 id="自治系统-AS-Autonomous-System"><a href="#自治系统-AS-Autonomous-System" class="headerlink" title="自治系统 AS(Autonomous System)"></a>自治系统 AS(Autonomous System)</h3><ul><li>自治系统 AS 的定义：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。</li></ul><h3 id="内部网关协议-IGP-Interior-Gateway-Protocol"><a href="#内部网关协议-IGP-Interior-Gateway-Protocol" class="headerlink" title="内部网关协议 IGP (Interior Gateway Protocol)"></a>内部网关协议 IGP (Interior Gateway Protocol)</h3><ul><li>即在一个自治系统内部使用的路由选择协议。<ul><li>内部网关协议 RIP<ul><li>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</li></ul></li></ul></li></ul><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。<br>        * 距离向量算法：<br>            * 对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；<br>            * 对修改后的 RIP 报文中的每一个项目，进行以下步骤：<br>            * 若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；<br>            * 否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。<br>            * 若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。<br>        * RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。<br>    * 内部网关协议 OSPF<br>        * 开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p><p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。<br>        * OSPF 具有以下特点：<br>            * 向本自治系统中的所有路由器发送信息，这种方法是洪泛法。<br>            * 发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。<br>            * 只有当链路状态发生变化时，路由器才会发送信息。<br>        * 所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><h3 id="外部网关协议-BGP-External-Gateway-Protocol"><a href="#外部网关协议-BGP-External-Gateway-Protocol" class="headerlink" title="外部网关协议 BGP (External Gateway Protocol)"></a>外部网关协议 BGP (External Gateway Protocol)</h3><ul><li>若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。</li><li>AS 之间的路由选择很困难，主要是由于：<ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul></li><li>BGP 只能寻找一条比较好的路由，而不是最佳路由。</li></ul><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。<br>    * 示意图</p><h3 id="路由器的构成"><a href="#路由器的构成" class="headerlink" title="路由器的构成"></a>路由器的构成</h3><ul><li>路由器是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组。也就是说，将路由器某个输入端口收到的分组，按照分组要去的目的地（即目的网络），把该分组从路由器的某个合适的输出端口转发给下一跳路由器。</li><li>路由器从功能上可以划分为<ul><li>路由选择</li><li>分组转发</li></ul></li><li>分组转发结构由三个部分组成<ul><li>交换结构</li><li>一组输入端口</li><li>一组输出端口</li><li>概要: 示意图</li></ul></li></ul><h2 id="IP-多播"><a href="#IP-多播" class="headerlink" title="IP 多播"></a>IP 多播</h2><h3 id="IP-多播的基本概念"><a href="#IP-多播的基本概念" class="headerlink" title="IP 多播的基本概念"></a>IP 多播的基本概念</h3><ul><li>多播可明显地减少网络中资源的消耗</li></ul><h3 id="在局域网上进行硬件多播"><a href="#在局域网上进行硬件多播" class="headerlink" title="在局域网上进行硬件多播"></a>在局域网上进行硬件多播</h3><p>* </p><h3 id="因特网组管理协议-IGMP-和多播路由选择协议"><a href="#因特网组管理协议-IGMP-和多播路由选择协议" class="headerlink" title="因特网组管理协议 IGMP 和多播路由选择协议"></a>因特网组管理协议 IGMP 和多播路由选择协议</h3><ul><li>IGMP 使多播路由器知道多播组成员信息 </li><li>多播转发必须动态地适应多播组成员的变化（这时网络拓扑并未发生变化）。请注意，单播路由选择通常是在网络拓扑发生变化时才需要更新路由。</li></ul><h2 id="虚拟专用网-VPN-和网络地址转换-NAT"><a href="#虚拟专用网-VPN-和网络地址转换-NAT" class="headerlink" title="虚拟专用网 VPN 和网络地址转换 NAT"></a>虚拟专用网 VPN 和网络地址转换 NAT</h2><h3 id="虚拟专用网-VPN"><a href="#虚拟专用网-VPN" class="headerlink" title="虚拟专用网 VPN"></a>虚拟专用网 VPN</h3><ul><li>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。<ul><li>有三个专用地址块：<ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul></li></ul></li><li>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。</li><li>下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。</li></ul><h3 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h3><ul><li>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</li><li>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第三章</title>
      <link href="/2021/06/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
      <url>/2021/06/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-3-章-数据链路层"><a href="#第-3-章-数据链路层" class="headerlink" title="第 3 章  数据链路层"></a>第 3 章  数据链路层</h1><h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><h3 id="数据链路和帧"><a href="#数据链路和帧" class="headerlink" title="数据链路和帧"></a>数据链路和帧</h3><ul><li>数据链路层使用的信道主要有以下两种类型：<ul><li>点对点信道。这种信道使用一对一的点对点通信方式。</li><li>广播信道。这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发</li></ul></li><li>数据链路层模型</li><li>链路(link)是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。</li><li>数据链路(data link) 除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</li><li>数据链路层传送的是帧</li></ul><h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><ul><li>(1) 封装成帧<ul><li>将网络层传下来的分组添加首部和尾部，用于标记帧的开始和结束。<ul><li></li></ul></li></ul></li><li>(2) 透明传输<ul><li>透明表示一个实际存在的事物看起来好像不存在一样。</li><li>帧使用首部和尾部进行定界，如果帧的数据部分含有和首部尾部相同的内容，那么帧的开始和结束位置就会被错误的判定。需要在数据部分出现首部尾部相同的内容前面插入转义字符。如果数据部分出现转义字符，那么就在转义字符前面再加个转义字符。在接收端进行处理之后可以还原出原始数据。这个过程透明传输的内容是转义字符，用户察觉不到转义字符的存在。<ul><li></li></ul></li></ul></li><li>(3) 差错控制 <ul><li><p>循环冗余检验 CRC<br>目前数据链路层广泛使用了循环冗余检验（CRC）来检查比特差错。</p></li><li><p>帧检验序列 FCS<br>在数据后面添加上的冗余码称为帧检验序列 FCS (Frame Check Sequence)。</p></li><li><p>冗余码的计算</p><ul><li>例子：<br>现在 k &#x3D; 6, M &#x3D; 101001。<br>设 n &#x3D; 3, 除数 P &#x3D; 1101，<br>被除数是 2^nM &#x3D; 101001000。<br>模 2 运算的结果是：商 Q &#x3D; 110101，<br> 余数 R &#x3D; 001。<br>把余数 R 作为冗余码添加在数据 M 的后面发送出去。发送的数据是：2^nM + R<br>即：101001001，共 (k + n) 位。</li></ul></li><li><p>概要: CRC 是一种常用的检错方法，而 FCS 是添加在数据后面的冗余码。<br>FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</p></li></ul></li></ul><h2 id="点对点协议-PPP"><a href="#点对点协议-PPP" class="headerlink" title="点对点协议 PPP"></a>点对点协议 PPP</h2><h3 id="PPP-协议的特点"><a href="#PPP-协议的特点" class="headerlink" title="PPP 协议的特点"></a>PPP 协议的特点</h3><ul><li>互联网用户通常需要连接到某个 ISP 之后才能接入到互联网，PPP 协议是用户计算机和 ISP 进行通信时所使用的数据链路层协议。</li></ul><h3 id="PPP-协议的帧格式"><a href="#PPP-协议的帧格式" class="headerlink" title="PPP 协议的帧格式"></a>PPP 协议的帧格式</h3><ul><li>示意图：<br>F 字段为帧的定界符<br>A 和 C 字段暂时没有意义<br>FCS 字段是使用 CRC 的检验序列<br>信息部分的长度不超过 1500</li></ul><h3 id="PPP-协议的工作状态"><a href="#PPP-协议的工作状态" class="headerlink" title="PPP 协议的工作状态"></a>PPP 协议的工作状态</h3><ul><li>过程：<br>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。<br>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。<br>这些分组及其响应选择一些 PPP 参数，和进行网络层配置，NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。<br>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ul><h2 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h2><h3 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h3><ul><li>局域网是一种典型的广播信道，主要特点是网络为一个单位所拥有，且地理范围和站点数目均有限。</li><li>主要有以太网、令牌环网、FDDI 和 ATM 等局域网技术，目前以太网占领着有线局域网市场。</li><li>可以按照网络拓扑结构对局域网进行分类：<ul><li>星形网</li><li>环形网</li><li>总线网</li><li>树形网</li></ul></li><li>数据链路层的两个子层 <ul><li>逻辑链路控制 LLC (Logical Link Control)子层</li><li>媒体接入控制 MAC (Medium Access Control)子层。</li><li>概要: 与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关，不管采用何种协议的局域网对 LLC 子层来说都是透明的<br>所以以后一般不考虑 LLC 子层</li></ul></li><li>适配器<ul><li>网络接口板又称为通信适配器(adapter)或网络接口卡 NIC (Network Interface Card)，或“网卡”。<ul><li>适配器的重要功能：<ul><li>进行串行&#x2F;并行转换。</li><li>对数据进行缓存。</li><li>在计算机的操作系统安装设备驱动程序。</li><li>实现以太网协议。</li></ul></li></ul></li></ul></li></ul><h3 id="CSMA-CD-协议"><a href="#CSMA-CD-协议" class="headerlink" title="CSMA&#x2F;CD 协议"></a>CSMA&#x2F;CD 协议</h3><ul><li>CSMA&#x2F;CD 表示载波监听多点接入 &#x2F; 碰撞检测。<ul><li>多点接入 ：说明这是总线型网络，许多主机以多点的方式连接到总线上。</li><li>载波监听 ：每个主机都必须不停地监听信道。在发送前，如果监听到信道正在使用，就必须等待。</li><li>碰撞检测 ：在发送中，如果监听到信道已有其它主机正在发送数据，就表示发生了碰撞。虽然每个主机在发送数据之前都已经监听到信道为空闲，但是由于电磁波的传播时延的存在，还是有可能会发生碰撞。</li></ul></li><li>具体内容<ul><li>记端到端的传播时延为 τ，最先发送的站点最多经过 2τ 就可以知道是否发生了碰撞，称 2τ 为 争用期 。只有经过争用期之后还没有检测到碰撞，才能肯定这次发送不会发生碰撞。</li><li>当发生碰撞时，站点要停止发送，等待一段时间再发送。这个时间采用 截断二进制指数退避算法 来确定。从离散的整数集合 {0, 1, .., (2k-1)} 中随机取出一个数，记作 r，然后取 r 倍的争用期作为重传等待时间。</li><li>概要: 示意图</li></ul></li></ul><h2 id="使用广播信道的以太网"><a href="#使用广播信道的以太网" class="headerlink" title="使用广播信道的以太网"></a>使用广播信道的以太网</h2><h3 id="使用集线器的星形拓扑"><a href="#使用集线器的星形拓扑" class="headerlink" title="使用集线器的星形拓扑"></a>使用集线器的星形拓扑</h3><ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。<br>这种以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做集线器(hub)</li></ul><h3 id="以太网的信道利用率"><a href="#以太网的信道利用率" class="headerlink" title="以太网的信道利用率"></a>以太网的信道利用率</h3><ul><li>一个帧从开始发送，经可能发生的碰撞后，将再重传数次，到发送成功且信道转为空闲(即再经过时间 τ  使得信道上无信号在传播)时为止，是发送一帧所需的平均时间。 </li><li>发送一帧占用线路的时间是 T0 +  τ ，而帧本身的发送时间是 T0。于是我们可计算出理想情况下的极限信道利用率 Smax为：</li></ul><h3 id="以太网的-MAC-层"><a href="#以太网的-MAC-层" class="headerlink" title="以太网的 MAC 层"></a>以太网的 MAC 层</h3><ul><li>MAC 地址是链路层地址，长度为 6 字节（48 位），用于唯一标识网络适配器（网卡）。</li><li>一台主机拥有多少个网络适配器就有多少个 MAC 地址。例如笔记本电脑普遍存在无线网络适配器和有线网络适配器，因此就有两个 MAC 地址。</li></ul><h3 id="以太网帧格式："><a href="#以太网帧格式：" class="headerlink" title="以太网帧格式："></a>以太网帧格式：</h3><ul><li>类型 ：标记上层使用的协议；<br>数据 ：长度在 46-1500 之间，如果太小则需要填充；<br>FCS ：帧检验序列，使用的是 CRC 检验方法；</li></ul><h2 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h2><h3 id="在物理层扩展以太网"><a href="#在物理层扩展以太网" class="headerlink" title="在物理层扩展以太网"></a>在物理层扩展以太网</h3><ul><li>用多个集线器可连成更大的局域网<ul><li>用集线器组成更大的局域网都在一个碰撞域中<ul><li>优点<ul><li>使原来属于不同碰撞域的局域网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了局域网覆盖的地理范围。</li></ul></li><li>缺点<ul><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li></ul></li></ul></li></ul></li></ul><h3 id="在数据链路层扩展以太网"><a href="#在数据链路层扩展以太网" class="headerlink" title="在数据链路层扩展以太网"></a>在数据链路层扩展以太网</h3><ul><li>在数据链路层扩展局域网是使用网桥。<ul><li>网桥工作在数据链路层，它根据 MAC 帧的目的地址对收到的帧进行转发。<br>网桥具有过滤帧的功能。当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的 MAC 地址，然后再确定将该帧转发到哪一个接口 。<ul><li>优点<ul><li>过滤通信量。 </li><li>扩大了物理范围。</li><li>提高了可靠性。</li><li>可互连不同物理层、不同 MAC 子层和不同速率（如10 Mb&#x2F;s 和 100 Mb&#x2F;s 以太网）的局域网。</li></ul></li><li>缺点<ul><li>存储转发增加了时延。 </li><li>在MAC 子层并没有流量控制功能。 </li><li>具有不同 MAC 子层的网段桥接在一起时时延更大。</li><li>网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。</li></ul></li></ul></li><li>交换机<ul><li>交换机具有自学习能力，学习的是交换表的内容，交换表中存储着 MAC 地址到接口的映射。<br>正是由于这种自学习能力，因此交换机是一种即插即用设备，不需要网络管理员手动配置交换表内容。<ul><li>下图中，交换机有 4 个接口，主机 A 向主机 B 发送数据帧时，交换机把主机 A 到接口 1 的映射写入交换表中。为了发送数据帧到 B，先查交换表，此时没有主机 B 的表项，那么主机 A 就发送广播帧，主机 C 和主机 D 会丢弃该帧，主机 B 回应该帧向主机 A 发送数据包时，交换机查找交换表得到主机 A 映射的接口为 1，就发送数据帧到接口 1，同时交换机添加主机 B 到接口 2 的映射。</li></ul></li></ul></li></ul></li></ul><h3 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h3><ul><li>虚拟局域网可以建立与物理位置无关的逻辑组，只有在同一个虚拟局域网中的成员才会收到链路层广播信息。</li><li>例如下图中 (A1, A2, A3, A4) 属于一个虚拟局域网，A1 发送的广播会被 A2、A3、A4 收到，而其它站点收不到。</li><li>使用 VLAN 干线连接来建立虚拟局域网，每台交换机上的一个特殊接口被设置为干线接口，以互连 VLAN 交换机。IEEE 定义了一种扩展的以太网帧格式 802.1Q，它在标准以太网帧上加进了 4 字节首部 VLAN 标签，用于表示该帧属于哪一个虚拟局域网。</li></ul><h2 id="高速以太网"><a href="#高速以太网" class="headerlink" title="高速以太网"></a>高速以太网</h2><h3 id="100BASE-T-以太网"><a href="#100BASE-T-以太网" class="headerlink" title="100BASE-T 以太网"></a>100BASE-T 以太网</h3><ul><li>速率达到或超过 100 Mb&#x2F;s 的以太网称为高速以太网</li><li>可在全双工方式下工作而无冲突发生。因此，不使用 CSMA&#x2F;CD 协议。</li></ul><h3 id="吉比特以太网"><a href="#吉比特以太网" class="headerlink" title="吉比特以太网"></a>吉比特以太网</h3><ul><li>允许在 1 Gb&#x2F;s 下全双工和半双工两种方式工作。</li><li>在半双工方式下使用 CSMA&#x2F;CD 协议（全双工方式不需要使用 CSMA&#x2F;CD 协议）。</li></ul><h3 id="10-吉比特以太网"><a href="#10-吉比特以太网" class="headerlink" title="10 吉比特以太网"></a>10 吉比特以太网</h3><ul><li>10 吉比特以太网只工作在全双工方式</li><li>也不使用 CSMA&#x2F;CD 协议。</li></ul><h3 id="使用高速以太网进行宽带接入"><a href="#使用高速以太网进行宽带接入" class="headerlink" title="使用高速以太网进行宽带接入"></a>使用高速以太网进行宽带接入</h3><ul><li>以太网接入的重要特点是它可提供双向的宽带通信，并且可根据用户对带宽的需求灵活地进行带宽升级。</li><li>采用以太网接入可实现端到端的以太网传输，中间不需要再进行帧格式的转换。这就提高了数据的传输效率和降低了传输的成本。</li></ul><h2 id="其他类型的高速局域网接口"><a href="#其他类型的高速局域网接口" class="headerlink" title="其他类型的高速局域网接口"></a>其他类型的高速局域网接口</h2><h2 id="集线器在转发帧时，不对传输媒体进行检测。"><a href="#集线器在转发帧时，不对传输媒体进行检测。" class="headerlink" title="集线器在转发帧时，不对传输媒体进行检测。"></a>集线器在转发帧时，不对传输媒体进行检测。</h2><p>网桥在转发帧之前必须执行 CSMA&#x2F;CD 算法。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第二章</title>
      <link href="/2021/06/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2021/06/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-2-章-物理层"><a href="#第-2-章-物理层" class="headerlink" title="第 2 章  物理层"></a>第 2 章  物理层</h1><h2 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h2><h3 id="物理层的主要任务描述为确定与传输媒体的接口的一些特性"><a href="#物理层的主要任务描述为确定与传输媒体的接口的一些特性" class="headerlink" title="物理层的主要任务描述为确定与传输媒体的接口的一些特性"></a>物理层的主要任务描述为确定与传输媒体的接口的一些特性</h3><ul><li>机械特性    指明接口所用接线器的形状和尺寸、引线数目和排列、固定和锁定装置等等。</li><li>电气特性    指明在接口电缆的各条线上出现的电压的范围。</li><li>功能特性    指明某条线上出现的某一电平的电压表示何种意义。</li><li>过程特性    指明对于不同功能的各种可能事件的出现顺序。</li></ul><h2 id="数据通信的基础知识"><a href="#数据通信的基础知识" class="headerlink" title="数据通信的基础知识"></a>数据通信的基础知识</h2><h3 id="数据通信系统的模型"><a href="#数据通信系统的模型" class="headerlink" title="数据通信系统的模型"></a>数据通信系统的模型</h3><ul><li></li></ul><h3 id="有关信道的几个基本概念"><a href="#有关信道的几个基本概念" class="headerlink" title="有关信道的几个基本概念"></a>有关信道的几个基本概念</h3><ul><li>单向通信（单工通信）——只能有一个方向的通信而没有反方向的交互。</li><li>双向交替通信（半双工通信）——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li><li>双向同时通信（全双工通信）——通信的双方可以同时发送和接收信息。 </li><li>几种最基本的调制方法<ul><li>调幅(AM)：载波的振幅随基带数字信号而变化。 </li><li>调频(FM)：载波的频率随基带数字信号而变化。</li><li>调相(PM) ：载波的初始相位随基带数字信号而变化。 </li><li>概要: 图片</li></ul></li></ul><h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><ul><li>信道能够通过的频率范围<ul><li>1924 年，奈奎斯特(Nyquist)就推导出了著名的奈氏准则。他给出了在假定的理想条件下，为了避免码间串扰，码元的传输速率的上限值</li></ul></li><li>信噪比<ul><li>香农(Shannon)用信息论的理论推导出了带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率。<br>信道的极限信息传输速率 C 可表达为<br>C &#x3D; W log2(1+S&#x2F;N)  b&#x2F;s<br>W 为信道的带宽（以 Hz 为单位）；<br>S 为信道内所传信号的平均功率；<br>N 为信道内部的高斯噪声功率。<ul><li>香农公式表明<ul><li>信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高。 </li><li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。 </li><li>若信道带宽 W 或信噪比 S&#x2F;N 没有上限（当然实际信道不可能是这样的），则信道的极限信息传输速率 C 也就没有上限。</li><li>实际信道上能够达到的信息传输速率要比香农的极限传输速率低不少。</li></ul></li></ul></li></ul></li></ul><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><h3 id="导向传输媒体"><a href="#导向传输媒体" class="headerlink" title="导向传输媒体"></a>导向传输媒体</h3><ul><li>双绞线<ul><li>屏蔽双绞线 STP (Shielded Twisted Pair)</li><li>无屏蔽双绞线 UTP (Unshielded Twisted Pair)</li></ul></li><li>同轴电缆<ul><li>50 Ω同轴电缆</li><li>75 Ω 同轴电缆</li></ul></li><li>光缆 <ul><li>光纤的工作原理<ul><li>光线在纤芯中传输的方式是不断地全反射</li></ul></li></ul></li></ul><h3 id="非导向传输媒体"><a href="#非导向传输媒体" class="headerlink" title="非导向传输媒体"></a>非导向传输媒体</h3><ul><li>无线传输所使用的频段很广。</li><li>短波通信主要是靠电离层的反射，但短波信道的通信质量较差。</li><li>微波在空间主要是直线传播。 <ul><li>卫星通信  </li><li>地面微波接力通信</li></ul></li></ul><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><h3 id="频分复用、时分复用和统计时分复用"><a href="#频分复用、时分复用和统计时分复用" class="headerlink" title="频分复用、时分复用和统计时分复用"></a>频分复用、时分复用和统计时分复用</h3><ul><li>频分复用 FDM(Frequency Division Multiplexing) <ul><li>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<ul><li>示意图</li></ul></li></ul></li><li>时分复用TDM(Time Division Multiplexing) <ul><li>时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。<ul><li>示意图</li></ul></li></ul></li><li>统计时分复用 STDM(Statistic TDM)  <ul><li>是对时分复用的一种改进，不固定每个用户在时分复用帧中的位置，只要有数据就集中起来组成统计时分复用帧然后发送。<ul><li>示意图</li></ul></li></ul></li></ul><h3 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h3><ul><li>波分复用 WDM(Wavelength Division Multiplexing)  <ul><li>光的频分复用。由于光的频率很高，因此习惯上用波长而不是频率来表示所使用的光载波。</li></ul></li></ul><h3 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h3><ul><li>码分复用 CDM(Code Division Multiplexing)  <ul><li>常用的名词是码分多址 CDMA     (Code Division Multiple Access)。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。 </li><li>每一个比特时间划分为 m 个短的间隔，称为码片(chip)。</li><li>具体内容<ul><li>1.为每个用户分配 m bit 的码片，并且所有的码片正交，对于任意两个码片 S 和 T 有</li><li>2.为了讨论方便，取 m&#x3D;8，设码片 s 为 00011011。在拥有该码片的用户发送比特 1 时就发送该码片，发送比特 0 时就发送该码片的反码 11100100。</li></ul></li></ul></li></ul><p>在计算时将 00011011 记作 (-1 -1 -1 +1 +1 -1 +1 +1)，可以得到(其中 S’ 为 S 的反码。)<br>        * 3.利用上面的式子我们知道，当接收端使用码片  对接收到的数据进行内积运算时，结果为 0 的是其它用户发送的数据，结果为 1 的是用户发送的比特 1，结果为 -1 的是用户发送的比特 0。<br>    * 码分复用需要发送的数据量为原先的 m 倍。</p><h2 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h2><h3 id="脉码调制-PCM-体制"><a href="#脉码调制-PCM-体制" class="headerlink" title="脉码调制 PCM 体制"></a>脉码调制 PCM 体制</h3><h3 id="同步光纤网-SONET-和同步数字系列-SDH"><a href="#同步光纤网-SONET-和同步数字系列-SDH" class="headerlink" title="同步光纤网 SONET 和同步数字系列 SDH"></a>同步光纤网 SONET 和同步数字系列 SDH</h3><h2 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h2><h3 id="xDSL技术"><a href="#xDSL技术" class="headerlink" title="xDSL技术"></a>xDSL技术</h3><ul><li>xDSL 技术就是用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务。把 0~4 kHz 低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。</li></ul><h3 id="光纤同轴混合网（HFC-网）"><a href="#光纤同轴混合网（HFC-网）" class="headerlink" title="光纤同轴混合网（HFC 网）"></a>光纤同轴混合网（HFC 网）</h3><ul><li>HFC 网是在目前覆盖面很广的有线电视网 CATV 的基础上开发的一种居民宽带接入网。HFC 网除可传送 CATV 外，还提供电话、数据和其他宽带交互型业务。</li></ul><h3 id="FTTx-技术"><a href="#FTTx-技术" class="headerlink" title="FTTx 技术"></a>FTTx 技术</h3><ul><li>FTTx（光纤到……）也是一种实现宽带居民接入网的方案。这里字母 x 可代表不同意思。<ul><li>光纤到家 FTTH (Fiber To The Home)：光纤一直铺设到用户家庭可能是居民接入网最后的解决方法。</li><li>光纤到大楼 FTTB (Fiber To The Building)：光纤进入大楼后就转换为电信号，然后用电缆或双绞线分配到各用户。</li><li>光纤到路边 FTTC (Fiber To The Curb)：从路边到各用户可使用星形结构双绞线作为传输媒体。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络概述</title>
      <link href="/2021/06/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
      <url>/2021/06/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第-1-章-概述"><a href="#第-1-章-概述" class="headerlink" title="第 1 章   概述"></a>第 1 章   概述</h1><h2 id="计算机网络在信息时代中的作用"><a href="#计算机网络在信息时代中的作用" class="headerlink" title="计算机网络在信息时代中的作用"></a>计算机网络在信息时代中的作用</h2><p>1、21 世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。</p><p>2、网络现已成为信息社会的命脉和发展知识经济的重要基础。</p><p>3、网络是指“三网”，即电信网络、有线电视网络和计算机网络。</p><p>4、发展最快的并起到核心作用的是计算机网络。</p><p><strong>因特网(Internet)的发展</strong></p><ul><li>进入 20 世纪 90 年代以后，以因特网为代表的计算机网络得到了飞速的发展。</li><li>已从最初的教育科研网络逐步发展成为商业网络。</li><li>已成为仅次于全球电话网的世界第二大网络。</li></ul><p><strong>因特网的意义</strong></p><ul><li>因特网是自印刷术以来人类通信方面最大的变革。</li><li>现在人们的生活、工作、学习和交往都已离不开因特网。</li></ul><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><h3 id="网络的网络"><a href="#网络的网络" class="headerlink" title="网络的网络"></a>网络的网络</h3><ul><li>起源于美国的因特网现已发展成为世界上最大的国际性计算机互联网 </li><li>网络(network)由若干结点(node)和连接这些结点的链路(link)组成。 </li><li>互联网是“网络的网络”(network of networks)。 </li><li>连接在因特网上的计算机都称为主机(host)。 </li><li>网络与因特网<ul><li>网络把许多计算机连接在一起。</li><li>因特网则把许多网络连接在一起。</li></ul></li></ul><h3 id="因特网发展的三个阶段"><a href="#因特网发展的三个阶段" class="headerlink" title="因特网发展的三个阶段"></a>因特网发展的三个阶段</h3><ul><li>第一阶段是从单个网络 ARPANET 向互联网发展的过程。<ul><li>1983 年 TCP&#x2F;IP 协议成为 ARPANET 上的标准协议。</li><li>人们把 1983 年作为因特网的诞生时间。</li></ul></li><li>第二阶段的特点是建成了三级结构的因特网。<ul><li>三级计算机网络，分为主干网、地区网和校园网（或企业网）。</li></ul></li><li>第三阶段的特点是逐渐形成了多层次 ISP 结构的因特网。<ul><li>出现了因特网服务提供者 ISP (Internet Service Provider)。  </li><li>根据提供服务的覆盖面积大小以及所拥有的IP 地址数目的不同，ISP 也分成为不同的层次。</li></ul></li></ul><h3 id="因特网的标准化工作"><a href="#因特网的标准化工作" class="headerlink" title="因特网的标准化工作"></a>因特网的标准化工作</h3><ul><li>制订因特网的正式标准要经过以下的四个阶段 <ul><li>因特网草案(Internet Draft) ——在这个阶段还不是 RFC 文档。</li><li>建议标准(Proposed Standard) ——从这个阶段开始就成为 RFC 文档。</li><li>草案标准(Draft Standard)</li><li>因特网标准(Internet Standard)</li></ul></li><li>各种RFC之间的关系</li></ul><h2 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h2><h3 id="因特网的边缘部分"><a href="#因特网的边缘部分" class="headerlink" title="因特网的边缘部分"></a>因特网的边缘部分</h3><ul><li>由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。<ul><li>处在因特网边缘的部分就是连接在因特网上的所有的主机。这些主机又称为端系统(end system)。</li><li>“主机 A 和主机 B 进行通信”，实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。</li><li>即“主机 A 的某个进程和主机 B 上的另一个进程进行通信”。或简称为“计算机之间通信”</li></ul></li></ul><h3 id="因特网的核心部分"><a href="#因特网的核心部分" class="headerlink" title="因特网的核心部分"></a>因特网的核心部分</h3><ul><li>由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）<ul><li>网络核心部分是因特网中最复杂的部分。</li><li>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</li><li>在网络核心部分起特殊作用的是路由器(router)。<ul><li>路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。<ul><li>在路由器中的输入和输出端口之间没有直接连线。</li><li>路由器处理分组的过程是：<ul><li>把收到的分组先放入缓存（暂时存储）；</li><li>查找转发表，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的端口转发出去。</li></ul></li></ul></li></ul></li><li>路由器是实现分组交换(packet switching)的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。</li></ul></li></ul><h2 id="计算机网络在我国的发展"><a href="#计算机网络在我国的发展" class="headerlink" title="计算机网络在我国的发展"></a>计算机网络在我国的发展</h2><p>(1) 中国公用计算机互联网 CHINANET</p><p>(3) 中国科学技术网 CSTNET</p><p>(4) 中国联通互联网 UNINET</p><p>(5) 中国网通公用互联网 CNCNET</p><p>(6) 中国国际经济贸易互联网 CIETNET</p><p>(7) 中国移动互联网 CMNET</p><p>(8) 中国长城互联网 CGWNET（建设中）</p><p>(9) 中国卫星集团互联网 CSNET（建设中） </p><h2 id="计算机网络的类别"><a href="#计算机网络的类别" class="headerlink" title="计算机网络的类别"></a>计算机网络的类别</h2><h3 id="计算机网络的定义"><a href="#计算机网络的定义" class="headerlink" title="计算机网络的定义"></a>计算机网络的定义</h3><ul><li>最简单的定义：计算机网络是一些互相连接的、自治的计算机的集合。</li><li>因特网(Internet)是“网络的网络”。</li></ul><h3 id="几种不同类别的网络"><a href="#几种不同类别的网络" class="headerlink" title="几种不同类别的网络"></a>几种不同类别的网络</h3><ul><li>不同作用范围的网络 <ul><li>广域网 WAN (Wide Area Network)</li><li>局域网 LAN (Local Area Network) </li><li>城域网 MAN (Metropolitan Area Network)</li><li>个人区域网 PAN (Personal Area Network)</li></ul></li><li>从网络的使用者进行分类 <ul><li>公用网 (public network) </li><li>专用网 (private network)</li></ul></li></ul><h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><h3 id="计算机网络的性能指标"><a href="#计算机网络的性能指标" class="headerlink" title="计算机网络的性能指标"></a>计算机网络的性能指标</h3><ul><li>速率<ul><li>比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。</li><li>Bit 来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。</li><li>速率即数据率(data rate)或比特率(bit rate)是计算机网络中最重要的一个性能指标。速率的单位是 b&#x2F;s，或kb&#x2F;s, Mb&#x2F;s, Gb&#x2F;s 等</li><li>速率往往是指额定速率或标称速率。</li></ul></li><li>带宽 <ul><li>“带宽”(bandwidth)本来是指信号具有的频带宽度，单位是赫（或千赫、兆赫、吉赫等）。</li><li>现在“带宽”是数字信道所能传送的“最高数据率”的同义语，单位是“比特每秒”，或 b&#x2F;s (bit&#x2F;s)。 </li><li>常用的带宽单位<ul><li>更常用的带宽单位是</li><li>千比每秒，即 kb&#x2F;s （103 b&#x2F;s）</li><li>兆比每秒，即 Mb&#x2F;s（106 b&#x2F;s）</li><li>吉比每秒，即 Gb&#x2F;s（109 b&#x2F;s）</li><li>太比每秒，即 Tb&#x2F;s（1012 b&#x2F;s）</li><li>请注意：在计算机界，K &#x3D; 210 &#x3D; 1024</li><li>M &#x3D; 220, G &#x3D; 230, T &#x3D; 240。</li></ul></li><li>数字信号流随时间的变化<ul><li>在时间轴上信号的宽度随带宽的增大而变窄。</li></ul></li></ul></li><li>吞吐量<ul><li>吞吐量(throughput)表示在单位时间内通过某个网络（或信道、接口）的数据量。</li><li>吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。</li><li>吞吐量受网络的带宽或网络的额定速率的限制。</li></ul></li><li>时延(delay 或 latency)<ul><li>传输时延（发送时延 ）    发送数据时，数据块从结点进入到传输媒体所需要的时间。</li><li>也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。 </li><li>传播时延    电磁波在信道中需要传播一定的距离而花费的时间。 </li><li>信号传输速率（即发送速率）和信号在信道上的传播速率是完全不同的概念。 </li><li>处理时延    交换结点为存储转发而进行一些必要的处理所花费的时间。 </li><li>排队时延    结点缓存队列中分组排队所经历的时延。</li><li>排队时延的长短往往取决于网络中当时的通信量。</li><li>数据经历的总时延就是发送时延、传播时延、处理时延和排队时延之和：</li></ul></li><li>时延带宽积<ul><li>链路的时延带宽积又称为以比特为单位的链路长度。</li></ul></li><li>利用率<ul><li>信道利用率指出某信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率是零。</li><li>网络利用率则是全网络的信道利用率的加权平均值。</li><li>信道利用率并非越高越好。</li></ul></li><li>时延与网络利用率的关系<ul><li>根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。 </li><li>若令 D0 表示网络空闲时的时延，D 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D0之间的关系：<ul><li>U 是网络的利用率，数值在 0 到 1 之间。</li></ul></li></ul></li></ul><h3 id="计算机网络的非性能特征"><a href="#计算机网络的非性能特征" class="headerlink" title="计算机网络的非性能特征"></a>计算机网络的非性能特征</h3><ul><li>费用</li><li>质量</li><li>标准化</li><li>可靠性</li><li>可扩展性和可升级性 </li><li>易于管理和维护</li></ul><h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><h3 id="计算机网络体系结构的形成"><a href="#计算机网络体系结构的形成" class="headerlink" title="计算机网络体系结构的形成"></a>计算机网络体系结构的形成</h3><ul><li>相互通信的两个计算机系统必须高度协调工作才行，而这种“协调”是相当复杂的。 </li><li>“分层”可将庞大而复杂的问题，转化为若干较小的局部问题，而这些较小的局部问题就比较易于研究和处理。</li></ul><h3 id="协议与划分层次"><a href="#协议与划分层次" class="headerlink" title="协议与划分层次"></a>协议与划分层次</h3><ul><li>划分层次的必要性<ul><li>计算机网络中的数据交换必须遵守事先约定好的规则。 </li><li>这些规则明确规定了所交换的数据的格式以及有关的同步问题（同步含有时序的意思）。</li><li>网络协议(network protocol)，简称为协议，是为进行网络中的数据交换而建立的规则、标准或约定。</li></ul></li><li>网络协议的组成要素<ul><li>语法     数据与控制信息的结构或格式 。 </li><li>语义     需要发出何种控制信息，完成何种动作以及做出何种响应。 </li><li>同步    事件实现顺序的详细说明。</li></ul></li><li>分层的好处 <ul><li>各层之间是独立的。</li><li>灵活性好。</li><li>结构上可分割开。</li><li>易于实现和维护。</li><li>能促进标准化工作。</li></ul></li></ul><h3 id="具有五层协议的体系结构"><a href="#具有五层协议的体系结构" class="headerlink" title="具有五层协议的体系结构"></a>具有五层协议的体系结构</h3><ul><li>TCP&#x2F;IP 是四层的体系结构：应用层、运输层、网际层和网络接口层。</li><li>但最下面的网络接口层并没有具体内容。</li><li>因此往往采取折中的办法，即综合 OSI 和 TCP&#x2F;IP 的优点，采用一种只有五层协议的体系结构 。</li></ul><h3 id="实体、协议、服务和服务访问点"><a href="#实体、协议、服务和服务访问点" class="headerlink" title="实体、协议、服务和服务访问点"></a>实体、协议、服务和服务访问点</h3><ul><li>实体(entity) 表示任何可发送或接收信息的硬件或软件进程。 </li><li>协议是控制两个对等实体进行通信的规则的集合。 </li><li>在协议的控制下，两个对等实体间的通信使得本层能够向上一层提供服务。</li><li>要实现本层协议，还需要使用下层所提供的服务。 </li><li>本层的服务用户只能看见服务而无法看见下面的协议。</li><li>下面的协议对上面的服务用户是透明的。 </li><li>协议是“水平的”，即协议是控制对等实体之间通信的规则。</li><li>服务是“垂直的”，即服务是由下层向上层通过层间接口提供的。</li><li>同一系统相邻两层的实体进行交互的地方，称为服务访问点 SAP (Service Access Point)。 </li><li>协议必须把所有不利的条件事先都估计到，而不能假定一切都是正常的和非常理想的。 </li><li>看一个计算机网络协议是否正确，不能光看在正常情况下是否正确，而且还必须非常仔细地检查这个协议能否应付各种异常情况。</li></ul><h2 id="internet-和-Internet-的区别"><a href="#internet-和-Internet-的区别" class="headerlink" title="internet 和 Internet 的区别"></a>internet 和 Internet 的区别</h2><p>1、以小写字母 i 开始的 internet（互联网或互连网）是一个通用名词，它泛指由多个计算机网络互连而成的网络。 </p><p>2、以大写字母I开始的的 Internet（因特网）则是一个专用名词，它指当前全球最大的、开放的、由众多网络相互连接而成的特定计算机网络，它采用 TCP&#x2F;IP 协议族作为通信的规则，且其前身是美国的 ARPANET。</p><h2 id="万维网-WWW-的问世"><a href="#万维网-WWW-的问世" class="headerlink" title="万维网 WWW 的问世"></a>万维网 WWW 的问世</h2><p>因特网已经成为世界上规模最大和增长速率最快的计算机网络，没有人能够准确说出因特网究竟有多大。</p><p>因特网的迅猛发展始于 20 世纪 90 年代。由欧洲原子核研究组织 CERN 开发的万维网 WWW (World Wide Web)被广泛使用在因特网上，大大方便了广大非网络专业人员对网络的使用，成为因特网的这种指数级增长的主要驱动力。 </p><h2 id="客户软件的特点"><a href="#客户软件的特点" class="headerlink" title="客户软件的特点"></a>客户软件的特点</h2><p>被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址。</p><p>不需要特殊的硬件和很复杂的操作系统。 </p><h2 id="服务器软件的特点"><a href="#服务器软件的特点" class="headerlink" title="服务器软件的特点"></a>服务器软件的特点</h2><p>一种专门用来提供某种服务的程序，可同时处理多个远地或本地客户的请求。</p><p>系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。</p><p>一般需要强大的硬件和高级的操作系统支持。</p><h2 id="因特网的边缘部分与核心部分"><a href="#因特网的边缘部分与核心部分" class="headerlink" title="因特网的边缘部分与核心部分"></a>因特网的边缘部分与核心部分</h2><h3 id="两种国际标准"><a href="#两种国际标准" class="headerlink" title="两种国际标准"></a>两种国际标准</h3><p>法律上的(de jure)国际标准 OSI 并没有得到市场的认可。</p><p>是非国际标准 TCP&#x2F;IP 现在获得了最广泛的应用。</p><p><strong>TCP&#x2F;IP 常被称为事实上的(de facto) 国际标准。</strong></p><h2 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h2><p>在发送端，先把较长的报文划分成较短的、固定长度的数据段。 添加首部构成分组</p><ul><li>每一个数据段前面添加上首部构成分组</li></ul><h3 id="分组交换的传输单元"><a href="#分组交换的传输单元" class="headerlink" title="分组交换的传输单元"></a>分组交换的传输单元</h3><ul><li>分组交换网以“分组”作为数据传输单元。</li><li>依次把各分组发送到接收端（假定接收端在左边）</li></ul><h3 id="分组首部的重要性"><a href="#分组首部的重要性" class="headerlink" title="分组首部的重要性"></a>分组首部的重要性</h3><ul><li>每一个分组的首部都含有地址等控制信息。</li><li>分组交换网中的结点交换机根据收到的分组的首部中的地址信息，把分组转发到下一个结点交换机。</li><li>用这样的存储转发方式，最后分组就能到达最终目的地。</li></ul><h3 id="收到分组后剥去首部"><a href="#收到分组后剥去首部" class="headerlink" title="收到分组后剥去首部"></a>收到分组后剥去首部</h3><ul><li>接收端收到分组后剥去首部还原成报文</li></ul><h3 id="最后还原成原来的报文"><a href="#最后还原成原来的报文" class="headerlink" title="最后还原成原来的报文"></a>最后还原成原来的报文</h3><h3 id="分组交换的优点"><a href="#分组交换的优点" class="headerlink" title="分组交换的优点"></a>分组交换的优点</h3><ul><li>高效    动态分配传输带宽，对通信链路是逐段占用。 </li><li>灵活    以分组为传送单位和查找路由。</li><li>迅速    不必先建立连接就能向其他主机发送分组。</li><li>可靠    保证可靠性的网络协议；分布式的路由选择协议使网络有很好的生存性。</li></ul><h3 id="分组交换带来的问题"><a href="#分组交换带来的问题" class="headerlink" title="分组交换带来的问题"></a>分组交换带来的问题</h3><ul><li>分组在各结点存储转发时需要排队，这就会造成一定的时延。 </li><li>分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。</li></ul><h2 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h2><p>两部电话机只需要用一对电线就能够互相连接起来。</p><p>更多的电话机互相连通</p><ul><li>5 部电话机两两相连，需 10 对电线。</li><li>N 部电话机两两相连，需 N(N – 1)&#x2F;2 对电线。</li><li>当电话机的数量很大时，这种连接方法需要的电线对的数量与电话机数的平方成正比。</li></ul><h3 id="使用交换机"><a href="#使用交换机" class="headerlink" title="使用交换机"></a>使用交换机</h3><ul><li>当电话机的数量增多时，就要使用交换机来完成全网的交换任务。</li></ul><h3 id="电路交换的特点"><a href="#电路交换的特点" class="headerlink" title="电路交换的特点"></a>电路交换的特点</h3><ul><li>电路交换必定是面向连接的。 </li><li>电路交换的三个阶段：<ul><li>建立连接</li><li>通信</li><li>释放连接</li></ul></li><li>电路交换传送计算机数据效率低<ul><li>计算机数据具有突发性。</li><li>这导致通信线路的利用率很低。</li></ul></li></ul><h2 id="三种交换的比较"><a href="#三种交换的比较" class="headerlink" title="三种交换的比较"></a>三种交换的比较</h2><h2 id="两种通信方式"><a href="#两种通信方式" class="headerlink" title="两种通信方式"></a>两种通信方式</h2><h3 id="客户服务器方式（C-S-方式）-即Client-Server方式"><a href="#客户服务器方式（C-S-方式）-即Client-Server方式" class="headerlink" title="客户服务器方式（C&#x2F;S 方式）   即Client&#x2F;Server方式"></a>客户服务器方式（C&#x2F;S 方式）   即Client&#x2F;Server方式</h3><ul><li>客户(client)和服务器(server)都是指通信中所涉及的两个应用进程。</li><li>客户服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务的请求方，服务器是服务的提供方。</li></ul><h3 id="对等方式（P2P-方式）-即-Peer-to-Peer方式"><a href="#对等方式（P2P-方式）-即-Peer-to-Peer方式" class="headerlink" title="对等方式（P2P 方式）   即 Peer-to-Peer方式"></a>对等方式（P2P 方式）   即 Peer-to-Peer方式</h3><ul><li>对等连接(peer-to-peer，简写为 P2P)是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</li><li>只要两个主机都运行了对等连接软件（P2P 软件），它们就可以进行平等的、对等连接通信。</li><li>双方都可以下载对方已经存储在硬盘中的共享文档。 </li><li>对等连接方式的特点<ul><li>对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又同时是服务器。</li><li>例如主机 C 请求 D 的服务时，C 是客户，D 是服务器。但如果 C 又同时向 F提供服务，那么 C 又同时起着服务器的作用。</li></ul></li></ul><p>TCP&#x2F;IP 的体系结构</p><h2 id="关于开放系统互连参考模型OSI-RM"><a href="#关于开放系统互连参考模型OSI-RM" class="headerlink" title="关于开放系统互连参考模型OSI&#x2F;RM"></a>关于开放系统互连参考模型OSI&#x2F;RM</h2><p><strong>只要遵循 OSI 标准，一个系统就可以和位于世界上任何地方的、也遵循这同一标准的其他任何系统进行通信。</strong></p><p><strong>在市场化方面 OSI 却失败了。</strong></p><ul><li>OSI 的专家们在完成 OSI 标准时没有商业驱动力；</li><li>OSI 的协议实现起来过分复杂，且运行效率很低；</li><li>OSI 标准的制定周期太长，因而使得按 OSI 标准生产的设备无法及时进入市场；</li><li>OSI 的层次划分并也不太合理，有些功能在多个层次中重复出现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2021/05/16/JavaWeb/"/>
      <url>/2021/05/16/JavaWeb/</url>
      
        <content type="html"><![CDATA[<p><strong>前言：</strong>看了B站小狂神的javaweb写的笔记，虽然这种大众化的笔记csdn…..等等水文多得是，但是大致看了一眼，都是cv大法，并没有什么参考价值，里面很多东西都是缺头少尾的，当然我也可能是没有发现好的文章，看了十几篇关于狂神的javaweb感觉都是一篇文章的复制品，而且里面记录的真的是缺头少尾，还是自己整理一份属于自己的javaweb笔记比较好，那么下面一起来看看我整理的这篇web笔记吧！</p><h2 id="1、服务器"><a href="#1、服务器" class="headerlink" title="1、服务器"></a>1、服务器</h2><p>web开发，换而言之就是少不了服务器那么我们就从最基本的开始讲解吧，首先我们需要配置一个服务器，对于我来说首选Tomcat。这个参考我的另外一篇文章即可，<a href="http://www.huangwan.run/2020/08/08/Tomcat/">javaweb&amp;Tomcat简介</a>。</p><h2 id="2、Http"><a href="#2、Http" class="headerlink" title="2、Http"></a>2、Http</h2><h3 id="2-1、什么是HTTP"><a href="#2-1、什么是HTTP" class="headerlink" title="2.1、什么是HTTP"></a>2.1、什么是HTTP</h3><p>(超文本传输协议）是一个简单的请求-响应协议，它通常运行在TCP之上。</p><p>🌂文本：html，字符串，…<br>🌂超文本：图片，音乐，视频，定位，地图.……<br>🌂端口:80<br><strong>Https:安全的</strong></p><h3 id="2-2、两个时代"><a href="#2-2、两个时代" class="headerlink" title="2.2、两个时代"></a>2.2、两个时代</h3><p><strong>http1.0：</strong>客户端可以与web服务器连接后，只能获得一个web资源，断开连接<br><strong>http2.0：</strong>客户端可以与web服务器连接后，可以获得多个web资源。</p><h3 id="2-3、Http请求"><a href="#2-3、Http请求" class="headerlink" title="2.3、Http请求"></a>2.3、Http请求</h3><p>🌂客户端–发请求（Request）–服务器<br><strong>百度：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Request URL:https://www.baidu.com/   请求地址</span><br><span class="line">Request Method:GET    get方法/post方法</span><br><span class="line">Status Code:200 OK    状态码：200</span><br><span class="line">Remote（远程） Address:14.215.177.39:443</span><br><span class="line"></span><br><span class="line">Accept:text/html  </span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.9    语言</span><br><span class="line">Cache-Control:max-age=0</span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure><h4 id="1、请求行"><a href="#1、请求行" class="headerlink" title="1、请求行"></a>1、请求行</h4><p>🌂请求行中的请求方式：GET<br>🌂请求方式：Get,Post,HEAD,DELETE,PUT,TRACT.…<br>     get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效<br>     post:请求能够携带的参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效。</p><h4 id="2、消息头"><a href="#2、消息头" class="headerlink" title="2、消息头"></a>2、消息头</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1</span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br></pre></td></tr></table></figure><h3 id="2-4、Http响应"><a href="#2-4、Http响应" class="headerlink" title="2.4、Http响应"></a>2.4、Http响应</h3><p>🌂服务器–响应…….客户端<br><strong>百度：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:private    缓存控制</span><br><span class="line">Connection:Keep-Alive    连接</span><br><span class="line">Content-Encoding:gzip    编码</span><br><span class="line">Content-Type:text/html   类型 </span><br></pre></td></tr></table></figure><h4 id="1、响应体"><a href="#1、响应体" class="headerlink" title="1、响应体"></a>1、响应体</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Accept：告诉浏览器，它所支持的数据类型</span><br><span class="line">Accept-Encoding：支持哪种编码格式  GBK   UTF-8   GB2312  ISO8859-1</span><br><span class="line">Accept-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST：主机..../.</span><br><span class="line">Refresh：告诉客户端，多久刷新一次；</span><br><span class="line">Location：让网页重新定位；</span><br></pre></td></tr></table></figure><h4 id="2、响应状态码"><a href="#2、响应状态码" class="headerlink" title="2、响应状态码"></a>2、响应状态码</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">200：请求响应成功200</span><br><span class="line">3xx:请求重定向·重定向：你重新到我给你新位置去；</span><br><span class="line">4xx:找不到资源404·资源不存在；</span><br><span class="line">5xx:服务器代码错误 500 502:网关错误</span><br></pre></td></tr></table></figure><p><strong>常见面试题：</strong><br>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p><h2 id="3、Maven"><a href="#3、Maven" class="headerlink" title="3、Maven"></a>3、Maven</h2><p><strong>我为什么要学习这个技术？</strong></p><p>🌂在Javaweb开发中，需要使用大量的jar包，我们手动去导入；<br>🌂如何能够让一个东西自动帮我导入和配置这个jar包。</p><h3 id="3-1-Maven项目架构管理工具"><a href="#3-1-Maven项目架构管理工具" class="headerlink" title="3.1 Maven项目架构管理工具"></a>3.1 Maven项目架构管理工具</h3><p><strong>Maven的核心思想：约定大于配置</strong></p><p>有约束，不要去违反。<br>Maven会规定好你该如何去编写我们Java代码，必须要按照这个规范来；</p><h3 id="3-2下载安装Maven"><a href="#3-2下载安装Maven" class="headerlink" title="3.2下载安装Maven"></a>3.2下载安装Maven</h3><p>下载地址：<a href="https://maven.apache.org/">官网</a></p><p><img src="https://img-blog.csdnimg.cn/20210509145137881.png"></p><h3 id="3-3配置环境变量"><a href="#3-3配置环境变量" class="headerlink" title="3.3配置环境变量"></a>3.3配置环境变量</h3><p>在我们的系统环境变量中配置如下配置：</p><ul><li>M2_HOME maven目录下的bin目录</li><li>MAVEN_HOME maven的目录</li><li>在系统的path中配置%MAVEN_HOME%\bin</li></ul><p>配置完成之后win+r输入cmd进入命令窗口测试安装是否完成</p><p><img src="https://img-blog.csdnimg.cn/20210509145821257.png" alt="在这里插入图片描述"></p><h3 id="3-4阿里云镜像"><a href="#3-4阿里云镜像" class="headerlink" title="3.4阿里云镜像"></a>3.4阿里云镜像</h3><ul><li>镜像：mirrors</li><li>作用：加速我们的下载</li><li>国内建议使用阿里云的镜像</li></ul><p>需要打开安装maven目录下面的conf文件夹下面的settings.xml修改下载镜像，并且在maven安装目录下建立一个本地仓库：repository</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置本地仓库地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:\Maven\apache-maven-3.8.1\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4在IntelliJ-IDEA的配置"><a href="#3-4在IntelliJ-IDEA的配置" class="headerlink" title="3.4在IntelliJ IDEA的配置"></a>3.4在IntelliJ IDEA的配置</h3><p>此处想着小白也会吧，就懒得放截图了………….</p><h2 id="4、Servlet"><a href="#4、Servlet" class="headerlink" title="4、Servlet"></a>4、Servlet</h2><h3 id="4-1、Servlet简介"><a href="#4-1、Servlet简介" class="headerlink" title="4.1、Servlet简介"></a>4.1、Servlet简介</h3><p>Servlet就是sun公司开发动态web的一门技术。<br>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<br>        🌂编写一个类，实现Servlet接口<br>        🌂把开发好的Java类部署到web服务器中。<br><strong>把实现了Servlet接口的Java程序叫做，Servlet</strong></p><h3 id="4-2、HelloServlet"><a href="#4-2、HelloServlet" class="headerlink" title="4.2、HelloServlet"></a>4.2、HelloServlet</h3><p>Serlvet接口Sun公司有两个默认的实现类：HttpServlet，GenericServlet</p><h3 id="4-3、编写一个Servlet程序"><a href="#4-3、编写一个Servlet程序" class="headerlink" title="4.3、编写一个Servlet程序"></a>4.3、编写一个Servlet程序</h3><p>编写一个普通类</p><p>实现Servlet接口，这里我们直接继承HttpServlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    </span><br><span class="line">    //由于get或者post只是请求实现的不同的方式，可以相互调用，业务逻辑都一样；</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //ServletOutputStream outputStream = resp.getOutputStream();</span><br><span class="line">        PrintWriter writer = resp.getWriter(); //响应流</span><br><span class="line">        writer.print(&quot;Hello,Serlvet&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写Servlet的映射</strong></p><p>为什么需要映射：我们写的是JAVA程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要再web服务中注册我们写的Servlet，还需给他一个浏览器能够访问的路径；</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--注册Servlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.huang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--Servlet的请求路径--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就是配置一下Tomcat发布项目，就可以访问啦！</p><h3 id="4-4、Servlet原理"><a href="#4-4、Servlet原理" class="headerlink" title="4.4、Servlet原理"></a>4.4、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求之后，会：</p><p><img src="https://img-blog.csdnimg.cn/20210509152042950.png" alt="在这里插入图片描述"></p><p>4.4、Mapping问题</p><p>1.一个Servlet可以指定一个映射路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/hello&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/hello/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>3.默认请求路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--默认请求路径--&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">      &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">      &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>4.指定一些后缀或者前缀等等….</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--可以自定义后缀实现请求映射</span><br><span class="line">    注意点，*前面不能加项目映射的路径</span><br><span class="line">    hello/sajdlkajda.qinjiang</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;hello&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;*.huangwan&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>优先级问题 指定了固有的映射路径优先级最高，如果找不到就会走默认的处理请求；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--404--&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;error&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.kuang.servlet.ErrorServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;error&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-5、ServletContext"><a href="#4-5、ServletContext" class="headerlink" title="4.5、ServletContext"></a>4.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个对应的ServletContext对象，它代表了当前的web应用；</p><h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        //this.getInitParameter()   初始化参数</span><br><span class="line">        //this.getServletConfig()   Servlet配置</span><br><span class="line">        //this.getServletContext()  Servlet上下文</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = &quot;黄皖&quot;; //数据</span><br><span class="line">        context.setAttribute(&quot;username&quot;,username); //将一个数据保存在了ServletContext中，名字为：username 值 username</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        super.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class GetServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line">        String username = (String) context.getAttribute(&quot;username&quot;);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(&quot;text/html&quot;);</span><br><span class="line">        resp.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        resp.getWriter().print(&quot;名字&quot;+username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.huang.servlet.GetServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ServletContext<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/slc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><p>web.xml中（配置和注册都写进去啦）</p><pre><code> &lt;context-param&gt;    &lt;param-name&gt;url&lt;/param-name&gt;    &lt;param-value&gt;https://huangwan.run&lt;/param-value&gt;  &lt;/context-param&gt;  &lt;servlet&gt;    &lt;servlet-name&gt;demo02&lt;/servlet-name&gt;    &lt;servlet-class&gt;com.huang.servlet.TestDemo02&lt;/servlet-class&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;    &lt;servlet-name&gt;demo02&lt;/servlet-name&gt;    &lt;url-pattern&gt;/02&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt;</code></pre><p>​    </p><p>获取</p><pre><code>protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;    ServletContext context = this.getServletContext();    String url = context.getInitParameter(&quot;url&quot;);    resp.getWriter().print(url);&#125;</code></pre><h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.RequestDispatcher;</span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">//3、请求转发</span><br><span class="line">public class TestDemo03 extends HelloServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext context = this.getServletContext();</span><br><span class="line">        System.out.println(&quot;进入了TestDemo02&quot;);</span><br><span class="line">        RequestDispatcher requestDispatcher = context.getRequestDispatcher(&quot;/02&quot;);//转发的请求路径</span><br><span class="line">        requestDispatcher.forward(req,resp);//调用forward实现请求转发</span><br><span class="line">        //合并写  context.getRequestDispatcher(&quot;/gp&quot;).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo03<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.huang.servlet.TestDemo03<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo03<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/03<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/2021050917324319.png" alt="在这里插入图片描述"></p><h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>项目结构构造图如下：</p><p><img src="https://img-blog.csdnimg.cn/20210509174350831.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        InputStream is = this.getServletContext().getResourceAsStream(&quot;/WEB-INF/classes/com/huang/servlet/hw.properties&quot;);</span><br><span class="line"></span><br><span class="line">        Properties prop = new Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String user = prop.getProperty(&quot;username&quot;);</span><br><span class="line">        String pwd = prop.getProperty(&quot;password&quot;);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(user+&quot;:&quot;+pwd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-6、HttpServletResponse"><a href="#4-6、HttpServletResponse" class="headerlink" title="4.6、HttpServletResponse"></a>4.6、HttpServletResponse</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest</span><br><span class="line">对象，代表响应的一个HttpServletResponse；</span><br></pre></td></tr></table></figure><p>如果要获取客户端请求过来的参数：找HttpServletRequest<br>如果要给客户端响应一些信息：找HttpServletResponse</p><h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p>负责向浏览器发送数据的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">servletOutputstream getOutputstream() throws IOException;</span><br><span class="line">   Printwriter getwriter() throws IOException;</span><br></pre></td></tr></table></figure><p>负责向浏览器发送响应头的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void setCharacterEncoding(String var1)；</span><br><span class="line">void setContentLength(int var1)；</span><br><span class="line">void setContentLengthLong(long var1);</span><br><span class="line">void setContentType(String var1)；</span><br><span class="line">void setDateHeader(String varl,long var2)</span><br><span class="line">void addDateHeader(String var1,long var2)</span><br><span class="line">void setHeader(String var1,String var2);</span><br><span class="line">void addHeader(String var1,String var2)；</span><br><span class="line">void setIntHeader(String var1,int var2);</span><br><span class="line">void addIntHeader(String varl,int var2);</span><br></pre></td></tr></table></figure><h4 id="2、下载文件"><a href="#2、下载文件" class="headerlink" title="2、下载文件"></a>2、下载文件</h4><p>1.向浏览器输出消息（一直在讲，就不说了）<br>2.下载文件<br>   🌂要获取下载文件的路径<br>   🌂下载的文件名是啥？<br>   🌂设置想办法让浏览器能够支持下载我们需要的东西<br>   🌂获取下载文件的输入流<br>   🌂创建缓冲区<br>   🌂获取OutputStream对象<br>   🌂将FileOutputStream流写入到bufer缓冲区<br>   🌂使用OutputStream将缓冲区中的数据输出到客户端！</p><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.net.URLEncoder;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class TestDemo05 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        // 1. 要获取下载文件的路径</span><br><span class="line">        String realPath = &quot;C:\\JavaDemo\\java-web\\javaweb-servlet\\src\\main\\resources\\hw.png&quot;;</span><br><span class="line">        System.out.println(&quot;下载文件的路径：&quot;+realPath);</span><br><span class="line">        // 2. 下载的文件名是啥？</span><br><span class="line">        String fileName = realPath.substring(realPath.lastIndexOf(&quot;\\&quot;) + 1);</span><br><span class="line">        // 3. 设置想办法让浏览器能够支持(Content-Disposition)下载我们需要的东西,中文文件名URLEncoder.encode编码，否则有可能乱码</span><br><span class="line">        resp.setHeader(&quot;Content-Disposition&quot;,&quot;attachment;filename=&quot;+ URLEncoder.encode(fileName,&quot;UTF-8&quot;));</span><br><span class="line">        // 4. 获取下载文件的输入流</span><br><span class="line">        FileInputStream in = new FileInputStream(realPath);</span><br><span class="line">        // 5. 创建缓冲区</span><br><span class="line">        int len = 0;</span><br><span class="line">        byte[] buffer = new byte[1024];</span><br><span class="line">        // 6. 获取OutputStream对象</span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        // 7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区中的数据输出到客户端！</span><br><span class="line">        while ((len=in.read(buffer))&gt;0)&#123;</span><br><span class="line">            out.write(buffer,0,len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>记得在resources下面放资源以及在web.xml中配置</p><h4 id="3、验证码功能"><a href="#3、验证码功能" class="headerlink" title="3、验证码功能"></a>3、验证码功能</h4><p>验证怎么来的?</p><ul><li><p>前端实现</p></li><li><p>后端实现，需要用到Java的图片类，生产一个图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">public class ImageServlet extends HttpServlet &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        //如何让浏览器3秒自动刷新一次;</span><br><span class="line">        resp.setHeader(&quot;refresh&quot;,&quot;3&quot;);</span><br><span class="line"></span><br><span class="line">        //在内存中创建一个图片</span><br><span class="line">        BufferedImage image = new BufferedImage(80,20,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        //得到图片</span><br><span class="line">        Graphics2D g = (Graphics2D) image.getGraphics(); //笔</span><br><span class="line">        //设置图片的背景颜色</span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(0,0,80,20);</span><br><span class="line">        //给图片写数据</span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(new Font(null,Font.BOLD,20));</span><br><span class="line">        g.drawString(makeNum(),0,20);</span><br><span class="line"></span><br><span class="line">        //告诉浏览器，这个请求用图片的方式打开</span><br><span class="line">        resp.setContentType(&quot;image/jpeg&quot;);</span><br><span class="line">        //网站存在缓存，不让浏览器缓存</span><br><span class="line">        resp.setDateHeader(&quot;expires&quot;,-1);</span><br><span class="line">        resp.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);</span><br><span class="line">        resp.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;);</span><br><span class="line"></span><br><span class="line">        //把图片写给浏览器</span><br><span class="line">        ImageIO.write(image,&quot;jpg&quot;, resp.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //生成随机数</span><br><span class="line">    private String makeNum()&#123;</span><br><span class="line">        Random random = new Random();</span><br><span class="line">        String num = random.nextInt(9999999) + &quot;&quot;;</span><br><span class="line">        StringBuffer sb = new StringBuffer();</span><br><span class="line">        for (int i = 0; i &lt; 7-num.length() ; i++) &#123;</span><br><span class="line">            sb.append(&quot;0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        return num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">   &lt;servlet-name&gt;ImageServlet&lt;/servlet-name&gt;</span><br><span class="line">   &lt;servlet-class&gt;com.huang.servlet.ImageServlet&lt;/servlet-class&gt;</span><br><span class="line"> &lt;/servlet&gt;</span><br><span class="line"> &lt;servlet-mapping&gt;</span><br><span class="line">   &lt;servlet-name&gt;ImageServlet&lt;/servlet-name&gt;</span><br><span class="line">   &lt;url-pattern&gt;/img&lt;/url-pattern&gt;</span><br><span class="line"> &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p>下面随便写一个小测试看看重定向的规律这里需要配置web.xml，并且需要一个已经配好了的地址，例如**&#x2F;img**</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Resp extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        resp. sendRedirect(&quot;/img&quot;);//重定向</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面写一个用重定向实现登陆的小例子吧，嘻嘻，就是如此的皮，来打我呀，有没有被可爱到呀，嘻嘻嘻………</p><p><strong>index.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hel1o World!&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">《%--这里超交的路径,需要寻找到项目的路径--%&gt;</span><br><span class="line">&lt;%--$&#123;pageContext. request, contextPath&#125;代表当前的项目--%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext. request.contextPath&#125;/login&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    用户名: &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    密码: &lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>RequestTest.java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class RequestTest extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //处理方求</span><br><span class="line">        String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">        String password = req.getParameter( &quot;password&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(username+&quot;:&quot;+password);</span><br><span class="line"></span><br><span class="line">        resp.sendRedirect(&quot;/success.jsp&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>重定向页面success.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Apple</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">5</span>/<span class="number">9</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">12</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;success&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;这就是一个大大的成功！&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;注意看地址栏是否变化了！！&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>web.xml配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.huang.servlet.RequestTest<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>requset<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>这里有个小坑，新建的jsp文件一定是在webapp下面的，而不是在WEB-INF下面，这个一定要注意，不然就会报404错误找不到资源，资源未公开。</p><p><strong>面试题：请你聊聊重定向和转发的区别？</strong></p><p>🌂相同点</p><ul><li>页面都会实现跳转</li></ul><p>🌂不同点</p><ul><li>请求转发的时候，url不会产生变化</li><li>重定向时候，url地址栏会发生变化；</li></ul><h3 id="4-7、HttpServletRequest"><a href="#4-7、HttpServletRequest" class="headerlink" title="4.7、HttpServletRequest"></a>4.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求,用户通过Http协议访问服务器, HTTP请求中的所有信息会被封装到HttpServletRequest,通过这个HttpServletRequest的方法,获得客户端的所有信息;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class HttpServletRequest extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(javax.servlet.http.HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        resp.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        String username = req.getParameter(&quot;username&quot;);</span><br><span class="line">        String password = req.getParameter(&quot;password&quot;);</span><br><span class="line">        String[] hobbys = req.getParameterValues(&quot;hobbys&quot;);</span><br><span class="line">        System.out.println(&quot;==========&quot;);</span><br><span class="line">        //后台接收中文乱码问题</span><br><span class="line">        System. out.println(username);</span><br><span class="line">        System. out.p</span><br><span class="line">        </span><br><span class="line">        rintln(password);</span><br><span class="line">        System. out.println(Arrays.toString(hobbys));</span><br><span class="line">        System. out.println(&quot;============&quot;);</span><br><span class="line">        System. out.println(req.getContextPath());</span><br><span class="line">        //通过请求转发</span><br><span class="line">        //这里的/代表当前的web应用</span><br><span class="line">        req.getRequestDispatcher(&quot;/success.jsp&quot;).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(javax.servlet.http.HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、Cookie、Session"><a href="#5、Cookie、Session" class="headerlink" title="5、Cookie、Session"></a>5、Cookie、Session</h2><h4 id="5-1、会话"><a href="#5-1、会话" class="headerlink" title="5.1、会话"></a>5.1、会话</h4><p><strong>会话：</strong>用户打开一个浏览器，点击了很多超链接，访问多个web资源，关闭浏览器，这个过程可以称之为会话；</p><p><strong>有状态会话：</strong>一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过，称之为有状态会话；</p><p><strong>客户端 服务端</strong></p><p>服务端给客户端一个 信件，客户端下次访问服务端带上信件就可以了； cookie<br>服务器登记你来过了，下次你来的时候我来匹配你； seesion</p><h4 id="5-2、保存会话的两种技术"><a href="#5-2、保存会话的两种技术" class="headerlink" title="5.2、保存会话的两种技术"></a>5.2、保存会话的两种技术</h4><p><strong>cookie：</strong>客户端技术 （响应，请求）<br><strong>session：</strong>服务器技术，利用这个技术，可以保存用户的会话信息？ 我们可以把信息或者数据放在Session中！<br>                  常见常见：网站登录之后，你下次不用再登录了，第二次访问直接就上去了！</p><h4 id="5-3、Cookie"><a href="#5-3、Cookie" class="headerlink" title="5.3、Cookie"></a>5.3、Cookie</h4><p><img src="https://img-blog.csdnimg.cn/20210511122646700.png"></p><p>1.从请求中拿到cookie信息<br>2.服务器响应给客户端cookie</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies(); //获得Cookie</span><br><span class="line">cookie.getName(); //获得cookie中的key</span><br><span class="line">cookie.getValue(); //获得cookie中的vlaue</span><br><span class="line">new Cookie(&quot;lastLoginTime&quot;, System.currentTimeMillis()+&quot;&quot;); //新建一个cookie</span><br><span class="line">cookie.setMaxAge(24*60*60); //设置cookie的有效期</span><br><span class="line">resp.addCookie(cookie); //响应给客户端一个cookie</span><br></pre></td></tr></table></figure><p><strong>cookie：</strong>一般会保存在本地的 用户目录下 appdata；</p><p>一个网站cookie是否存在上限？</p><p>🌂一个Cookie只能保存一个信息；<br>🌂一个web站点可以给浏览器发送多个cookie，最多存放20个cookie；<br>🌂Cookie大小有限制4kb；<br>🌂300个cookie浏览器上限</p><p><strong>删除Cookie</strong></p><p>🌂不设置有效期，关闭浏览器，自动失效；<br>🌂设置有效期时间为 0 ；<br><strong>编码解码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URLEncoder.encode(&quot;黄皖&quot;,&quot;utf-8&quot;)</span><br><span class="line">URLDecoder.decode(cookie.getValue(),&quot;UTF-8&quot;)</span><br></pre></td></tr></table></figure><h4 id="5-4、Session（重点）"><a href="#5-4、Session（重点）" class="headerlink" title="5.4、Session（重点）"></a>5.4、Session（重点）</h4><p><strong>什么是Session：</strong></p><p>服务器会给每一个用户（浏览器）创建一个Seesion对象；<br>一个Seesion独占一个浏览器，只要浏览器没有关闭，这个Session就存在；<br>用户登录之后，整个网站它都可以访问！–&gt; 保存用户的信息；保存购物车的信息……<br>…<br>…<br>…</p><p><strong>Session和cookie的区别：</strong></p><p>Cookie是把用户的数据写给用户的浏览器，浏览器保存 （可以保存多个）<br>Session把用户的数据写到用户独占Session中，服务器端保存 （保存重要的信息，减少服务器资源的浪费）<br>Session对象由服务创建；</p><p><strong>使用场景：</strong></p><p>保存一个登录用户的信息；<br>购物车信息；<br>在整个网站中经常会使用的数据，我们将它保存在Session中；</p><p><img src="https://img-blog.csdnimg.cn/2021051113451353.png"></p><p><strong>使用Session：</strong></p><p>新建两个包，分别为session和pojo，以及在web.xml中注册和配置session过期时间。</p><p><strong>session.java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.session;</span><br><span class="line"></span><br><span class="line">import com.huang.pojo.Person;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Session extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        //解决乱码问题</span><br><span class="line">        req.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        resp.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">        //得到Session</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        //给Session中存东西</span><br><span class="line">        session.setAttribute(&quot;name&quot;,new Person(&quot;黄皖&quot;,1));</span><br><span class="line">        //获取Session的ID</span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        //判断Session是不是新创建</span><br><span class="line">        if (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(&quot;session创建成功,ID:&quot;+sessionId);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            resp.getWriter().write(&quot;session以及在服务器中存在了,ID:&quot;+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //Session创建的时候做了什么事情；</span><br><span class="line">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span><br><span class="line">//        resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>session2.java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.session;</span><br><span class="line"></span><br><span class="line">import com.huang.pojo.Person;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.*;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Session extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        //解决乱码问题</span><br><span class="line">        req.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        resp.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        resp.setContentType(&quot;text/html;charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">        //得到Session</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line">        //给Session中存东西</span><br><span class="line">        session.setAttribute(&quot;name&quot;,new Person(&quot;黄皖&quot;,1));</span><br><span class="line">        //获取Session的ID</span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        //判断Session是不是新创建</span><br><span class="line">        if (session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(&quot;session创建成功,ID:&quot;+sessionId);</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            resp.getWriter().write(&quot;session以及在服务器中存在了,ID:&quot;+sessionId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //Session创建的时候做了什么事情；</span><br><span class="line">//        Cookie cookie = new Cookie(&quot;JSESSIONID&quot;,sessionId);</span><br><span class="line">//        resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>person.java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.pojo;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Person(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Person&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;Session&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;com.huang.session.Session&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;Session&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/s1&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;Session2&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;com.huang.session.Session2&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;Session2&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/s2&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h5 id="手动配置过期时间"><a href="#手动配置过期时间" class="headerlink" title="手动配置过期时间"></a>手动配置过期时间</h5><p>手动配置session过期时间，也就是只要打开这个就自动过期，再打开以前的网页又会重新生成一个session，下面看看看简单的生成代码吧，这个web.xml的注册在上面，放在一起了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.session;</span><br><span class="line"></span><br><span class="line">import com.huang.pojo.Person;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Session2 extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        //得到Session</span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        Person person = (Person) session.getAttribute(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line">        HttpSession Session = req.getSession();</span><br><span class="line">        session.removeAttribute(&quot;name&quot;);</span><br><span class="line">//手动注销Session</span><br><span class="line">        session.invalidate();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="自动配置过期时间"><a href="#自动配置过期时间" class="headerlink" title="自动配置过期时间"></a>自动配置过期时间</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--设置Session默认的失效时间--&gt;</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">    &lt;!--15分钟后Session自动失效，以分钟为单位--&gt;</span><br><span class="line">    &lt;session-timeout&gt;15&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-confi</span><br></pre></td></tr></table></figure><h2 id="6、JSP"><a href="#6、JSP" class="headerlink" title="6、JSP"></a>6、JSP</h2><h4 id="6-1、什么是JSP"><a href="#6-1、什么是JSP" class="headerlink" title="6.1、什么是JSP"></a>6.1、什么是JSP</h4><p>Java Server Pages ： Java服务器端页面，也和Servlet一样，用于动态Web技术！</p><p><strong>最大的特点：</strong></p><p>写JSP就像在写HTML<br><strong>区别：</strong><br> 🌂HTML只给用户提供静态的数据<br> 🌂JSP页面中可以嵌入JAVA代码，为用户提供动态数据；</p><h4 id="6-2、JSP原理"><a href="#6-2、JSP原理" class="headerlink" title="6.2、JSP原理"></a>6.2、JSP原理</h4><p><strong>思路：</strong>JSP到底怎么执行的！</p><p>1.代码层面没有任何问题</p><p>2.服务器内部工作</p><p>​     🌂tomcat中有一个work目录；</p><p>​     🌂IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录<br><img src="https://img-blog.csdnimg.cn/2021051114105383.png" alt="在这里插入图片描述"></p><p>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</p><p>JSP最终也会被转换成为一个Java类！</p><p>JSP 本质上就是一个Servlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//初始化</span><br><span class="line">  public void _jspInit() &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">//销毁</span><br><span class="line">  public void _jspDestroy() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">//JSPService</span><br><span class="line">  public void _jspService(.HttpServletRequest request,HttpServletResponse response)</span><br></pre></td></tr></table></figure><h5 id="1-判断请求"><a href="#1-判断请求" class="headerlink" title="1.判断请求"></a>1.判断请求</h5><h5 id="2-内置一些对象"><a href="#2-内置一些对象" class="headerlink" title="2.内置一些对象"></a>2.内置一些对象</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">final javax.servlet.jsp.PageContext pageContext;  //页面上下文</span><br><span class="line">javax.servlet.http.HttpSession session = null;    //session</span><br><span class="line">final javax.servlet.ServletContext application;   //applicationContext</span><br><span class="line">final javax.servlet.ServletConfig config;         //config</span><br><span class="line">javax.servlet.jsp.JspWriter out = null;           //out</span><br><span class="line">final java.lang.Object page = this;               //page：当前</span><br><span class="line">HttpServletRequest request                        //请求</span><br><span class="line">HttpServletResponse response                      //响应</span><br></pre></td></tr></table></figure><h5 id="3-输出页面前增加的代码"><a href="#3-输出页面前增加的代码" class="headerlink" title="3.输出页面前增加的代码"></a>3.输出页面前增加的代码</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(&quot;text/html&quot;);       //设置响应的页面类型</span><br><span class="line">pageContext = _jspxFactory.getPageContext(this, request, response,</span><br><span class="line">       null, true, 8192, true);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext.getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure><h5 id="4-直接使用"><a href="#4-直接使用" class="headerlink" title="4.直接使用"></a>4.直接使用</h5><p>以上的这些个对象我们可以在JSP页面中直接使用！<br>其实就是jsp&gt;java&gt;class(Servlet)</p><p>在JSP页面中:只要是 JAVA代码就会原封不动的输出；</p><p>如果是HTML代码，就会被转换为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">out.write(<span class="string">&quot;&lt;html&gt;\r\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>这样的格式，输出到前端！</p><h4 id="6-3、JSP基础语法"><a href="#6-3、JSP基础语法" class="headerlink" title="6.3、JSP基础语法"></a>6.3、JSP基础语法</h4><p>任何语言都有自己的语法，JAVA中有,。 JSP 作为java技术的一种应用，它拥有一些自己扩充的语法（了解，知道即可！），Java所有语法都支持！</p><p><strong>JSP表达式</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">作用：用来将程序的输出，输出到客户端</span><br><span class="line">&lt;%= 变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%= new java.util.Date()%&gt;</span><br></pre></td></tr></table></figure><p><strong>jsp脚本片段</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--jsp脚本片段--%&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    int sum = 0;</span><br><span class="line">    for (int i = 1; i &lt;=100 ; i++) &#123;</span><br><span class="line">      sum+=i;</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(&quot;&lt;h1&gt;Sum=&quot;+sum+&quot;&lt;/h1&gt;&quot;);</span><br><span class="line">  %&gt;</span><br></pre></td></tr></table></figure><p><strong>脚本片段的再实现</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  int x = 10;</span><br><span class="line">  out.println(x);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;这是一个JSP文档&lt;/p&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  int y = 2;</span><br><span class="line">  out.println(y);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--在代码嵌入HTML元素--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">  &lt;h1&gt;Hello,World  &lt;%=i%&gt; &lt;/h1&gt;</span><br><span class="line">&lt;%</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><strong>JSP声明</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    static &#123;</span><br><span class="line">      System.out.println(&quot;Loading Servlet!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int globalVar = 0;</span><br><span class="line">    </span><br><span class="line">    public void kuang()&#123;</span><br><span class="line">      System.out.println(&quot;进入了方法Kuang！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  %&gt;</span><br></pre></td></tr></table></figure><p>JSP声明：会被编译到JSP生成Java的类中！其他的，就会被生成到_jspService方法中！</p><p>在JSP，嵌入Java代码即可！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure><p>JSP的注释，不会在客户端显示，HTML就会！</p><h4 id="6-4、JSP指令"><a href="#6-4、JSP指令" class="headerlink" title="6.4、JSP指令"></a>6.4、JSP指令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@page args.... %&gt;</span><br><span class="line">&lt;%@include file=&quot;&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--@include会将两个页面合二为一--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@include file=&quot;common/header.jsp&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@include file=&quot;common/footer.jsp&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--jSP标签</span><br><span class="line">    jsp:include：拼接页面，本质还是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">&lt;jsp:include page=&quot;/common/header.jsp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:include page=&quot;/common/footer.jsp&quot;/&gt;</span><br></pre></td></tr></table></figure><h4 id="6-5、9大内置对象"><a href="#6-5、9大内置对象" class="headerlink" title="6.5、9大内置对象"></a>6.5、9大内置对象</h4><p>🌂PageContext 存东西<br>🌂Request 存东西<br>🌂Response<br>🌂Session 存东西<br>🌂Application 【SerlvetContext】 存东西<br>🌂config 【SerlvetConfig】<br>🌂out<br>🌂page ，不用了解<br>🌂exception</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pageContext.setAttribute(&quot;name1&quot;,&quot;黄皖1号&quot;); //保存的数据只在一个页面中有效</span><br><span class="line">request.setAttribute(&quot;name2&quot;,&quot;黄皖2号&quot;); //保存的数据只在一次请求中有效，请求转发会携带这个数据</span><br><span class="line">session.setAttribute(&quot;name3&quot;,&quot;黄皖3号&quot;); //保存的数据只在一次会话中有效，从打开浏览器到关闭浏览器</span><br><span class="line">application.setAttribute(&quot;name4&quot;,&quot;黄皖4号&quot;);  //保存的数据只在服务器中有效，从打开服务器到关闭服务器</span><br></pre></td></tr></table></figure><p><strong>request：</strong>客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻，用户看完没用的！</p><p><strong>session：</strong>客户端向服务器发送请求，产生的数据，用户用完一会还有用，比如：购物车；</p><p><strong>application：</strong>客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可能使用，比如：聊天数据；</p><h4 id="6-6、JSP标签、JSTL标签、EL表达式"><a href="#6-6、JSP标签、JSTL标签、EL表达式" class="headerlink" title="6.6、JSP标签、JSTL标签、EL表达式"></a>6.6、JSP标签、JSTL标签、EL表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- JSTL表达式的依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet.jsp.jstl&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jstl-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- standard标签库 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;taglibs&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;standard&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>EL表达式： ${ }</strong></p><p>🌂获取数据<br>🌂执行运算<br>🌂获取web开发的常用对象<br><strong>JSP标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Apple</span><br><span class="line">  Date: 2021/5/11</span><br><span class="line">  Time: 19:25</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;页面1&lt;/h1&gt;</span><br><span class="line">&lt;jsp:forward page=&quot;/Jsptag2.jsp&quot;&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;name&quot; value=&quot;huangwan&quot;/&gt;</span><br><span class="line">    &lt;jsp:param name=&quot;age&quot; value=&quot;23&quot;/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Apple</span><br><span class="line">  Date: 2021/5/11</span><br><span class="line">  Time: 19:27</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;页面2&lt;/h1&gt;</span><br><span class="line">名字：&lt;%=request.getParameter(&quot;name&quot;)%&gt;</span><br><span class="line">年龄：&lt;%=request.getParameter(&quot;age&quot;)%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>JSTL表达式</strong></p><p>JSTL标签库的使用就是为了弥补HTML标签的不足；它自定义许多标签，可以供我们使用，标签的功能和Java代码一样！</p><p>格式化标签</p><p>SQL标签</p><p>XML 标签</p><p>核心标签 （掌握部分）</p><p><img src="https://img-blog.csdnimg.cn/20210511184901453.png" alt="在这里插入图片描述"></p><p>JSTL标签库使用步骤</p><p>引入对应的 taglib<br>使用其中的方法<br>在Tomcat 也需要引入 jstl的包，否则会报错：JSTL解析错误</p><p><strong>c：if</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h4&gt;if测试&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;coreif.jsp&quot; method=&quot;get&quot;&gt;</span><br><span class="line">    &lt;%--</span><br><span class="line">    EL表达式获取表单中的数据</span><br><span class="line">    $&#123;param.参数名&#125;</span><br><span class="line">    --%&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot; value=&quot;$&#123;param.username&#125;&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;%--判断如果提交的用户名是管理员，则登录成功--%&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;param.username==&#x27;admin&#x27;&#125;&quot; var=&quot;isAdmin&quot;&gt;</span><br><span class="line">    &lt;c:out value=&quot;管理员欢迎您！&quot;/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--自闭合标签--%&gt;</span><br><span class="line">&lt;c:out value=&quot;$&#123;isAdmin&#125;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>c:choose c:when</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--定义一个变量score，值为85--%&gt;</span><br><span class="line">&lt;c:set var=&quot;score&quot; value=&quot;55&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;score&gt;=90&#125;&quot;&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;score&gt;=80&#125;&quot;&gt;</span><br><span class="line">        你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;score&gt;=70&#125;&quot;&gt;</span><br><span class="line">        你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=&quot;$&#123;score&lt;=60&#125;&quot;&gt;</span><br><span class="line">        你的成绩为不及格</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>c:forEach</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; people = new ArrayList&lt;&gt;();</span><br><span class="line">    people.add(0,&quot;张三&quot;);</span><br><span class="line">    people.add(1,&quot;李四&quot;);</span><br><span class="line">    people.add(2,&quot;王五&quot;);</span><br><span class="line">    people.add(3,&quot;赵六&quot;);</span><br><span class="line">    people.add(4,&quot;田六&quot;);</span><br><span class="line">    request.setAttribute(&quot;list&quot;,people);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">var , 每一次遍历出来的变量</span><br><span class="line">items, 要遍历的对象</span><br><span class="line">begin,   哪里开始</span><br><span class="line">end,     到哪里</span><br><span class="line">step,   步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:forEach var=&quot;people&quot; items=&quot;$&#123;list&#125;&quot;&gt;</span><br><span class="line">    &lt;c:out value=&quot;$&#123;people&#125;&quot;/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach var=&quot;people&quot; items=&quot;$&#123;list&#125;&quot; begin=&quot;1&quot; end=&quot;3&quot; step=&quot;1&quot; &gt;</span><br><span class="line">    &lt;c:out value=&quot;$&#123;people&#125;&quot;/&gt; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h2 id="7、JavaBean"><a href="#7、JavaBean" class="headerlink" title="7、JavaBean"></a>7、JavaBean</h2><p>实体类</p><p>JavaBean有特定的写法：</p><ul><li>必须要有一个无参构造</li><li>属性必须私有化</li><li>必须有对应的get&#x2F;set方法；</li></ul><p>一般用来和数据库的字段做映射 ORM；</p><p>ORM ：对象关系映射</p><ul><li>表—&gt;类</li><li>字段–&gt;属性</li><li>行记录—-&gt;对象</li></ul><p><strong>people表</strong></p><p><strong>people表</strong></p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>黄皖</td><td>3</td><td>地球</td></tr><tr><td>2</td><td>小黄</td><td>18</td><td>中国</td></tr><tr><td>3</td><td>小皖</td><td>100</td><td>湖北</td></tr></tbody></table><p><strong>People.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span>  String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(<span class="type">int</span> id, String name, <span class="type">int</span> age, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Javabean.jsp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Apple</span><br><span class="line">  Date: 2021/5/13</span><br><span class="line">  Time: 18:22</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:useBean id=&quot;people&quot; class=&quot;com.huang.pojo.People&quot; scope=&quot;page&quot;&gt;&lt;/jsp:useBean&gt;</span><br><span class="line">&lt;jsp:setProperty name=&quot;people&quot; property=&quot;id&quot; value=&quot;1&quot;&gt;&lt;/jsp:setProperty&gt;</span><br><span class="line">&lt;jsp:setProperty name=&quot;people&quot; property=&quot;name&quot; value=&quot;黄皖&quot;&gt;&lt;/jsp:setProperty&gt;</span><br><span class="line">&lt;jsp:setProperty name=&quot;people&quot; property=&quot;age&quot; value=&quot;23&quot;&gt;&lt;/jsp:setProperty&gt;</span><br><span class="line">&lt;jsp:setProperty name=&quot;people&quot; property=&quot;address&quot; value=&quot;麻城&quot;&gt;&lt;/jsp:setProperty&gt;</span><br><span class="line"></span><br><span class="line">id：&lt;jsp:getProperty name=&quot;people&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">姓名：&lt;jsp:getProperty name=&quot;people&quot; property=&quot;name&quot;/&gt;</span><br><span class="line">年龄：&lt;jsp:getProperty name=&quot;people&quot; property=&quot;age&quot;/&gt;</span><br><span class="line">地址：&lt;jsp:getProperty name=&quot;people&quot; property=&quot;address&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注：这里直接访问Javabean.jsp即可</p><h2 id="8、MVC三层架构"><a href="#8、MVC三层架构" class="headerlink" title="8、MVC三层架构"></a>8、MVC三层架构</h2><p><strong>什么是MVC：</strong> Model view Controller 模型、视图、控制器</p><p>早些年用户直接访问控制层，控制层就可以直接操作数据库；</p><p><img src="https://img-blog.csdnimg.cn/20210513185720722.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">servlet--CRUD--&gt;数据库</span><br><span class="line">弊端：程序十分臃肿，不利于维护  </span><br><span class="line">servlet的代码中：处理请求、响应、视图跳转、处理JDBC、处理业务代码、处理逻辑代码</span><br><span class="line"></span><br><span class="line">架构：没有什么是加一层解决不了的！</span><br><span class="line">程序猿调用</span><br><span class="line">|</span><br><span class="line">JDBC</span><br><span class="line">|</span><br><span class="line">Mysql Oracle SqlServer ....</span><br></pre></td></tr></table></figure><p>8.1、MVC三层架构</p><p><img src="https://img-blog.csdnimg.cn/20210513185928150.png" alt="在这里插入图片描述"></p><p>7.1、MVC三层架构</p><p><strong>Model</strong></p><p>   🌂业务处理 ：业务逻辑（Service）<br>   🌂数据持久层：CRUD （Dao）<br><strong>View</strong></p><p>   🌂展示数据<br>   🌂提供链接发起Servlet请求 （a，form，img…）<br><strong>Controller （Servlet）</strong></p><p>   🌂接收用户的请求 ：（req：请求参数、Session信息….）</p><p>   🌂交给业务层处理对应的代码</p><p>   🌂控制视图的跳转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录---&gt;接收用户的登录请求---&gt;处理用户的请求（获取用户登录的参数，username，password）----&gt;交给业务层处理登录业务（判断用户名密码是否正确：事务）---&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure><h2 id="9、Filter-（重点）"><a href="#9、Filter-（重点）" class="headerlink" title="9、Filter （重点）"></a>9、Filter （重点）</h2><p>Filter：过滤器 ，用来过滤网站的数据；</p><p>   🌂处理中文乱码<br>   🌂登录验证….<br><img src="https://img-blog.csdnimg.cn/20210513193839463.png" alt="在这里插入图片描述"></p><p>​        例如我们新建一个ShowServlet.class文件并且在web.xml中注册，在浏览器端输出一句话，此时就会发现中文会乱码，虽然我们可以加一行代码来解决这个问题，但是如果网页足够多的时候不可能每一个都进行重复的工作哟，那么可以用一个简单的过滤器来实现这个问题，不仅更加安全而且还不用在每个servlet里面进行重复的工作。</p><p><strong>ShowServlet</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class ShowServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">       //resp.setCharacterEncoding(&quot;GBK&quot;);</span><br><span class="line">        resp.getWriter().write(&quot;你好呀，小黄&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;filter&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-class&gt;com.huang.servlet.ShowServlet&lt;/servlet-class&gt;</span><br><span class="line">&lt;/servlet&gt;</span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;filter&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/show&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;servlet-mapping&gt;</span><br><span class="line">  &lt;servlet-name&gt;filter&lt;/servlet-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;/filter/show&lt;/url-pattern&gt;</span><br><span class="line">&lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>现在我们就用filter来实现这些要求，新建CharacterEncodingFilter，来实现这些要求。</p><p><strong>CharacterEncodingFilter</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.filter;</span><br><span class="line"></span><br><span class="line">import javax.servlet.*;</span><br><span class="line">import javax.servlet.annotation.WebFilter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">//字符编码过滤器 &lt;!--只要是 /servlet的任何请求，会经过这个过滤器--&gt;</span><br><span class="line">@WebFilter(&quot;/servlet/*&quot;)</span><br><span class="line">public class CharacterEncodingFilter implements Filter &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 初始化：web服务器启动，就以及初始化了，随时等待过滤对象出现！</span><br><span class="line">     *</span><br><span class="line">     * @param filterConfig</span><br><span class="line">     * @throws ServletException</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void init(FilterConfig filterConfig) throws ServletException &#123;</span><br><span class="line">        System.out.println(&quot;CharacterEncodingFilter初始化&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //Chain : 链</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 1. 过滤中的所有代码，在过滤特定请求的时候都会执行</span><br><span class="line">     * 2. 必须要让过滤器继续同行</span><br><span class="line">     * chain.doFilter(request,response);</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</span><br><span class="line">        request.setCharacterEncoding(&quot;utf-16&quot;);</span><br><span class="line">        response.setCharacterEncoding(&quot;utf-16&quot;);</span><br><span class="line">        response.setContentType(&quot;text/html;charset = utf-16&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;CharacterEncodingFilter执行前...&quot;);</span><br><span class="line">        chain.doFilter(request, response);// 让我们的请求继续走，如果不写，我们的程序到这就拦截停止了</span><br><span class="line">        System.out.println(&quot;CharacterEncodingFilter执行后...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //销毁：web服务器关闭的时候，过滤会销毁</span><br><span class="line">    @Override</span><br><span class="line">    public void destroy() &#123;</span><br><span class="line">        System.out.println(&quot;CharacterEncodingFilter销毁&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;filter&lt;/servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;com.huang.servlet.ShowServlet&lt;/servlet-class&gt;</span><br><span class="line">  &lt;/servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;filter&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/show&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;filter&lt;/servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/filter/show&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/servlet-mapping&gt;</span><br><span class="line"></span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;com.huang.filter.CharacterEncodingFilter&lt;/filter-class&gt;</span><br><span class="line">&lt;/filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;CharacterEncodingFilter&lt;/filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;/filter/show&lt;/url-pattern&gt;</span><br><span class="line">  &lt;/filter-mapping&gt;</span><br></pre></td></tr></table></figure><h2 id="10、监听器"><a href="#10、监听器" class="headerlink" title="10、监听器"></a>10、监听器</h2><p>实现一个监听器的接口；（有N种）</p><ol><li><p>编写一个监听器</p><p>实现监听器的接口…</p><p><strong>OnlineCountListener.java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletContext;</span><br><span class="line">import javax.servlet.annotation.WebListener;</span><br><span class="line">import javax.servlet.http.HttpSession;</span><br><span class="line">import javax.servlet.http.HttpSessionEvent;</span><br><span class="line">import javax.servlet.http.HttpSessionListener;</span><br><span class="line">//统计网站在线人数： 统计session</span><br><span class="line">@WebListener</span><br><span class="line">public class OnlineCountListener implements HttpSessionListener &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 创建session监听:看你的一举一动</span><br><span class="line">     * 一旦创建session就会触发一次这个事件</span><br><span class="line">     *</span><br><span class="line">     * @param se</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void sessionCreated(HttpSessionEvent se) &#123;</span><br><span class="line">        HttpSession session = se.getSession();</span><br><span class="line">        System.out.println(session.getId());</span><br><span class="line">        ServletContext context = session.getServletContext();</span><br><span class="line">        Integer onlineCount = (Integer) context.getAttribute(&quot;onlineCount&quot;);</span><br><span class="line"></span><br><span class="line">        if (onlineCount == null) &#123;</span><br><span class="line">            onlineCount = new Integer(1);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            int count = onlineCount.intValue();</span><br><span class="line">            onlineCount = new Integer(count + 1);</span><br><span class="line">        &#125;</span><br><span class="line">        context.setAttribute(&quot;onlineCount&quot;, onlineCount);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 销毁session监听</span><br><span class="line">     * 一旦销毁session就会触发一次这个事件</span><br><span class="line">     *</span><br><span class="line">     * @param se</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void sessionDestroyed(HttpSessionEvent se) &#123;</span><br><span class="line">        HttpSession session = se.getSession();</span><br><span class="line">        ServletContext context = session.getServletContext();</span><br><span class="line"></span><br><span class="line">        Integer onlineCount = (Integer) context.getAttribute(&quot;onlineCount&quot;);</span><br><span class="line"></span><br><span class="line">        if (onlineCount == null) &#123;</span><br><span class="line">            onlineCount = new Integer(0);</span><br><span class="line">        &#125; else if (onlineCount &gt;= 1) &#123;</span><br><span class="line">            int count = onlineCount.intValue();</span><br><span class="line">            onlineCount = new Integer(count - 1);</span><br><span class="line">        &#125;</span><br><span class="line">        context.setAttribute(&quot;onlineCount&quot;, onlineCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">  &lt;listener-class&gt;com.huang.servlet.OnlineCountListener&lt;/listener-class&gt;</span><br><span class="line">&lt;/listener&gt;</span><br></pre></td></tr></table></figure><p><strong>index.jsp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;当前有&lt;spqn style=&quot;color: aquamarine&quot;&gt;&lt;%=this.getServletConfig().getServletContext().getAttribute(&quot;onlineCount&quot;)%&gt;&lt;/spqn&gt;人在线&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="13、过滤器、监听器常见应用"><a href="#13、过滤器、监听器常见应用" class="headerlink" title="13、过滤器、监听器常见应用"></a>13、过滤器、监听器常见应用</h2><p><strong>监听器：GUI编程中经常使用；</strong></p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">package com.huang.servlet;</span><br><span class="line"></span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.event.WindowAdapter;</span><br><span class="line">import java.awt.event.WindowEvent;</span><br><span class="line">import java.awt.event.WindowListener;</span><br><span class="line"></span><br><span class="line">public class TestPanel &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Frame frame = new Frame(&quot;中秋节快乐&quot;);  //新建一个窗体</span><br><span class="line">        Panel panel = new Panel(null); //面板</span><br><span class="line">        frame.setLayout(null); //设置窗体的布局</span><br><span class="line"></span><br><span class="line">        frame.setBounds(300,300,500,500);</span><br><span class="line">        frame.setBackground(new Color(0,0,255)); //设置背景颜色</span><br><span class="line"></span><br><span class="line">        panel.setBounds(50,50,300,300);</span><br><span class="line">        panel.setBackground(new Color(0,255,0)); //设置背景颜色</span><br><span class="line"></span><br><span class="line">        frame.add(panel);</span><br><span class="line"></span><br><span class="line">        frame.setVisible(true);</span><br><span class="line"></span><br><span class="line">        //监听事件，监听关闭事件</span><br><span class="line">        frame.addWindowListener(new WindowListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void windowOpened(WindowEvent e) &#123;</span><br><span class="line">                System.out.println(&quot;打开&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void windowClosing(WindowEvent e) &#123;</span><br><span class="line">                System.out.println(&quot;关闭ing&quot;);</span><br><span class="line">                System.exit(0);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void windowClosed(WindowEvent e) &#123;</span><br><span class="line">                System.out.println(&quot;关闭ed&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void windowIconified(WindowEvent e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void windowDeiconified(WindowEvent e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void windowActivated(WindowEvent e) &#123;</span><br><span class="line">                System.out.println(&quot;激活&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void windowDeactivated(WindowEvent e) &#123;</span><br><span class="line">                System.out.println(&quot;未激活&quot;);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、做个登陆判断的小Demo"><a href="#11、做个登陆判断的小Demo" class="headerlink" title="11、做个登陆判断的小Demo"></a>11、做个登陆判断的小Demo</h2><p>用户登录之后才能进入主页！用户注销后就不能进入主页了！</p><ol><li>用户登录之后，向Sesison中放入用户的数据</li><li>进入主页的时候要判断用户是否已经登录；要求：在过滤器中实现！</li></ol><p>先看看项目结构吧：</p><p><img src="https://img-blog.csdnimg.cn/20210516183713145.png" alt="在这里插入图片描述"></p><p><strong>登录页面：Login.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Apple</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">5</span>/<span class="number">16</span></span><br><span class="line">  Time: <span class="number">15</span>:<span class="number">42</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登陆&lt;/h1&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/servlet/login&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> &gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>处理登陆的LoginServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.util.Constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取前端参数的请求</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (username.equals(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(Constant.USER_SESSION,req.getSession().getId());</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/sys/success.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/error.jsp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>登陆成功的success.jsp</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Apple</span><br><span class="line">  Date: 2021/5/16</span><br><span class="line">  Time: 15:41</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--&lt;%</span><br><span class="line">    Object user_session = request.getSession().getAttribute(&quot;USER_SESSION&quot;);</span><br><span class="line">    if (user_session==null)&#123;</span><br><span class="line">        response.sendRedirect(&quot;/Login.jsp&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;--%&gt;</span><br><span class="line">&lt;h1&gt;这是一个主页&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=&quot;/servlet/logout&quot;&gt;注销&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>处理判断是否是登陆状态的LoginoutServlet</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.huang.util.Constant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginoutServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">user_session</span> <span class="operator">=</span> req.getSession().getAttribute(Constant.USER_SESSION);</span><br><span class="line">        <span class="keyword">if</span> (user_session!=<span class="literal">null</span>)&#123;</span><br><span class="line">            req.getSession().removeAttribute(Constant.USER_SESSION);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/Login.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;/Login.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>错误页面error.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Apple</span><br><span class="line">  Date: <span class="number">2021</span>/<span class="number">5</span>/<span class="number">16</span></span><br><span class="line">  Time: <span class="number">16</span>:08</span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;这是一个错误页面&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;/Login.jsp&quot;</span>&gt;返回登录页面&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Constant.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huang.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constant</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_SESSION=<span class="string">&quot;USER_SESSION&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.huang.servlet.LoginServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/login<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.huang.servlet.LoginoutServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LoginoutServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/logout<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.huang.filter.SysFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SysFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sys/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解和反射</title>
      <link href="/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>/2021/01/29/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h2 id="注解-java-Annotation"><a href="#注解-java-Annotation" class="headerlink" title="注解(java.Annotation)"></a>注解(java.Annotation)</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​        注解和注释一样，注解不是程序本身，而是对程序作出解释，而注解与注释不同的点在于，注解可以被其他程序比如编译器读取。</p><p>下面列举三个基本常见的注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span><span class="comment">//重写注解</span></span><br><span class="line"><span class="meta">@Deprecated</span><span class="comment">//不推荐使用注解，可以使用但是又风险或者有更好的方式</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span><span class="comment">//“镇压”警告注解</span></span><br></pre></td></tr></table></figure><h4 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h4><p>​        元注解的作用解释注解其他注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型做说明。</p><p><strong>4个元注解分别为：</strong></p><ul><li><p>@Target：用于描述注解的使用范围</p></li><li><p>@Retention：用于表示需要在什么级别保存注解信息，用于描述注解的声明周期，（SOURCE&lt;CLASS&lt;RUNTIME）</p></li><li><p>@Document：说明该注解将被包含在javadoc中</p></li><li><p>@Inherited：说明子类可以继承父类中的该注解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SunAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Annotation_01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//Target表示我们的注解可以用在哪些地方</span></span><br><span class="line"><span class="comment">// ElementType.METHO只在方法上有用</span></span><br><span class="line"><span class="comment">//ElementType.TYPE在类上有用</span></span><br><span class="line"><span class="meta">@Target(value =&#123; ElementType.METHOD,ElementType.TYPE&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Retention表示我们的注解在哪里还有用</span></span><br><span class="line"><span class="comment">//RetentionPolicy.RUNTIME在运行时有效</span></span><br><span class="line"><span class="comment">//SOURCE&lt;CLASS&lt;RUNTIME</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Documented：说明该注解将被包含在javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Inherited：说明子类可以继承父类中的该注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>使用@interface自定义注解时﹐自动继承了java.lang.annotation.Annotation接口</p><p><strong>分析：</strong></p><p>interface用来声明一个注解,格式:public @interface注解名{定义内容}</p><p>其中的每一个方法实际上是声明了一个配置参数.</p><p>方法的名称就是参数的名称.</p><p>返回值类型就是参数的类型人(返回值只能是基本类型.Class , string , enum ).</p><p>可以通过default来声明参数的默认值.</p><p>如果只有一个参数成员，一般参数名为value.</p><p>注解元素必须要有值﹐我们定义注解元察时,经常使用空字符串,0作为默认值．</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SunAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Annotation_02</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation1(schools = &quot;FJUT&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation2(&quot;小明&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation1&#123;</span><br><span class="line">    <span class="comment">//注解的参数：类型+参数名()[default 默认值];</span></span><br><span class="line">    String <span class="title function_">name</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">age</span><span class="params">()</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    String[] schools();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解的参数：类型+参数名()[default 默认值];</span></span><br><span class="line">    <span class="comment">//不成文规定一个参数默认用value</span></span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反射（java-Reflection"><a href="#反射（java-Reflection" class="headerlink" title="反射（java.Reflection)"></a>反射（java.Reflection)</h2><h4 id="动态语言和静态语言"><a href="#动态语言和静态语言" class="headerlink" title="动态语言和静态语言"></a>动态语言和静态语言</h4><h5 id="动态语言："><a href="#动态语言：" class="headerlink" title="动态语言："></a><strong>动态语言</strong>：</h5><p> 在运行时可以改变其结构：例如新的函数、对象甚至代码可以被引进，已有的函数可以被删除或者是其他结构上的变化。通俗来说就是运行时代码可以根据一些条件来改变自身的结构。主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</p><h5 id="静态语言："><a href="#静态语言：" class="headerlink" title="静态语言："></a><strong>静态语言</strong>：</h5><p> 与动态语言相对应的，运行时不能改变其结构，如Java、C、C++。Java不是动态语言，但是java可以称为是“准动态语言”。即java有一定的动态性，可以利用反射机制获得类似动态语言的特性。Java的动态性使得编程时更加灵活。</p><h4 id="java-Reflection应用："><a href="#java-Reflection应用：" class="headerlink" title="java.Reflection应用："></a>java.Reflection应用：</h4><p> 反射是Java被视为动态语言的关键，反射机制允许程序在执行期间借助于ReflectionAPI获取任何类的内部信息，并且能够直接操作任意对象的内部属性及方法。</p><p> 加载完类之后，在堆内存中的方法区中间产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。</p><p><strong>测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SunReflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection_01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;SunReflection.User&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;SunReflection.User&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c3</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;SunReflection.User&quot;</span>);</span><br><span class="line">        <span class="comment">//打印hashcode可以看出一个类在内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个类被被载后，类的整个结构都会被封装在Class对象中</span></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类：pojo entity</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> Id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        Id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, Id=&quot;</span> + Id +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a><strong>Class类的常用方法</strong></h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>static Class forName(String name)</td><td>返回指定类名name对应的Class对象</td></tr><tr><td>Object newInstance()</td><td>调用缺省构造函数，返回Class对象的一个实例</td></tr><tr><td>String getName()</td><td>返回此Class对象所表示的实体（类、接口、数组类或者void）的名称</td></tr><tr><td>Class getSuperClass</td><td>返回当前Class对象的父类Class对象</td></tr><tr><td>Class[] getinterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader getClassLoader()</td><td>返回该类的加载器</td></tr><tr><td>Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Method getMothed(String name,Class… T)</td><td>返回一个Method对象，此对象形参类型为param Type</td></tr><tr><td>Fied[] getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr></tbody></table><p><strong>获得类的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SunReflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection_02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;这个人是：&quot;</span>+person.name);</span><br><span class="line">        <span class="comment">//方式1：通过对象获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c1</span> <span class="operator">=</span> person.getClass();</span><br><span class="line">        System.out.println(c1.hashCode());</span><br><span class="line">        <span class="comment">//方式2：forName获得</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;SunReflection.Student&quot;</span>);</span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        <span class="comment">//方式3：通过类名.class获得</span></span><br><span class="line">        Class c3=Student.class;</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        <span class="comment">//基本内置类型的包装类可以获得</span></span><br><span class="line">        Class c4=Integer.TYPE;</span><br><span class="line">        <span class="comment">//如果输出c1/c2/c3的hashcode，可以看到是一样的</span></span><br><span class="line">        <span class="comment">//获得父类的类对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c5</span> <span class="operator">=</span> c1.getSuperclass();</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;老师&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SunReflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection_03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class c1= Object.class;<span class="comment">//类</span></span><br><span class="line">        Class c2= Runnable.class;<span class="comment">//接口</span></span><br><span class="line">        Class c3= String[].class;<span class="comment">//一维二维数组</span></span><br><span class="line">        Class c4= <span class="type">int</span>[][].class;</span><br><span class="line">        Class c5=Override.class;<span class="comment">//注解</span></span><br><span class="line">        Class c6= ElementType.class;<span class="comment">//枚举</span></span><br><span class="line">        Class c7= Integer.class;<span class="comment">//基本数据类型</span></span><br><span class="line">        Class c8= <span class="keyword">void</span>.class;<span class="comment">//void</span></span><br><span class="line">        Class c9= Class.class;<span class="comment">//Class</span></span><br><span class="line"></span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        System.out.println(c4);</span><br><span class="line">        System.out.println(c5);</span><br><span class="line">        System.out.println(c6);</span><br><span class="line">        System.out.println(c7);</span><br><span class="line">        System.out.println(c8);</span><br><span class="line">        System.out.println(c9);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>同样是int类型的数组，维度不同Class对象所打印出的hashcode不同，即：数组维度不同对应不同的Class对象。</p><h4 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h4><p>Field、Method、Constructor、Superclass、Interface、Annotation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SunReflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection_04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;User&gt; userClass = User.class;</span><br><span class="line">        <span class="comment">//类的名字</span></span><br><span class="line">        System.out.println(userClass.getName());<span class="comment">//包名+类名</span></span><br><span class="line">        System.out.println(userClass.getSimpleName());<span class="comment">//类名</span></span><br><span class="line">        <span class="comment">//获得属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------------&quot;</span>);</span><br><span class="line">        Field[] field1 = userClass.getFields();<span class="comment">//只能找到public属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field f :field1) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        Field[] field2=userClass.getDeclaredFields();<span class="comment">//获得所有属性</span></span><br><span class="line">        <span class="keyword">for</span> (Field f :field2) &#123;</span><br><span class="line">            System.out.println(f);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定的属性</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> userClass.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------&quot;</span>);</span><br><span class="line">        Method[] methods = userClass.getMethods();<span class="comment">//只能获取public方法(本类和父类)</span></span><br><span class="line">        <span class="keyword">for</span> (Method method:methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;1&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        methods=userClass.getDeclaredMethods();<span class="comment">//可以获得所有方法（只有本类）</span></span><br><span class="line">        <span class="keyword">for</span> (Method method:methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2&quot;</span>+method);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定方法只需要在（）中添加参数（方法名，方法参数类）</span></span><br><span class="line">        <span class="comment">//获得指定构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">        Constructor[] constructors=userClass.getConstructors();<span class="comment">//获得public方法</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor c :constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;#&quot;</span>+c);</span><br><span class="line">        &#125;</span><br><span class="line">        constructors=userClass.getDeclaredConstructors();<span class="comment">//获得所有方法</span></span><br><span class="line">        <span class="keyword">for</span> (Constructor c :constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;$&quot;</span>+c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得指定构造器</span></span><br><span class="line">        System.out.println(userClass.getDeclaredConstructor(String.class));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h4><p><strong>创建类的对象</strong></p><ul><li>调用Class对象的newInstance()方法<ul><li>必须要有一个无参数的构造器</li><li>类的构造器的访问权限要够</li></ul></li><li>通过获取Class对象的构造器创建<ul><li>通过Class对象的getDeclaredConstructor()方法获取本类指定参数类型的构造器（上一节有讲）</li><li>向构造器传入一个对象数组，其中包含此构造器所需要的各个参数</li><li>通过Constructor实例化对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SunReflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection_05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;User&gt; c1 = User.class;</span><br><span class="line">        <span class="comment">//1、创建对象：</span></span><br><span class="line">        <span class="comment">//1.1 通过newInstance（）构造一个对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> c1.newInstance();<span class="comment">//实质上是调用的无参构造</span></span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="comment">//1.2 通过构造器创建对象</span></span><br><span class="line">        Constructor&lt;User&gt; constructor = c1.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> constructor.newInstance(<span class="string">&quot;小明&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        <span class="comment">//2、通过反射调用普通方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> (User) c1.newInstance();</span><br><span class="line">        <span class="comment">//通过反射获取一个方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//invoke：激活 、唤醒</span></span><br><span class="line">        <span class="comment">//参数（对象，“方法的值”）</span></span><br><span class="line">        <span class="comment">//不能操作私有属性</span></span><br><span class="line">        <span class="comment">//其中setAccessible(true)方法调用后会关闭对应属性、方法的安全检查，但会改善反射调用的效率问题</span></span><br><span class="line">        setName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        setName.invoke(user3,<span class="string">&quot;China&quot;</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line">        <span class="comment">//3、通过反射操作属性</span></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> (User) c1.newInstance();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> c1.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//不能操作私有属性</span></span><br><span class="line">        <span class="comment">//其中setAccessible(true)方法调用后会关闭对应属性、方法的安全检查，但会改善反射调用的效率问题</span></span><br><span class="line">        name.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        name.set(user4,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(user4.getName());<span class="comment">//李四</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不同方式调用方法性能测试"><a href="#不同方式调用方法性能测试" class="headerlink" title="不同方式调用方法性能测试"></a>不同方式调用方法性能测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> SunReflection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.plaf.synth.SynthOptionPaneUI;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试性能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection_06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">long</span> startTime=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> endTime=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;直接调用执行10亿次需要：&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        Class&lt;User&gt; c1 = User.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">long</span> startTime=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> endTime=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式调用执行10亿次需要：&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test03</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        Class&lt;User&gt; c1 = User.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getName</span> <span class="operator">=</span> c1.getDeclaredMethod(<span class="string">&quot;getName&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">long</span> startTime=System.currentTimeMillis();</span><br><span class="line">        getName.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++) &#123;</span><br><span class="line">            getName.invoke(user,<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> endTime=System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;反射方式调用，关闭安全监测调用执行10亿次需要：&quot;</span>+(endTime-startTime)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 注解和反射 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程总结</title>
      <link href="/2021/01/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2021/01/17/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>程序————&gt;进程————–&gt;线程</strong></p><ul><li>进程<ul><li>进程就是执行程序的一次执行过程,它是一个动态的概念,式系统资源分配的单位</li><li>通常再一个进程中可以包含若干个线程,当然一个进程中至少有一个线程,不然没有存在的意义,线程是CPU调度和执行的单位</li></ul></li><li>线程<ul><li>线程就是独立的执行路径</li><li>在程序运行时,即使没有自己创建线程,后台也会有多个线程,比如主线程,GC线程</li><li>main()称之为主线程,为系统的入口,用于执行整个程序</li><li>在一个进程中,如果开辟了多个线程,线程的运行是由调度器安排调度的,调度器是与操作系统紧密相关的,先后顺序是不能人为干预的</li><li>对同一份资源操作时mm会存在资源抢夺的问题,需要加入并发控制</li><li>线程会带来额外的开销,如CPU调度时间,并发控制开销</li><li>每个线程在自己的工作内存交互,内存控制不当会造成数据不一致</li></ul></li><li>多线程</li></ul><h2 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h2><p>Thread—————–&gt;继承Thread类</p><p>Runnable————–&gt;实现Runnable接口</p><p>Callable—————-&gt;实现Callable接口（目前了解）</p><p>​        创建线程的三种方法，推荐实现Runnable接口，第一种继承Thread类实际还是实现了Runnable接口，第三种就是有些复杂，工作可以用，下面就是三种线程创建方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreeThread</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">huang</span>().start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//new wan().run();</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">wan</span>()).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过实现Callable接口来创建线程的开启方法</span></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;Integer&gt;(<span class="keyword">new</span> <span class="title class_">hahaha</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask).start();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> futureTask.get();</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.继承Thread类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">huang</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;huang这个线程被创建了!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.实现runnable接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">wan</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;wan这个线程被创建了!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.实现Callable接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">hahaha</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hahaha这个线程被创建了！！！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>小结：</strong></p><ul><li><p>继承Thread类：</p><ul><li>子类继承Thread类具备多线程能力</li><li>启动线程：子类对象.start()</li><li><strong>不建议使用：避免OOP单继承局限性</strong></li></ul></li><li><p>实现Runnable接口</p><ul><li>实现Runnable接口具备多线程能力</li><li>启动线程：new Thread(子类对象).start()</li><li><strong>推荐使用：避免单继承局限性，方便同一个对象被多个线程使</strong></li></ul></li><li><p>实现Calleble接口</p><ul><li><p>重写call()方法</p></li><li><p>创建执行服务</p></li></ul><blockquote><p>ExecutorService ser &#x3D; Executors.newFixedThreadPool(线程数);</p></blockquote><ul><li>提交执行</li></ul><blockquote><p>Future&lt;返回值类型&gt; r &#x3D; ser.submit(线程名)；</p></blockquote><ul><li>获取结果</li></ul><blockquote><p>类型 res&#x3D;r.get();</p></blockquote><ul><li>关闭服务</li></ul><blockquote><p>ser.shutdownNow();</p></blockquote></li></ul><p>实现Runnable接口举例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo01;</span><br><span class="line"><span class="comment">//模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread6</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">//胜利设</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;=<span class="number">101</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().getName().equals(<span class="string">&quot;兔子&quot;</span>)&amp;&amp; i%<span class="number">20</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//判断比赛是否结束</span></span><br><span class="line">            <span class="type">boolean</span> flag=gameover(i);</span><br><span class="line">            <span class="comment">//比赛结束，停止</span></span><br><span class="line">            <span class="keyword">if</span> (flag)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot;-----&gt;跑了第&quot;</span>+i+<span class="string">&quot;步&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否为完成比赛</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">gameover</span><span class="params">(<span class="type">int</span> steps)</span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span> (winner!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;&#123;</span><br><span class="line">            <span class="keyword">if</span> (steps&gt;=<span class="number">101</span>)&#123;</span><br><span class="line">                winner=Thread.currentThread().getName();</span><br><span class="line">                System.out.println(<span class="string">&quot;winner is&quot;</span>+winner);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread6</span> <span class="variable">testThread6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestThread6</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testThread6,<span class="string">&quot;兔子&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testThread6,<span class="string">&quot;乌龟&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>​        这里为啥要讲这个静态代理这个尼，因为多线程底层实现就是这个静态代理，下面会给出具体例子来理解静态代理这个概念，总结就是用最简单的例子做出最复杂的功能，以婚庆公司为例，例子： 真实角色：你； 代理角色：婚庆公司； 结婚：实现结婚接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticProxy</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">WeddingCompany</span> <span class="variable">company</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WeddingCompany</span>(<span class="keyword">new</span> <span class="title class_">You</span>());</span><br><span class="line">company.happyMarry();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Marry</span>&#123;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//真实角色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;结婚了真开心！&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色，帮助你结婚</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeddingCompany</span> <span class="keyword">implements</span> <span class="title class_">Marry</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">WeddingCompany</span><span class="params">(Marry target)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.target = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">happyMarry</span><span class="params">()</span> &#123;</span><br><span class="line">before();</span><br><span class="line"><span class="built_in">this</span>.target.happyMarry();</span><br><span class="line">after();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;结婚之后，收尾款&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;结婚前，布置现场&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>总结：</strong>真实对象和代理对象都要实现同一个接口，代理对象要代理真实角色</p><p> <strong>优点：</strong>代理对象可以做很多真实对象不能做的事情，真实对象专注自己的事情</p><p>结合线程来看：</p><blockquote><p>new Thread(t).start();</p><p>new WeddingCompany(new You()).happyMarry();</p></blockquote><ul><li><p>Runnable ——&gt; Marry 接口</p></li><li><p>Thread —-&gt;WeddingCompany 即代理</p></li><li><p>t ——&gt; new You() 目标对象(真实角色)</p></li></ul><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><ul><li>实质属于函数式编程的概念</li></ul><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1.作用"></a>1.<strong>作用</strong></h3><ul><li>避免匿名内部类定义过多</li><li>使代码看起来简介</li><li>简化代码，只留下核心逻辑</li></ul><h3 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2.函数式接口"></a>2.<strong>函数式接口</strong></h3><p>定义：任何接口，如果只包含唯一一个抽象方法，那么它就是一个函数式接口</p><blockquote><p>public interface Runnable{</p><p>public abstract void run();</p><p>}</p></blockquote><p> 对于函数式接口，我们可以通过lambda表达式来创建该接口的对象</p><h3 id="3-lambda简单推导"><a href="#3-lambda简单推导" class="headerlink" title="3.lambda简单推导"></a>3.lambda简单推导</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lmr.practice;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推导Lambda表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DELL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLambda</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Like2</span> <span class="keyword">implements</span> <span class="title class_">Ilike</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i like lambda2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ilike</span> <span class="variable">like</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Like</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like2</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Like3</span> <span class="keyword">implements</span> <span class="title class_">Ilike</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i like lambda4&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Like3</span>();</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.匿名内部类</span></span><br><span class="line">        like = <span class="keyword">new</span> <span class="title class_">Ilike</span>() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i like lambda5&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = ()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i like lambda5&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Ilike</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Like</span> <span class="keyword">implements</span> <span class="title class_">Ilike</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lambda</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i like lambda&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.lmr.practice;</span><br><span class="line"></span><br><span class="line">public class TestLambda2 &#123;</span><br><span class="line"></span><br><span class="line">        public static void main(String[] args) &#123;</span><br><span class="line">            ILove  love = null;</span><br><span class="line">          //1.lambda表示简化</span><br><span class="line">          love = (int a)-&gt;&#123;</span><br><span class="line">                 System.out.println(&quot;LOvee&quot;+ a);</span><br><span class="line">             &#125;;</span><br><span class="line">          </span><br><span class="line">          //简化1：参数类型</span><br><span class="line">            love = (a)-&gt;&#123;</span><br><span class="line">                System.out.println(&quot;LOvee&quot;+ a);</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            //简化2：简化括号</span><br><span class="line">            love = a-&gt;&#123;</span><br><span class="line">                System.out.println(&quot;LOvee&quot;+ a);</span><br><span class="line">            &#125;;</span><br><span class="line">            </span><br><span class="line">            //简化3：简化花括号</span><br><span class="line">            love = a-&gt; System.out.println(&quot;LOvee&quot;+ a);</span><br><span class="line">            </span><br><span class="line">             love.love(205);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">interface ILove&#123;</span><br><span class="line">    void love(int a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>lambda表达式只能有一行代码的情况下才能简化成为一行，如果有多行，那么就用代码块包裹。</li><li>lambda表达式的前提是接口为函数式接口。</li><li>多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号。</li></ul><h2 id="线程具体操作"><a href="#线程具体操作" class="headerlink" title="线程具体操作"></a>线程具体操作</h2><h3 id="1-线程状态"><a href="#1-线程状态" class="headerlink" title="1.线程状态"></a>1.线程状态</h3><p><img src="https://img-blog.csdnimg.cn/20210117102355659.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk4MDA3Mg==,size_16,color_FFFFFF,t_70" alt="1"></p><p><img src="https://img-blog.csdnimg.cn/20210117102432672.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk4MDA3Mg==,size_16,color_FFFFFF,t_70" alt="2"></p><h3 id="2-线程停止的方法"><a href="#2-线程停止的方法" class="headerlink" title="2.线程停止的方法"></a>2.线程停止的方法</h3><ul><li>建议线程正常停止——&gt;利用次数，不建议死循环</li><li>建议使用标志位——&gt;设置一个标志位</li><li>不要使用stop或者destroy等过时或者JDK不建议使用的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestStop</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="comment">//1.设置一个标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;run...Thread&quot;</span>+ i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestStop</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestStop</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(stop).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">900</span>)&#123;</span><br><span class="line">                <span class="comment">//调用stop方法切换标志位，让线程停止</span></span><br><span class="line">                stop.stop();</span><br><span class="line">                System.out.println(<span class="string">&quot;线程停止了&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-线程休眠-sleep"><a href="#3-线程休眠-sleep" class="headerlink" title="3.线程休眠 - sleep()"></a>3.线程休眠 - sleep()</h3><ul><li>sleep(时间)指定当前线程阻塞的毫秒数；</li><li>sleep存在异常InterruptedException；</li><li>sleep时间达到后线程进入就绪状态；</li><li>sleep可以模拟网络延时，倒计时等；</li><li>每一个对象都有一个锁，<strong>sleep不会释放锁。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">例子1：模拟延时：TestThread</span><br><span class="line">模拟网络延时的作用：放大问题的发生性</span><br><span class="line">12</span><br><span class="line">package com.lmr.practice;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">//模拟倒计时</span><br><span class="line">public class TestSleep2 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">//        try &#123;</span><br><span class="line">//            tenDown();</span><br><span class="line">//        &#125; catch (InterruptedException e) &#123;</span><br><span class="line">//            e.printStackTrace();</span><br><span class="line">//        &#125;</span><br><span class="line">        //打印系统当前时间</span><br><span class="line">        Date startTime = new Date(System.currentTimeMillis());  //获取系统当前时间</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                Thread.sleep(1000);</span><br><span class="line">                System.out.println(new SimpleDateFormat(&quot;HH:mm:ss&quot;).format(startTime));</span><br><span class="line">                startTime = new Date(System.currentTimeMillis());  //更新当前时间</span><br><span class="line">            &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void tenDown() throws InterruptedException &#123;</span><br><span class="line">        int num = 10;</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            Thread.sleep(1000);</span><br><span class="line">            System.out.println(num--);</span><br><span class="line">            if(num&lt;=0)&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-线程礼让-yield"><a href="#8-线程礼让-yield" class="headerlink" title="8.线程礼让 - yield()"></a>8.线程礼让 - yield()</h3><ul><li>礼让线程，让当前正在执行的线程暂停，但不阻塞；</li><li>将线程从运行状态转为就绪状态;</li><li>让CPU重新调度，<strong>礼让不一定成功</strong>，看CPU心情。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestYield</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyYield</span> <span class="variable">myYield</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyYield</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myYield,<span class="string">&quot;a&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(myYield,<span class="string">&quot;b&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyYield</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程开始执行&quot;</span>);</span><br><span class="line">        Thread.<span class="keyword">yield</span>();   <span class="comment">//礼让</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;线程停止执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-线程强制执行-join"><a href="#4-线程强制执行-join" class="headerlink" title="4.线程强制执行 - join()"></a>4.线程强制执行 - join()</h3><ul><li>join合并线程，待此线程执行完后，再执行其它线程，其它线程阻塞；</li><li>可以想象成插队</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestJoin</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程VIP来了&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TestJoin</span> <span class="variable">testJoin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestJoin</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(testJoin);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">200</span>)&#123;</span><br><span class="line">                thread.start();</span><br><span class="line">                thread.join(); <span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;main&quot;</span>+i);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-观测线程状态"><a href="#5-观测线程状态" class="headerlink" title="5.观测线程状态"></a>5.观测线程状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class TestState &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Thread thread = new Thread(()-&gt;&#123;</span><br><span class="line">            for (int i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(1000);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(&quot;///&quot;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        //观察状态</span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);    //NEW</span><br><span class="line"></span><br><span class="line">        //观察后启动</span><br><span class="line">        thread.start();   //启动线程</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println();   //Run</span><br><span class="line"></span><br><span class="line">        while(state != Thread.State.TERMINATED)&#123;  //只要线程不停止，就一直输出状态</span><br><span class="line">            Thread.sleep(100);</span><br><span class="line">            state = thread.getState();    //更新线程状态</span><br><span class="line">            System.out.println(state);   //输出状态</span><br><span class="line">            </span><br><span class="line">            //thread.start();   报错，因为已经死亡的线程不能再启动</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-线程的优先级"><a href="#6-线程的优先级" class="headerlink" title="6.线程的优先级"></a>6.线程的优先级</h3><ul><li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级来决定应该调度哪个线程来执行。</li><li>线程的优先级用数字表示，范围从1~10.<ul><li>Thread.MIN_PRIORITY &#x3D; 1;</li><li>Thread.MAX_PRIORITY &#x3D; 10;</li><li>Thread.NORM_PRIORITY &#x3D; 5;</li></ul></li><li>使用一下方法改变或获取优先级<ul><li>getPriority.setPriority(int xxx)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPriority</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//主线程默认优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line"></span><br><span class="line">        <span class="type">MyPriority</span> <span class="variable">myPriority</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyPriority</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myPriority);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先设置优先级，再启动</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t3.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        t4.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t4.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        t5.setPriority(-1);   //Exception in thread &quot;main&quot; java.lang.IllegalArgumentException</span></span><br><span class="line"><span class="comment">//        t5.start();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        t6.setPriority(11);   //Exception in thread &quot;main&quot; java.lang.IllegalArgumentException</span></span><br><span class="line"><span class="comment">//        t6.start();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPriority</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;--&gt;&quot;</span>+Thread.currentThread().getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了。这都看CPU的调度。</p><h3 id="7-守护线程"><a href="#7-守护线程" class="headerlink" title="7.守护线程"></a>7.守护线程</h3><ul><li>线程分为<strong>用户线程</strong>和<strong>守护线程</strong></li><li>虚拟机必须确保用户线程执行完毕 （如，main）</li><li>虚拟机不用等待守护线程执行完毕 （如，后台记录操作日志，监控内存，垃圾回收……）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上帝守护你</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDaemon</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">God</span> <span class="variable">god</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">God</span>();</span><br><span class="line">        <span class="type">You</span> <span class="variable">you</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">You</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(god);</span><br><span class="line">        thread.setDaemon(<span class="literal">true</span>);   <span class="comment">//默认false表示是用户线程，正常的线程都是用户线程</span></span><br><span class="line"></span><br><span class="line">        thread.start();  <span class="comment">//上帝守护线程启动</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(you).start();   <span class="comment">//你 用户线程启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">God</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;上帝保佑你&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">You</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你一生都开心的活着&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=====GoodBye World!======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-线程同步机制"><a href="#8-线程同步机制" class="headerlink" title="8.线程同步机制"></a>8.线程同步机制</h3><p>并发：<strong>同一个对象</strong>被<strong>多个线程</strong>同时操作 （如：上万人同时抢票）</p><blockquote><p>处理多线程问题时，多线程访问同一个对象(并发)，并且某些线程还想修改这个对象。这时则需要线程同步。</p><p><strong>线程同步</strong>其实是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面的线程使用完毕，下一个线程再使用。</p></blockquote><blockquote><p>线程同步的形成条件：队列+锁</p></blockquote><h4 id="同步方法和同步方法块"><a href="#同步方法和同步方法块" class="headerlink" title="同步方法和同步方法块"></a>同步方法和同步方法块</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">◆由于我们可以通过private关键字来保证数据对象只能被方法访问,所以我们只需要针对方法提出一套机制,这套机制就是synchronized关键字,它包括两种用法:synchronized方法和synchronized块</span><br><span class="line"></span><br><span class="line"> 同步方法: public synchronized void method(int args) &#125;</span><br><span class="line"></span><br><span class="line">◆synchronized方法控制对“对象”的访问,每个对象对应一 把锁,每个synchronized方法都必须获得调用该方法的对象的锁才能执行,否则线程会阻塞，方法一旦执行,就独占该锁,直到该方法返回才释放锁,后面被阻塞的线程才能获得这个锁,继续执行。</span><br><span class="line">缺陷:若将一个大的方法申明为synchronized将会影响效率</span><br><span class="line"></span><br><span class="line">方法里需要修改的内容才需要锁，否则浪费资源</span><br><span class="line"></span><br><span class="line">◆同步块: synchronized (Obj)&#123;&#125;</span><br><span class="line">◆Obj称之为同步监视器</span><br><span class="line">◆Obj可以是任何对象,但是推荐使用共享资源作为同步监视器</span><br><span class="line">◆同步方法中无需指定同步监视器,因为同步方法的同步监视器就是this , 就是这个对象本身,或者是class [反射中讲解]</span><br><span class="line">◆同步监视器的执行过程</span><br><span class="line">1.第一个线程访问,锁定同步监视器,执行其中代码.</span><br><span class="line">2.第二个线程访问,发现同步监视器被锁定,无法访问.</span><br><span class="line">3.第一个线程访问完毕,解锁同步监视器</span><br><span class="line">4.第二个线程访问， 发现同步监视器没有锁,然后锁定并访问</span><br></pre></td></tr></table></figure><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><blockquote><p>多个线程各自占有一-些共享资源,并且互相等待其他线程占有的资源才能运行,而导致两个或者多个线程都在等待对方释放资源,都停止执行的情形. 某一个同步块同时拥有“两个以上对象的锁”时,就可能会发生“死锁”的问题.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//死锁：多个线程互相抱着对方需要的资源</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Makeup</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Makeup</span>(<span class="number">0</span>,<span class="string">&quot;小黑&quot;</span>);</span><br><span class="line">        <span class="type">Makeup</span> <span class="variable">m2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Makeup</span>(<span class="number">1</span>,<span class="string">&quot;小白&quot;</span>);</span><br><span class="line"></span><br><span class="line">        m1.start();</span><br><span class="line">        m2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lipstick</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mirror</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//化妆</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Makeup</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Lipstick</span> <span class="variable">lipstick</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lipstick</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Mirror</span> <span class="variable">mirror</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Mirror</span>();</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> choice;   <span class="comment">//选择</span></span><br><span class="line">    String name;   <span class="comment">//使用化妆品的人</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Makeup</span><span class="params">(<span class="type">int</span> choice, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.choice = choice;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化妆，互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span>(choice ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;  <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (mirror)&#123;  <span class="comment">//一秒钟后想获得镜子的锁</span></span><br><span class="line">                    System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;  <span class="comment">//获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (lipstick) &#123;  <span class="comment">//两秒钟后想获得口红的锁</span></span><br><span class="line">                    System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决办法：把同步代码块拿出来，不两个人同时抱一把锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span>(choice ==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;  <span class="comment">//获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//从同步代码块拿出来</span></span><br><span class="line">               <span class="keyword">synchronized</span> (mirror)&#123;  <span class="comment">//一秒钟后想获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;  <span class="comment">//获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;获得镜子的锁&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//从同步代码块拿出来</span></span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick) &#123;  <span class="comment">//两秒钟后想获得口红的锁</span></span><br><span class="line">                System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;获得口红的锁&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><h5 id="2-死锁避免方法"><a href="#2-死锁避免方法" class="headerlink" title="2.死锁避免方法"></a><strong>2.死锁避免方法</strong></h5><ul><li>产生死锁的四个必要条件：<ul><li>互斥条件：一个资源每次只能被一个进程使用。</li><li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li><li>不剥夺条件：进程已获得的资源，在未使用完之前不能强行剥夺。</li><li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li></ul></li></ul><p>只要破坏其中一个。就可以避免死锁。</p><h3 id="LOCK"><a href="#LOCK" class="headerlink" title="LOCK"></a>LOCK</h3><blockquote><p>◆从JDK 5.0开始，Java提供了更强大的线程同步机制_——过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当;<br>◆java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象<br>◆ReentrantLock类实现了Lock ，它拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock,可以显式加锁、释放锁。</p></blockquote><h3 id="线程协作-生产者消费者模式"><a href="#线程协作-生产者消费者模式" class="headerlink" title="线程协作 - 生产者消费者模式"></a>线程协作 - 生产者消费者模式</h3><h5 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h5><h6 id="（1）应用场景-生产者和消费者问题"><a href="#（1）应用场景-生产者和消费者问题" class="headerlink" title="（1）应用场景:生产者和消费者问题"></a><strong>（1）应用场景</strong>:生产者和消费者问题</h6><p>◆假设仓库中只能存放- -件产品,生产者将生产出来的产品放入仓库,消费者将仓库中产品取走消费.<br>◆如果仓库中没有产品,则生产者将产品放入仓库,否则停止生产并等待,直到仓库中的产品被消费者取走为止.<br>◆如果仓库中放有产品,则消费者可以将产品取走消费,否则停止消费并等待，直到仓库中再次放入产品为止.</p><h6 id="（2）分析："><a href="#（2）分析：" class="headerlink" title="（2）分析："></a><strong>（2）分析</strong>：</h6><p>这是一个线程同步问题,生产者和消费者共享同- -个资源,并且生产者和消费者之间相互依赖,互为条件.<br>◆对于生产者,没有生产产品之前,要通知消费者等待.而生产了产品之后又需要马上通知消费者消费<br>◆对于消费者,在消费之后,要通知生产者已经结束消费,需要生产新的产品以供消费.<br>◆在生产者消费者问题中,仅有synchronized是不够的<br>◆synchronized可阻止并发更新同一个共享资源，实现了同步<br>◆synchronized不能用来实现不同线程之间的消息传递(通信)</p><h6 id="3-解决方式"><a href="#3-解决方式" class="headerlink" title="(3)解决方式"></a>(3)解决方式</h6><p>并发协作模型“生产者&#x2F;消费者模式”–&gt;</p><h6 id="a-管程法"><a href="#a-管程法" class="headerlink" title="a.管程法"></a><strong>a.管程法</strong></h6><p>◆生产者:负责生产数据的模块(可能是方法,对象,线程,进程);<br>◆消费者:负责处理数据的模块(可能是方法,对象,线程,进程);<br>◆缓冲区:消费者不能直接使用生产者的数据,他们之间有个“缓冲区“<br>生产者将生产好的数据放入缓冲区,消费者从缓冲区拿出数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Productor</span> <span class="keyword">extends</span>  <span class="title class_">Thread</span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Productor</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            container.push(<span class="keyword">new</span> <span class="title class_">Chicken</span>(i));</span><br><span class="line">            System.out.println(<span class="string">&quot;生产了第&quot;</span>+i+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(SynContainer container)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消费了----第&quot;</span>+container.pop().id+<span class="string">&quot;只鸡&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chicken</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;  <span class="comment">//产品编号</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chicken</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SynContainer</span>&#123;</span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Chicken[] chickens = <span class="keyword">new</span> <span class="title class_">Chicken</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Chicken chicken)</span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span>(count == chickens.length)&#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有满，我们就需要丢入产品</span></span><br><span class="line">        chickens[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知消费者消费了</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//判断能否消费</span></span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//通等待生产者生产</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果可以消费。就取出产品</span></span><br><span class="line">        count--;</span><br><span class="line">       <span class="type">Chicken</span> <span class="variable">chicken</span> <span class="operator">=</span> chickens[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以通知生产者消费了</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> chicken;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(代码不是很严谨，存在先消费后生产的问题)</p><h6 id="b-信号灯法"><a href="#b-信号灯法" class="headerlink" title="b.信号灯法"></a>b.<strong>信号灯法</strong></h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生产者--演员</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Player</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;快乐大本营&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.tv.play(<span class="string">&quot;天天向上&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者--观众</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Watcher</span><span class="params">(TV tv)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//产品--节目</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TV</span>&#123;</span><br><span class="line">    <span class="comment">//演员表演，观众等待  T</span></span><br><span class="line">    <span class="comment">//观众观看，演员等待  F</span></span><br><span class="line">    String voice;   <span class="comment">//表演节目</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String voice)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;演员表演了：&quot;</span>+voice);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();   <span class="comment">//通知唤醒</span></span><br><span class="line">        <span class="built_in">this</span>.voice = voice;</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//观看</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">watch</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;观看了：&quot;</span>+voice);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="built_in">this</span>.notifyAll();</span><br><span class="line">        <span class="built_in">this</span>.flag = !<span class="built_in">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><blockquote><p>使用线程池<br>◆背景:经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。<br>◆思路:提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。<br>可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。<br>◆好处:<br>提高响应速度(减少了创建新线程的时间)<br>降低资源消耗(重复利用线程池中线程，不需要每次都创建)<br>便于线程管理…<br>corePoolSize: 核心池的大小<br>maximumPoolSize:最大线程数<br>keepAliveTime: 线程没有任务时最多保持多长时间后会终止</p><p>◆JDK 5.0起提供了线程池相关API: ExecutorService 和Executors<br>◆ExecutorService: 真正的线程池接口。常见子类ThreadPoolExecutor<br>void execute(Runnable command) :执行任务&#x2F;命令,没有返回值，一般用来执Runnable<br>Future submit(Callable task):执行任务,有返回值，一般用来执行Callable<br>void shutdown() :关闭连接池<br>◆Executors: 工具类、线程池的工厂类，用于创建并返回不同类型的线程池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建服务，创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);  <span class="comment">//参数为线程池大小</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        service.execute(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HBuilder异常</title>
      <link href="/2020/10/09/HBuilder%20X%E5%BC%82%E5%B8%B8/"/>
      <url>/2020/10/09/HBuilder%20X%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="HBuilder-X出现404-Page-Not-Found"><a href="#HBuilder-X出现404-Page-Not-Found" class="headerlink" title="HBuilder X出现404 Page Not Found"></a>HBuilder X出现404 Page Not Found</h2><p><img src="https://s1.ax1x.com/2020/10/09/0DiCes.png"></p><h4 id="分析原因："><a href="#分析原因：" class="headerlink" title="分析原因："></a>分析原因：</h4><p>主要问题就是打开浏览器跳转时出现异常，显示404包括内置浏览器都是如此！</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><p>1.找到你安装HBuilder X的文件夹\plugins\nodeserver</p><p>2.将里面的server.js更改成其它名字（这里不直接删除是为了防止以后有用，保险的做法）</p><p>3.新建server.js文件并且将下面的代码复制粘贴过去即可</p><p>4.保存让后重启HBuilder X就可以完美解决（这里可能需要等待一会，我的好像不是立马起效）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args = process.<span class="property">argv</span>.<span class="title function_">splice</span>(<span class="number">2</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">var</span> argsjson =<span class="title class_">JSON</span>.<span class="title function_">parse</span>(args); </span><br><span class="line"><span class="keyword">var</span> projects = argsjson.<span class="property">projects</span>;</span><br><span class="line"><span class="keyword">var</span> port = argsjson.<span class="property">port</span>;</span><br><span class="line"></span><br><span class="line">projects.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">value,index,array</span>) &#123;</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>+<span class="built_in">encodeURI</span>(value.<span class="property">name</span>),express.<span class="title function_">static</span>(value.<span class="property">path</span>+<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;*&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">sendFile</span>( __dirname + <span class="string">&quot;/&quot;</span> + <span class="string">&quot;404.html&quot;</span> );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(port, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server start at &#x27;</span>+port);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马就业班01总结</title>
      <link href="/2020/09/28/%E9%BB%91%E9%A9%AC%E5%B0%B1%E4%B8%9A%E7%8F%AD01%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/28/%E9%BB%91%E9%A9%AC%E5%B0%B1%E4%B8%9A%E7%8F%AD01%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>按照老师推荐的系统学习一遍，又是前端三剑客之一的html这次没有系统的做笔记，以为基本都会，现在来用纯html写一个个人简历，来总结这一天的收获！</p><h2 id="前言：-1"><a href="#前言：-1" class="headerlink" title="前言："></a>前言：</h2><p>按照老师推荐的系统学习一遍，又是前端三剑客之一的html这次没有系统的做笔记，以为基本都会，现在来用纯html写一个个人简历，来总结这一天的收获！</p><p>先来看看效果图吧：</p><p><img src="https://img-blog.csdnimg.cn/20200928154926821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk4MDA3Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;menu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: # grey;height:1000px;width:1080px;float:left;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">5</span> <span class="attr">bordercolor</span>=<span class="string">black</span> <span class="attr">cellspacing</span>=<span class="string">0</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">120</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">960</span> <span class="attr">colspan</span>=<span class="string">10</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">7</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">https://huangwan.run</span> / <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">                                黄皖Demo</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">60</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            姓名</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        黄皖</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            性别</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        男</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">180</span> <span class="attr">rowspan</span>=<span class="string">4</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">0</span> <span class="attr">src</span>=<span class="string">https://s1.ax1x.com/2020/06/13/tvzBWQ.jpg</span> <span class="attr">alt</span>=<span class="string">&quot;Eternally&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">height</span>=<span class="string">&quot;240&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">60</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            出生年月</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        9999</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            民族</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        汉</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">60</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            学历</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        本科</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            专业</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        计算机</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">60</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            籍贯</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        中国</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            联系电话</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        1314520</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">60</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            毕业学校</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">8</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        五道口</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">60</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            住址</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">8</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        地球</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">60</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            邮箱</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">8</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">54609226@qq.com</span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">150</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            社会实践</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">840</span> <span class="attr">colspan</span>=<span class="string">8</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">i</span>&gt;</span></span><br><span class="line">                                参加过简爱基金的支教活动</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">u</span>&gt;</span></span><br><span class="line">                                参加过马克思主义学院 的宣传活动</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">u</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">sup</span>&gt;</span></span><br><span class="line">                                参加过在爱中行走活动。</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">sub</span>&gt;</span></span><br><span class="line">                                等等......</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">180</span> <span class="attr">bgcolor</span>=<span class="string">#B0C4DE</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">120</span> <span class="attr">colspan</span>=<span class="string">2</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">微软雅黑</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span></span><br><span class="line">                            个人简介</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">840</span> <span class="attr">colspan</span>=<span class="string">8</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">华文行楷</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                                爱音乐保密</span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                                爱运动保密</span><br><span class="line"></span><br><span class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                                爱生活保密</span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">hr</span> <span class="attr">noshade</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">align</span>=<span class="string">center</span> <span class="attr">width</span>=<span class="string">100%</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>代码很简单就是用到了表格原理，对于这些也就是要经常写，不然很容易忘记了，详细的笔记也准备发出来，先来总结一下吧！</p>]]></content>
      
      
      <categories>
          
          <category> 黑马就业班 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat</title>
      <link href="/2020/08/08/Tomcat/"/>
      <url>/2020/08/08/Tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaWeb-的概念"><a href="#JavaWeb-的概念" class="headerlink" title="JavaWeb 的概念"></a><strong>JavaWeb</strong> <strong>的概念</strong></h2><h3 id="a-什么是JavaWeb"><a href="#a-什么是JavaWeb" class="headerlink" title="a)什么是JavaWeb"></a>a)什么是JavaWeb</h3><p>JavaWeb 是指，所有通过 Java 语言编写可以通过浏览器访问的程序的总称，叫 JavaWeb。 </p><p>JavaWeb 是基于请求和响应来开发的。 </p><h3 id="b-什么是请求"><a href="#b-什么是请求" class="headerlink" title="b)什么是请求"></a>b)什么是请求</h3><p>请求是指客户端给服务器发送数据，叫请求 Request。 </p><h3 id="c-什么是响应"><a href="#c-什么是响应" class="headerlink" title="c)什么是响应"></a>c)什么是响应</h3><p>响应是指服务器给客户端回传数据，叫响应 Response。 </p><h3 id="d-请求和响应的关系"><a href="#d-请求和响应的关系" class="headerlink" title="d)请求和响应的关系"></a>d)请求和响应的关系</h3><p>请求和响应是成对出现的，有请求就有响应。</p><h2 id="Web-资源的分类"><a href="#Web-资源的分类" class="headerlink" title="Web 资源的分类"></a><strong>Web</strong> <strong>资源的分类</strong></h2><p>web 资源按实现的技术和呈现的效果的不同，又分为静态资源和动态资源两种。 </p><p>静态资源： html、css、js、txt、mp4 视频 , jpg 图片 </p><p>动态资源： jsp 页面、Servlet 程序 </p><h2 id="常用的-Web-服务器"><a href="#常用的-Web-服务器" class="headerlink" title="常用的 Web 服务器"></a>常用的 <strong>Web</strong> <strong>服务器</strong></h2><p><strong>Tomcat：</strong>由 Apache 组织提供的一种 Web 服务器，提供对 jsp 和 Servlet 的支持。它是一种轻量级的 javaWeb 容器（服务 </p><p>器），也是当前应用最广的 JavaWeb 服务器（免费）。 </p><p><strong>Jboss：</strong>是一个遵从 JavaEE 规范的、开放源代码的、纯 Java 的 EJB 服务器，它支持所有的 JavaEE 规范（免费）。 </p><p><strong>GlassFish：</strong> 由 Oracle 公司开发的一款 JavaWeb 服务器，是一款强健的商业服务器，达到产品级质量（应用很少）。 </p><p><strong>Resin：</strong>是 CAUCHO 公司的产品，是一个非常流行的服务器，对 servlet 和 JSP 提供了良好的支持， </p><p>性能也比较优良，resin 自身采用 JAVA 语言开发（收费，应用比较多）。 </p><p><strong>WebLogic：</strong>是 Oracle 公司的产品，是目前应用最广泛的 Web 服务器，支持 JavaEE 规范， </p><p>而且不断的完善以适应新的开发要求，适合大型项目（收费，用的不多，适合大公司）。</p><h2 id="Tomcat-的使用"><a href="#Tomcat-的使用" class="headerlink" title="Tomcat 的使用"></a><strong>Tomcat</strong> <strong>的使用</strong></h2><p><strong>目录介绍</strong> </p><p>bin             专门用来存放 Tomcat 服务器的可执行程序 </p><p>conf           专门用来存放 Tocmat 服务器的配置文件 </p><p>lib              专门用来存放 Tomcat 服务器的 jar 包 </p><p>logs           专门用来存放 Tomcat 服务器运行时输出的日记信息 </p><p>temp         专门用来存放 Tomcdat 运行时产生的临时数据 </p><p>webapps  专门用来存放部署的 Web 工程。 </p><p>work         是 Tomcat 工作时的目录，用来存放 Tomcat 运行时 jsp 翻译为 Servlet 的源码，和 Session 钝化的目录。</p><h3 id="如何启动-Tomcat-服务器"><a href="#如何启动-Tomcat-服务器" class="headerlink" title="如何启动 Tomcat 服务器"></a>如何启动 <strong>Tomcat</strong> <strong>服务器</strong></h3><p>找到 Tomcat 目录下的 bin 目录下的 startup.bat 文件，双击，就可以启动 Tomcat 服务器。</p><h3 id="Tomcat-的停止"><a href="#Tomcat-的停止" class="headerlink" title="Tomcat 的停止"></a><strong>Tomcat</strong> <strong>的停止</strong></h3><p>1、点击 tomcat 服务器窗口的 x 关闭按钮 </p><p>2、把 Tomcat 服务器窗口置为当前窗口，然后按快捷键 Ctrl+C </p><p>3、找到 Tomcat 的 bin 目录下的 shutdown.bat 双击，就可以停止 Tomcat 服务器</p><h3 id="如何修改-Tomcat-的端口号"><a href="#如何修改-Tomcat-的端口号" class="headerlink" title="如何修改 Tomcat 的端口号"></a><strong>如何修改</strong> <strong>Tomcat</strong> <strong>的端口号</strong></h3><p>找到 Tomcat 目录下的 conf 目录，找到 server.xml 配置文件（第69行）。</p><h2 id="web工程部署在Tomcat"><a href="#web工程部署在Tomcat" class="headerlink" title="web工程部署在Tomcat"></a>web工程部署在<strong>Tomcat</strong></h2><h3 id="第一种部署方法："><a href="#第一种部署方法：" class="headerlink" title="第一种部署方法："></a>第一种部署方法：</h3><p>只需要把 web 工程的目录拷贝到 Tomcat 的 webapps 目录下 </p><p>即可。 </p><h4 id="如何访问-Tomcat-下的-web-工程。"><a href="#如何访问-Tomcat-下的-web-工程。" class="headerlink" title="如何访问 Tomcat 下的 web 工程。"></a><strong>如何访问</strong> <strong>Tomcat</strong> <strong>下的</strong> <strong>web</strong> <strong>工程。</strong></h4><p>只需要在浏览器中输入访问地址格式如下： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:port/工程名/目录下/文件名</span><br></pre></td></tr></table></figure><h3 id="第二种部署方法："><a href="#第二种部署方法：" class="headerlink" title="第二种部署方法："></a><strong>第二种部署方法：</strong></h3><p>找到 Tomcat 下的 conf 目录\Catalina\localhost\ 下,创建如下的配置文件：</p><p>hw.xml 配置文件内容如下（hw自定义)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Context 表示一个工程上下文 </span><br><span class="line">path 表示工程的访问路径:/abc </span><br><span class="line">docBase 表示你的工程目录在哪里 --&gt; </span><br><span class="line">&lt;Context path=&quot;/hw&quot; docBase=&quot;E:\book&quot; /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">访问这个工程的路径如下:</span><br><span class="line">                   http://ip:port/hw/ 就表示访问 E:\book 目录</span><br></pre></td></tr></table></figure><h2 id="idea运行web"><a href="#idea运行web" class="headerlink" title="idea运行web"></a>idea运行web</h2><p>本方法随着实践的增加，基本不会忘记，这里就没写上。</p>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git踩坑</title>
      <link href="/2020/08/08/git%E8%B8%A9%E5%9D%91/"/>
      <url>/2020/08/08/git%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Git-将本地代码推到-Coding-远程仓库"><a href="#Git-将本地代码推到-Coding-远程仓库" class="headerlink" title="Git 将本地代码推到 Coding 远程仓库"></a>Git 将本地代码推到 Coding 远程仓库</h2><p>1 首先创建文件夹，将要推的项目文件夹拷贝过来，进入文件夹 右键 Git Bash Here 输入以下代码 把这个目录变成git管理的仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>2 把文件添加到版本库中，使用命令 git add 文件夹名称 &#x2F;  添加到暂存区里面去，不要忘记后面的斜杠“&#x2F;”，意为添加文件夹下的所有文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add XXX/</span><br></pre></td></tr></table></figure><p>3 用命令 git commit告诉Git，把文件提交到仓库。引号内为说明文字，这一步是把暂存区内容提交到分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><p>4 关联到远程库 (首先要先创建你的远程库)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 远程库地址</span><br></pre></td></tr></table></figure><p>5 获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p>6 把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line"># 使用强制推送&#x27;-f&#x27;是因为一般新建仓库的时候会生成read me文件，导致需要先git fetch才能推送，但这个read me文件其实是不需要的，因为在生成本地项目的时候一般也会生成一个read me文件，所以选择直接强制推送过去。</span><br><span class="line">git push origin master -f</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master -f</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>最主要的就是最后一步，这里建议直接强制推送，不然总是有错误，本人也是搞了很久才出来！</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML</title>
      <link href="/2020/08/04/XML/"/>
      <url>/2020/08/04/XML/</url>
      
        <content type="html"><![CDATA[<h2 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h2><p><strong>什么是 xml？</strong></p><p>xml 是可扩展的标记性语言。</p><p><strong>xml 的作用？</strong></p><p>xml 的主要作用有： </p><p>1、用来保存数据，而且这些数据具有自我描述性 </p><p>2、它还可以做为项目或者模块的配置文件 </p><p>3、还可以做为网络传输数据的格式（现在 JSON 为主）。</p><h2 id="xml-语法"><a href="#xml-语法" class="headerlink" title="xml 语法"></a>xml 语法</h2><p>   1.文档声明。 </p><ol start="2"><li><p>元素（标签） </p></li><li><p>xml 属性 </p></li><li><p>xml 注释 </p></li><li><p>文本区域（CDATA 区）</p></li></ol><h3 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h3><p><strong>我们先创建一个简单 XML 文件，用来描述图书信息。</strong> </p><p>1.创建一个xml 文件</p><p>2.图书有id 属性 表示唯一 标识，书名，有作者，价格的信息</p><p>3.在浏览器中可以查看到文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;!-- xml声明 version是版本的意思   encoding是编码  --&gt;</span><br><span class="line">&lt;books&gt; &lt;!-- 这是xml注释 --&gt;</span><br><span class="line">    &lt;book id=&quot;SN123123413241&quot;&gt; &lt;!-- book标签描述一本图书   id属性描述 的是图书 的编号  --&gt;</span><br><span class="line">        &lt;name&gt;九阳神功&lt;/name&gt; &lt;!-- name标签描述 的是图书 的信息 --&gt;</span><br><span class="line">        &lt;author&gt;小黄&lt;/author&gt;&lt;!-- author单词是作者的意思 ，描述图书作者 --&gt;</span><br><span class="line">        &lt;price&gt;188888&lt;/price&gt;&lt;!-- price单词是价格，描述的是图书 的价格 --&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">    &lt;book id=&quot;SN12341235123&quot;&gt;&lt;!-- book标签描述一本图书   id属性描述 的是图书 的编号  --&gt;</span><br><span class="line">        &lt;name&gt;降龙十八掌&lt;/name&gt;&lt;!-- name标签描述 的是图书 的信息 --&gt;</span><br><span class="line">        &lt;author&gt;hw&lt;/author&gt;&lt;!-- author单词是作者的意思 ，描述图书作者 --&gt;</span><br><span class="line">        &lt;price&gt;99999&lt;/price&gt;&lt;!-- price单词是价格，描述的是图书 的价格 --&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">    &lt;book id=&quot;SN19874665555&quot; name=&quot;打狗棒法&quot; author=&quot;huangwan&quot; price=&quot;198989&quot;/&gt;</span><br><span class="line">&lt;/books&gt;</span><br></pre></td></tr></table></figure><h3 id="xml-注释"><a href="#xml-注释" class="headerlink" title="xml 注释"></a><strong>xml</strong> <strong>注释</strong></h3><p><strong>html 和 XML 注释 一样 : <!-- html 注释 --></strong></p><h3 id="元素（标签）"><a href="#元素（标签）" class="headerlink" title="元素（标签）"></a><strong>元素（标签）</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">html 标签： </span><br><span class="line"></span><br><span class="line">格式：&lt;标签名&gt;封装的数据&lt;/标签名&gt; </span><br><span class="line"></span><br><span class="line">单标签: &lt;标签名 /&gt; &lt;br /&gt; 换行 &lt;hr /&gt;水平线 </span><br><span class="line"></span><br><span class="line">双标签 &lt;标签名&gt;封装的数据&lt;/标签名&gt; </span><br><span class="line"></span><br><span class="line">标签名大小写不敏感 </span><br><span class="line"></span><br><span class="line">标签有属性，有基本属性和事件属性 </span><br><span class="line"></span><br><span class="line">标签要闭合（不闭合 ，html 中不报错。但我们要养成良好的书写习惯。闭合） </span><br></pre></td></tr></table></figure><p><strong>1）什么是 xml 元素</strong> </p><p><em>XML 元素</em>指的是从（且包括）开始标签直到（且包括）结束标签的部分。</p><p>元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;bookstore&gt;</span><br><span class="line">&lt;book category=&quot;CHILDREN&quot;&gt;</span><br><span class="line">  &lt;title&gt;Harry Potter&lt;/title&gt; </span><br><span class="line">  &lt;author&gt;J K. Rowling&lt;/author&gt; </span><br><span class="line">  &lt;year&gt;2005&lt;/year&gt; </span><br><span class="line">  &lt;price&gt;29.99&lt;/price&gt; </span><br><span class="line">&lt;/book&gt;</span><br><span class="line">&lt;book category=&quot;WEB&quot;&gt;</span><br><span class="line">  &lt;title&gt;Learning XML&lt;/title&gt; </span><br><span class="line">  &lt;author&gt;Erik T. Ray&lt;/author&gt; </span><br><span class="line">  &lt;year&gt;2003&lt;/year&gt; </span><br><span class="line">  &lt;price&gt;39.95&lt;/price&gt; </span><br><span class="line">&lt;/book&gt;</span><br><span class="line">&lt;/bookstore&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2）XML命名规则</strong></p><p>XML 元素必须遵循以下命名规则： </p><p>1.名称可以含字母、数字以及其他的字符</p><p>2.名称不能以数字或者标点符号开始 </p><p>3.名称不能以字符 “xml”（或者 XML、Xml）开始 （<strong>它是可以的</strong>）</p><p>4.名称不能包含空格</p><p><strong>3)xml 中的元素（标签）也 分成 单标签和双标签：</strong> </p><p><strong>单标签</strong></p><p>格式： &lt;标签名 属性&#x3D;”值” 属性&#x3D;”值” …… &#x2F;&gt; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;name&gt;降龙十八掌&lt;/name&gt;&lt;!-- name标签描述 的是图书 的信息 --&gt;</span><br></pre></td></tr></table></figure><p><strong>双标签</strong></p><p>格式：&lt; 标签名 属性&#x3D;”值” 属性&#x3D;”值” ……&gt;文本数据或子标签&lt;&#x2F;标签名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;book id=&quot;SN19874665555&quot; name=&quot;打狗棒法&quot; author=&quot;huangwan&quot; price=&quot;198989&quot;/&gt;</span><br></pre></td></tr></table></figure><h3 id="xml-属性"><a href="#xml-属性" class="headerlink" title="xml 属性"></a><strong>xml</strong> <strong>属性</strong></h3><p>xml 的标签属性和 html 的标签属性是非常类似的，<strong>属性可以提供元素的额外信息</strong> </p><p>在标签上可以书写属性： </p><p>一个标签上可以书写多个属性。<strong>每个属性的值必须使用 引号 引起来</strong>。 </p><p>的规则和标签的书写规则一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">XML 属性</span><br><span class="line">从 HTML，你会回忆起这个：&lt;img src=&quot;computer.gif&quot;&gt;。&quot;src&quot; 属性提供有关 &lt;img&gt; 元素的额外信息。</span><br><span class="line"></span><br><span class="line">在 HTML 中（以及在 XML 中），属性提供有关元素的额外信息：</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;computer.gif&quot;&gt;</span><br><span class="line">&lt;a href=&quot;demo.asp&quot;&gt; </span><br><span class="line">属性通常提供不属于数据组成部分的信息。在下面的例子中，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要：</span><br><span class="line"></span><br><span class="line">&lt;file type=&quot;gif&quot;&gt;computer.gif&lt;/file&gt;XML 属性必须加引号</span><br><span class="line">属性值必须被引号包围，不过单引号和双引号均可使用。比如一个人的性别，person 标签可以这样写：</span><br><span class="line"></span><br><span class="line">&lt;person sex=&quot;female&quot;&gt;或者这样也可以：</span><br><span class="line"></span><br><span class="line">&lt;person sex=&#x27;female&#x27;&gt;注释：如果属性值本身包含双引号，那么有必要使用单引号包围它，就像这个例子：</span><br><span class="line"></span><br><span class="line">&lt;gangster name=&#x27;George &quot;Shotgun&quot; Ziegler&#x27;&gt;或者可以使用实体引用：</span><br><span class="line"></span><br><span class="line">&lt;gangster name=&quot;George &amp;quot;Shotgun&amp;quot; Ziegler&quot;&gt;XML 元素 vs. 属性</span><br><span class="line">请看这些例子：</span><br><span class="line"></span><br><span class="line">&lt;person sex=&quot;female&quot;&gt;</span><br><span class="line">  &lt;firstname&gt;Anna&lt;/firstname&gt;</span><br><span class="line">  &lt;lastname&gt;Smith&lt;/lastname&gt;</span><br><span class="line">&lt;/person&gt; </span><br><span class="line"></span><br><span class="line">&lt;person&gt;</span><br><span class="line">  &lt;sex&gt;female&lt;/sex&gt;</span><br><span class="line">  &lt;firstname&gt;Anna&lt;/firstname&gt;</span><br><span class="line">  &lt;lastname&gt;Smith&lt;/lastname&gt;</span><br><span class="line">&lt;/person&gt; </span><br><span class="line">在第一个例子中，sex 是一个属性。在第二个例子中，sex 则是一个子元素。两个例子均可提供相同的信息。</span><br><span class="line"></span><br><span class="line">没有什么规矩可以告诉我们什么时候该使用属性，而什么时候该使用子元素。我的经验是在 HTML 中，属性用起来很便利，但是在 XML 中，您应该尽量避免使用属性。如果信息感觉起来很像数据，那么请使用子元素吧。</span><br><span class="line">我最喜欢的方式</span><br><span class="line">下面的三个 XML 文档包含完全相同的信息：</span><br><span class="line"></span><br><span class="line">第一个例子中使用了 date 属性：</span><br><span class="line"></span><br><span class="line">&lt;note date=&quot;08/08/2008&quot;&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt; </span><br><span class="line">第二个例子中使用了 date 元素：</span><br><span class="line"></span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;date&gt;08/08/2008&lt;/date&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt; </span><br><span class="line">第三个例子中使用了扩展的 date 元素（这是我的最爱）：</span><br><span class="line"></span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;date&gt;</span><br><span class="line">  &lt;day&gt;08&lt;/day&gt;</span><br><span class="line">  &lt;month&gt;08&lt;/month&gt;</span><br><span class="line">  &lt;year&gt;2008&lt;/year&gt;</span><br><span class="line">&lt;/date&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br><span class="line">避免 XML 属性？</span><br><span class="line">因使用属性而引起的一些问题：</span><br><span class="line"></span><br><span class="line">属性无法包含多个值（子元素可以） </span><br><span class="line">属性无法描述树结构（子元素可以） </span><br><span class="line">属性不易扩展（为未来的变化） </span><br><span class="line">属性难以阅读和维护 </span><br><span class="line">请尽量使用元素来描述数据。而仅仅使用属性来提供与数据无关的信息。</span><br><span class="line"></span><br><span class="line">不要做这样的蠢事（这不是 XML 应该被使用的方式）：</span><br><span class="line"></span><br><span class="line">&lt;note day=&quot;08&quot; month=&quot;08&quot; year=&quot;2008&quot;</span><br><span class="line">to=&quot;George&quot; from=&quot;John&quot; heading=&quot;Reminder&quot; </span><br><span class="line">body=&quot;Don&#x27;t forget the meeting!&quot;&gt;</span><br><span class="line">&lt;/note&gt;</span><br><span class="line">针对元数据的 XML 属性</span><br><span class="line">有时候会向元素分配 ID 引用。这些 ID 索引可用于标识 XML 元素，它起作用的方式与 HTML 中 ID 属性是一样的。这个例子向我们演示了这种情况：</span><br><span class="line"></span><br><span class="line">&lt;messages&gt;</span><br><span class="line">  &lt;note id=&quot;501&quot;&gt;</span><br><span class="line">    &lt;to&gt;George&lt;/to&gt;</span><br><span class="line">    &lt;from&gt;John&lt;/from&gt;</span><br><span class="line">    &lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">    &lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">  &lt;/note&gt;</span><br><span class="line">  &lt;note id=&quot;502&quot;&gt;</span><br><span class="line">    &lt;to&gt;John&lt;/to&gt;</span><br><span class="line">    &lt;from&gt;George&lt;/from&gt;</span><br><span class="line">    &lt;heading&gt;Re: Reminder&lt;/heading&gt;</span><br><span class="line">    &lt;body&gt;I will not&lt;/body&gt;</span><br><span class="line">  &lt;/note&gt; </span><br><span class="line">&lt;/messages&gt;</span><br><span class="line">上面的 ID 仅仅是一个标识符，用于标识不同的便签。它并不是便签数据的组成部分。</span><br><span class="line"></span><br><span class="line">在此我们极力向您传递的理念是：元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>1、所有 XML 元素都须有关闭标签</p><p>2、XML 标签对大小写敏感</p><p>3、XML 必须正确地嵌套</p><p>4、XML 文档必须有根元素</p><p>5、XML 的属性值须加引号</p><p>6、XML 中的特殊字符（如**&gt;** )</p><h3 id="文本区域（CDATA区）"><a href="#文本区域（CDATA区）" class="headerlink" title="文本区域（CDATA区）"></a>文本区域（CDATA区）</h3><p>CDATA 语法可以告诉 xml 解析器，我 CDATA 里的文本内容，只是纯文本，不需要 xml 语法解析 </p><p>CDATA 格式： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[这里可以把你输入的字符原样显示，不会解析 xml ]]&gt;</span><br><span class="line">例如：</span><br><span class="line">  &lt;![CDATA[&lt;&lt;小黄&gt;&gt; ]]&gt;</span><br></pre></td></tr></table></figure><h2 id="xml-解析技术介绍"><a href="#xml-解析技术介绍" class="headerlink" title="xml 解析技术介绍"></a><strong>xml</strong> 解析技术介绍</h2><p>xml 可扩展的标记语言。 </p><p>不管是 html 文件还是 xml 文件它们都是标记型文档，都可以使用 w3c 组织制定的 dom 技术来解析。</p><p>document 对象表示的是整个文档（可以是 html 文档，也可以是 xml 文档）</p><p><strong>早期</strong> <strong>JDK</strong> <strong>为我们提供了两种</strong> <strong>xml</strong> <strong>解析技术</strong> <strong>DOM</strong> <strong>和</strong> <strong>Sax</strong> <strong>简介（</strong>已经过时，但我们需要知道这两种技术）</p><p>dom 解析技术是 W3C 组织制定的，而所有的编程语言都对这个解析技术使用了自己语言的特点进行实现。 </p><p>Java 对 dom 技术解析标记也做了实现。 </p><p>sun 公司在 JDK5 版本对 dom 解析技术进行升级：SAX（ Simple API for XML ） </p><p>SAX 解析，它跟 W3C 制定的解析不太一样。它是以类似事件机制通过回调告诉用户当前正在解析的内容。 </p><p>它是一行一行的读取 xml 文件进行解析的。不会创建大量的 dom 对象。 </p><p>所以它在解析 xml 的时候，在内存的使用上。和性能上。都优于 Dom 解析。 </p><p>第三方的解析： </p><p>​                   jdom 在 dom 基础上进行了封装 、 </p><p>​                   <strong>dom4j</strong> 又对 jdom 进行了封装。 </p><p>​                   pull 主要用在 Android 手机开发，是在跟 sax 非常类似都是事件机制解析 xml 文件。 </p><p>​                   这个 Dom4j 它是第三方的解析技术。我们需要使用第三方给我们提供好的类库才可以解析 xml 文件。</p><h2 id="dom4j-解析技术"><a href="#dom4j-解析技术" class="headerlink" title="dom4j 解析技术"></a><strong>dom4j</strong> <strong>解析技术</strong></h2><p>由于 dom4j 它不是 sun 公司的技术，而属于第三方公司的技术，我们需要使用 dom4j 就需要到 dom4j 官网下载 dom4j 的 jar 包。</p><h3 id="dom4j-编程步骤："><a href="#dom4j-编程步骤：" class="headerlink" title="dom4j 编程步骤："></a><strong>dom4j</strong> <strong>编程步骤：</strong></h3><p>第一步： 先加载 xml 文件创建 Document 对象 </p><p>第二步：通过 Document 对象拿到根元素对象 </p><p>第三步：通过根元素.elelemts(标签名); 可以返回一个集合，这个集合里放着。所有你指定的标签名的元素对象 </p><p>第四步：找到你想要修改、删除的子元素，进行相应在的操作 </p><p>第五步，保存到硬盘上 </p><h3 id="获取-document-对象"><a href="#获取-document-对象" class="headerlink" title="获取 document 对象"></a><strong>获取</strong> <strong>document</strong> <strong>对象</strong></h3><p>创建一个 lib 目录，并添加 dom4j 的 jar 包。并添加到类路径。</p><p>需要解析的 books.xml 文件内容 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span><br><span class="line">&lt;!-- xml声明 version是版本的意思   encoding是编码  --&gt;</span><br><span class="line">&lt;books&gt; &lt;!-- 这是xml注释 --&gt;</span><br><span class="line">    &lt;book id=&quot;SN123123413241&quot;&gt; &lt;!-- book标签描述一本图书   id属性描述 的是图书 的编号  --&gt;</span><br><span class="line">        &lt;name&gt;九阳神功&lt;/name&gt; &lt;!-- name标签描述 的是图书 的信息 --&gt;</span><br><span class="line">      &lt;!--  &lt;author&gt;小黄&lt;/author&gt;--&gt;&lt;!-- author单词是作者的意思 ，描述图书作者 --&gt;</span><br><span class="line">        &lt;![CDATA[&lt;&lt;小黄&gt;&gt; ]]&gt;</span><br><span class="line">        &lt;price&gt;188888&lt;/price&gt;&lt;!-- price单词是价格，描述的是图书 的价格 --&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">    &lt;book id=&quot;SN12341235123&quot;&gt;&lt;!-- book标签描述一本图书   id属性描述 的是图书 的编号  --&gt;</span><br><span class="line">        &lt;name&gt;降龙十八掌&lt;/name&gt;&lt;!-- name标签描述 的是图书 的信息 --&gt;</span><br><span class="line">        &lt;author&gt;hw&lt;/author&gt;&lt;!-- author单词是作者的意思 ，描述图书作者 --&gt;</span><br><span class="line">        &lt;price&gt;99999&lt;/price&gt;&lt;!-- price单词是价格，描述的是图书 的价格 --&gt;</span><br><span class="line">    &lt;/book&gt;</span><br><span class="line">    &lt;!--book id=&quot;SN19874665555&quot; name=&quot;打狗棒法&quot; author=&quot;huangwan&quot; price=&quot;198989&quot;/&gt;--&gt;</span><br><span class="line">&lt;/books&gt;</span><br></pre></td></tr></table></figure><p><strong>解析获取</strong> <strong>Document</strong> <strong>对象的代码</strong> </p><p><strong>第一步，先创建</strong> <strong>SaxReader</strong> <strong>对象。这个对象，用于读取</strong> <strong>xml</strong> <strong>文件，并创建</strong> <strong>Document</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.pojo;</span><br><span class="line"></span><br><span class="line">import org.dom4j.Document;</span><br><span class="line">import org.dom4j.DocumentException;</span><br><span class="line">import org.dom4j.io.SAXReader;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class Dom4jTest &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws Exception &#123;</span><br><span class="line">        // 创建一个SaxReader输入流，去读取 xml配置文件，生成Document对象</span><br><span class="line">        SAXReader saxReader = new SAXReader();</span><br><span class="line"></span><br><span class="line">        Document document = saxReader.read(&quot;src/books.xml&quot;);</span><br><span class="line"></span><br><span class="line">        System.out.println(document);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="遍历-标签-获取所有标签中的内容"><a href="#遍历-标签-获取所有标签中的内容" class="headerlink" title="遍历 标签 获取所有标签中的内容"></a><strong>遍历 标签 获取所有标签中的内容</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package com.atguigu.pojo;</span><br><span class="line"></span><br><span class="line">import org.dom4j.Document;</span><br><span class="line">import org.dom4j.Element;</span><br><span class="line">import org.dom4j.io.SAXReader;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.math.BigDecimal;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Dom4jTest2 &#123;</span><br><span class="line">    @Test</span><br><span class="line">    public void test1() throws Exception &#123;</span><br><span class="line">        //1. 读取books.xml文件</span><br><span class="line">        SAXReader saxReader = new SAXReader();</span><br><span class="line">        //在Junit测试中，相对路径是从模块名开始算</span><br><span class="line">        Document document = saxReader.read(&quot;src/books.xml&quot;);</span><br><span class="line">        //2.通过document对象获取对象根元素</span><br><span class="line">        Element rootElement = document.getRootElement();</span><br><span class="line">        //System.out.println(rootElement);</span><br><span class="line">        //2.通过document对象获取book标签对象</span><br><span class="line">        //element()和lements()</span><br><span class="line">        List&lt;Element&gt; books = rootElement.elements(&quot;book&quot;);</span><br><span class="line">        //遍历，处理每个book标签转换成book类</span><br><span class="line">        for (Element book : books) &#123;</span><br><span class="line">            //asXML()把标签对象转换为标签字符串</span><br><span class="line">            // System.out.println(book.asXML());</span><br><span class="line">            Element nameElement = book.element(&quot;name&quot;);  //单个name</span><br><span class="line">            // System.out.println(nameElement.asXML());</span><br><span class="line">            String nameTest = nameElement.getText();</span><br><span class="line">            //getText()可以获取标签中文本的内容</span><br><span class="line">            //  System.out.println(nameTest);</span><br><span class="line">            //直接获取标签名的文本内容</span><br><span class="line">            String priceTest = book.elementText(&quot;price&quot;);</span><br><span class="line">           //   System.out.println(priceTest);</span><br><span class="line">            String authorTest = book.elementText(&quot;author&quot;);</span><br><span class="line">            String idValue = book.attributeValue(&quot;id&quot;);</span><br><span class="line">            BigDecimal bigDecimal = new BigDecimal(priceTest);</span><br><span class="line">            System.out.println(new Book(idValue, nameTest, new BigDecimal(priceTest), authorTest));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*输出结果：</span><br><span class="line">        Book&#123;sn=&#x27;SN123123413241&#x27;, name=&#x27;九阳神功&#x27;, price=188888, author=&#x27;小黄&#x27;&#125;</span><br><span class="line">        Book&#123;sn=&#x27;SN12341235123&#x27;, name=&#x27;降龙十八掌&#x27;, price=99999, author=&#x27;hw&#x27;&#125;*/</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书城一</title>
      <link href="/2020/08/02/%E4%B9%A6%E5%9F%8E%E4%B8%80/"/>
      <url>/2020/08/02/%E4%B9%A6%E5%9F%8E%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="书城项目第一阶段，表单验证"><a href="#书城项目第一阶段，表单验证" class="headerlink" title="书城项目第一阶段，表单验证"></a><strong>书城项目第一阶段，表单验证</strong></h2><p>验证用户名：必须由字母，数字下划线组成，并且长度为 5 到 12 位 </p><p>验证密码：必须由字母，数字下划线组成，并且长度为 5 到 12 位 </p><p>验证确认密码：和密码相同 </p><p>邮箱验证：<a href="mailto:&#x78;&#120;&#x78;&#120;&#x78;&#x40;&#x78;&#x78;&#x78;&#x2e;&#x63;&#x6f;&#x6d;">&#x78;&#120;&#x78;&#120;&#x78;&#x40;&#x78;&#x78;&#x78;&#x2e;&#x63;&#x6f;&#x6d;</a> </p><p>验证码：现在只需要验证用户已输入。因为还没讲到服务器。验证码生成。</p><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../../static/script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//页面加载完成之后</span><br><span class="line">$(function () &#123;</span><br><span class="line">//给注册绑定单击事件</span><br><span class="line">$(&quot;#sub_btn&quot;).click(function () &#123;</span><br><span class="line">//验证用户名：必须由字母，数字下划线组成，并且长度为 5 到 12 位</span><br><span class="line">//1.获取用户名输入框里面的内容</span><br><span class="line">var usernameText = $(&quot;#username&quot;).val();</span><br><span class="line">//2.创建正则表达式对象</span><br><span class="line">var usernamePatt=/^\w&#123;5,12&#125;$/;</span><br><span class="line">//3.使用test方法验证</span><br><span class="line">if (!usernamePatt.test(usernameText))&#123;</span><br><span class="line">//4.提示用户结果</span><br><span class="line">$(&quot;span.errorMsg&quot;).text(&quot;用户名不合法&quot;);</span><br><span class="line">return false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//验证密码：必须由字母，数字下划线组成，并且长度为 5 到 12 位</span><br><span class="line">//1.获取用户名输入框里面的内容</span><br><span class="line">var passwordText = $(&quot;#password&quot;).val();</span><br><span class="line">//2.创建正则表达式对象</span><br><span class="line">var passwordPatt=/^\w&#123;5,12&#125;$/;</span><br><span class="line">//3.使用test方法验证</span><br><span class="line">if (!passwordPatt.test(passwordText))&#123;</span><br><span class="line">//4.提示用户结果</span><br><span class="line">$(&quot;span.errorMsg&quot;).text(&quot;密码不合法&quot;);</span><br><span class="line">return false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//验证确认密码：和密码相同</span><br><span class="line">//1.获取确认密码内容</span><br><span class="line">var repwdText = $(&quot;#repwd&quot;).val();</span><br><span class="line">//2.和密码比较</span><br><span class="line">if (repwdText!=passwordText)&#123;</span><br><span class="line">//4.提示用户结果</span><br><span class="line">$(&quot;span.errorMsg&quot;).text(&quot;确认密码和密码不一致&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">//邮箱验证：xxxxx@xxx.com 验证码：</span><br><span class="line">//1.获取邮箱里面的内容</span><br><span class="line">var emailText = $(&quot;#email&quot;).val();</span><br><span class="line">//2.创建正则表达式</span><br><span class="line">var emailPatt=/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.&#123;1,2&#125;[a-z]+)+$/;</span><br><span class="line">//3.使用Text方法</span><br><span class="line">if (!emailPatt.test(emailText))&#123;</span><br><span class="line">//4.提示用户结果</span><br><span class="line">$(&quot;span.errorMsg&quot;).text(&quot;邮箱格式不合法&quot;);</span><br><span class="line">return false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">//现在只需要验证用户已输入。因为还没讲到服务器。验证码生成</span><br><span class="line">var codeText = $(&quot;#code&quot;).val();</span><br><span class="line">//去掉验证码中前后空格</span><br><span class="line">alert(&quot;去空格前[&quot;+codeText+&quot;]&quot;);</span><br><span class="line">var codeText = $.trim(codeText);</span><br><span class="line">alert(&quot;去空格后[&quot;+codeText+&quot;]&quot;);</span><br><span class="line">if (codeText==null||codeText==&quot;&quot;)&#123;</span><br><span class="line">//4.提示用户结果</span><br><span class="line">$(&quot;span.errorMsg&quot;).text(&quot;请输入正确的验证码&quot;);</span><br><span class="line">return false;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(&quot;span.errorMsg&quot;).text(&quot;&quot;);//合法</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>第一步引入jQuery内库</p><p>第二步获取输入内容</p><p>第三步创建正则表达式对象</p><p>第四步使用test方法验证</p><p>第五步提示用户结果</p>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery-2</title>
      <link href="/2020/07/30/jQuery-2/"/>
      <url>/2020/07/30/jQuery-2/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery-的属性操作"><a href="#jQuery-的属性操作" class="headerlink" title="jQuery 的属性操作"></a>jQuery 的属性操作</h2><p>html()                   它可以设置和获取起始标签和结束标签中的内容。                 跟 dom 属性 innerHTML 一样。 </p><p>text()                     它可以设置和获取起始标签和结束标签中的文本。                 跟 dom 属性 innerText 一样。 </p><p>val()                       它可以设置和获取表单项的 value 属性值。                              跟 dom 属性 value 一样 </p><p><strong>val 方法同时设置多个表单项的选中状态：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh_CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">        $(function () &#123;</span><br><span class="line">/*</span><br><span class="line">            // 批量操作单选</span><br><span class="line">            $(&quot;:radio&quot;).val([&quot;radio2&quot;]);</span><br><span class="line">            // 批量操作筛选框的选中状态</span><br><span class="line">            $(&quot;:checkbox&quot;).val([&quot;checkbox3&quot;,&quot;checkbox2&quot;]);</span><br><span class="line">            // 批量操作多选的下拉框选中状态</span><br><span class="line">            $(&quot;#multiple&quot;).val([&quot;mul2&quot;,&quot;mul3&quot;,&quot;mul4&quot;]);</span><br><span class="line">            // 操作单选的下拉框选中状态</span><br><span class="line">            $(&quot;#single&quot;).val([&quot;sin2&quot;]);</span><br><span class="line">*/</span><br><span class="line">            $(&quot;#multiple,#single,:radio,:checkbox&quot;).val([&quot;radio2&quot;,&quot;checkbox1&quot;,&quot;checkbox3&quot;,&quot;mul1&quot;,&quot;mul4&quot;,&quot;sin3&quot;]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    单选：</span><br><span class="line">    &lt;input name=&quot;radio&quot; type=&quot;radio&quot; value=&quot;radio1&quot; /&gt;radio1</span><br><span class="line">    &lt;input name=&quot;radio&quot; type=&quot;radio&quot; value=&quot;radio2&quot; /&gt;radio2</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    多选：</span><br><span class="line">    &lt;input name=&quot;checkbox&quot; type=&quot;checkbox&quot; value=&quot;checkbox1&quot; /&gt;checkbox1</span><br><span class="line">    &lt;input name=&quot;checkbox&quot; type=&quot;checkbox&quot; value=&quot;checkbox2&quot; /&gt;checkbox2</span><br><span class="line">    &lt;input name=&quot;checkbox&quot; type=&quot;checkbox&quot; value=&quot;checkbox3&quot; /&gt;checkbox3</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    下拉多选 ：</span><br><span class="line">    &lt;select id=&quot;multiple&quot; multiple=&quot;multiple&quot; size=&quot;4&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;mul1&quot;&gt;mul1&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;mul2&quot;&gt;mul2&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;mul3&quot;&gt;mul3&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;mul4&quot;&gt;mul4&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    下拉单选 ：</span><br><span class="line">    &lt;select id=&quot;single&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;sin1&quot;&gt;sin1&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;sin2&quot;&gt;sin2&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;sin3&quot;&gt;sin3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>细节：</strong>注意 单选、多选、、下拉多选、下拉单选设置单选还是多选以及是否是下拉细节。</p><p>对于jQuery 的属性操作，例如获取文本值以及设置最开始的值都跟dom大同小异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh_CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">        $(function () &#123;</span><br><span class="line">            // 不传参数，是获取，传递参数是设置</span><br><span class="line">            // alert( $(&quot;div&quot;).html() );// 获取</span><br><span class="line">            // $(&quot;div&quot;).html(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;);// 设置</span><br><span class="line"></span><br><span class="line">            // 不传参数，是获取，传递参数是设置</span><br><span class="line">            // alert( $(&quot;div&quot;).text() ); // 获取</span><br><span class="line">            // $(&quot;div&quot;).text(&quot;&lt;h1&gt;我是div中的标题 1&lt;/h1&gt;&quot;); // 设置</span><br><span class="line"></span><br><span class="line">            // 不传参数，是获取，传递参数是设置</span><br><span class="line">            $(&quot;button&quot;).click(function () &#123;</span><br><span class="line">                alert($(&quot;#username&quot;).val());//获取</span><br><span class="line">                $(&quot;#username&quot;).val(&quot;超级程序猿&quot;);// 设置</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;我是div标签 &lt;span&gt;我是div中的span&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; /&gt;</span><br><span class="line">    &lt;button&gt;操作输入框&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery练习一"><a href="#jQuery练习一" class="headerlink" title="jQuery练习一"></a>jQuery练习一</h2><p><strong>全选，全不选，反选</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line">// 给全选绑定单击事件</span><br><span class="line">$(&quot;#checkedAllBtn&quot;).click(function () &#123;</span><br><span class="line">$(&quot;:checkbox&quot;).prop(&quot;checked&quot;,true);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 给全不选绑定单击事件</span><br><span class="line">$(&quot;#checkedNoBtn&quot;).click(function () &#123;</span><br><span class="line">$(&quot;:checkbox&quot;).prop(&quot;checked&quot;,false);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 反选单击事件</span><br><span class="line">$(&quot;#checkedRevBtn&quot;).click(function () &#123;</span><br><span class="line">// 查询全部的球类的复选框</span><br><span class="line">$(&quot;:checkbox[name=&#x27;items&#x27;]&quot;).each(function () &#123;</span><br><span class="line">// 在each遍历的function函数中，有一个this对象。这个this对象是当前正在遍历到的dom对象</span><br><span class="line">this.checked = !this.checked;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 要检查 是否满选</span><br><span class="line">// 获取全部的球类个数</span><br><span class="line">var allCount = $(&quot;:checkbox[name=&#x27;items&#x27;]&quot;).length;</span><br><span class="line">// 再获取选中的球类个数</span><br><span class="line">var checkedCount = $(&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;).length;</span><br><span class="line"></span><br><span class="line">// if (allCount == checkedCount) &#123;</span><br><span class="line">// $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,true);</span><br><span class="line">// &#125; else &#123;</span><br><span class="line">// $(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,false);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">$(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,allCount == checkedCount);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 【提交】按钮单击事件</span><br><span class="line">$(&quot;#sendBtn&quot;).click(function () &#123;</span><br><span class="line">// 获取选中的球类的复选框</span><br><span class="line">$(&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;).each(function () &#123;</span><br><span class="line">alert(this.value);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 给【全选/全不选】绑定单击事件</span><br><span class="line">$(&quot;#checkedAllBox&quot;).click(function () &#123;</span><br><span class="line"></span><br><span class="line">// 在事件的function函数中，有一个this对象，这个this对象是当前正在响应事件的dom对象</span><br><span class="line">// alert(this.checked);</span><br><span class="line"></span><br><span class="line">$(&quot;:checkbox[name=&#x27;items&#x27;]&quot;).prop(&quot;checked&quot;,this.checked);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 给全部球类绑定单击事件</span><br><span class="line">$(&quot;:checkbox[name=&#x27;items&#x27;]&quot;).click(function () &#123;</span><br><span class="line">// 要检查 是否满选</span><br><span class="line">// 获取全部的球类个数</span><br><span class="line">var allCount = $(&quot;:checkbox[name=&#x27;items&#x27;]&quot;).length;</span><br><span class="line">// 再获取选中的球类个数</span><br><span class="line">var checkedCount = $(&quot;:checkbox[name=&#x27;items&#x27;]:checked&quot;).length;</span><br><span class="line"></span><br><span class="line">$(&quot;#checkedAllBox&quot;).prop(&quot;checked&quot;,allCount == checkedCount);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class="line"></span><br><span class="line">你爱好的运动是？&lt;input type=&quot;checkbox&quot; id=&quot;checkedAllBox&quot; /&gt;全选/全不选 </span><br><span class="line"></span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;足球&quot; /&gt;足球</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;篮球&quot; /&gt;篮球</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;羽毛球&quot; /&gt;羽毛球</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;items&quot; value=&quot;乒乓球&quot; /&gt;乒乓球</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;checkedAllBtn&quot; value=&quot;全　选&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;checkedNoBtn&quot; value=&quot;全不选&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;checkedRevBtn&quot; value=&quot;反　选&quot; /&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; id=&quot;sendBtn&quot; value=&quot;提　交&quot; /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM-的增删改"><a href="#DOM-的增删改" class="headerlink" title="DOM 的增删改"></a><strong>DOM</strong> <strong>的增删改</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh_CN&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        内部插入：</span><br><span class="line">        appendTo() a.appendTo(b) 把 a 插入到 b 子元素末尾，成为最后一个子元素</span><br><span class="line">        prependTo() a.prependTo(b) 把 a 插到 b 所有子元素前面，成为第一个子元素</span><br><span class="line">        </span><br><span class="line">        外部插入：</span><br><span class="line">        insertAfter() a.insertAfter(b) 得到 ba</span><br><span class="line">        insertBefore() a.insertBefore(b) 得到 ab </span><br><span class="line">        </span><br><span class="line">        替换: </span><br><span class="line">        replaceWith() a.replaceWith(b) 用 b 替换掉 a </span><br><span class="line">        replaceAll() a.replaceAll(b) 用 a 替换掉所有 b </span><br><span class="line">        </span><br><span class="line">        删除：</span><br><span class="line">        remove() a.remove(); 删除 a 标签 </span><br><span class="line">        empty() a.empty(); 清空 a 标签里的内容</span><br><span class="line">        */</span><br><span class="line"></span><br><span class="line">        $(function () &#123;</span><br><span class="line">            //attr</span><br><span class="line">            // alert( $(&quot;:checkbox:first&quot;).attr(&quot;name&quot;) ); // 获取</span><br><span class="line">            // $(&quot;:checkbox:first&quot;).attr(&quot;name&quot;,&quot;abc&quot;) ; // 设置</span><br><span class="line"></span><br><span class="line">            // $(&quot;:checkbox&quot;).prop(&quot;checked&quot;,false );// 官方觉得返回undefined是一个错误</span><br><span class="line"></span><br><span class="line">            // $(&quot;:checkbox:first&quot;).attr(&quot;abc&quot;,&quot;abcValue&quot;);</span><br><span class="line">            // alert( $(&quot;:checkbox:first&quot;).attr(&quot;abc&quot;) );</span><br><span class="line"></span><br><span class="line">             $(&quot;&lt;h1&gt;标题&lt;/h1&gt;&quot;).prependTo( $(&quot;div&quot;) );</span><br><span class="line">            // $(&quot;&lt;h1&gt;标题&lt;/h1&gt;&quot;).insertAfter(&quot;div&quot;);</span><br><span class="line"></span><br><span class="line">            // $(&quot;&lt;h1&gt;标题&lt;/h1&gt;&quot;).insertBefore( $(&quot;div&quot;) );</span><br><span class="line"></span><br><span class="line">            // $(&quot;&lt;h1&gt;标题&lt;/h1&gt;&quot;).replaceWith(&quot;div&quot;);</span><br><span class="line"></span><br><span class="line">            // $(&quot;div&quot;).replaceWith( $(&quot;&lt;h1&gt;标题&lt;/h1&gt;&quot;) );</span><br><span class="line"></span><br><span class="line">            // $(&quot;&lt;h1&gt;标题&lt;/h1&gt;&quot;).replaceAll( &quot;div&quot; );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            // $(&quot;div&quot;).empty();</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    多选：</span><br><span class="line">    &lt;input name=&quot;checkbox&quot; type=&quot;checkbox&quot; checked=&quot;checked&quot; value=&quot;checkbox1&quot; /&gt;checkbox1</span><br><span class="line">    &lt;input name=&quot;checkbox&quot; type=&quot;checkbox&quot; value=&quot;checkbox2&quot; /&gt;checkbox2</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;div&gt;1234&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-练习二"><a href="#jQuery-练习二" class="headerlink" title="jQuery 练习二"></a><strong>jQuery</strong> <strong>练习二</strong></h2><p><strong>从左到右，从右到左练习</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">select &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 140px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">width: 130px;</span><br><span class="line">float: left;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">// 页面加载完成</span><br><span class="line">$(function () &#123;</span><br><span class="line">// 第一个按钮 【选中添加到右边】</span><br><span class="line">$(&quot;button:eq(0)&quot;).click(function () &#123;</span><br><span class="line">$(&quot;select:eq(0) option:selected&quot;).appendTo($(&quot;select:eq(1)&quot;));</span><br><span class="line">&#125;);</span><br><span class="line">// 第二个按钮 【全部添加到右边】</span><br><span class="line">$(&quot;button:eq(1)&quot;).click(function () &#123;</span><br><span class="line">$(&quot;select:eq(0) option&quot;).appendTo($(&quot;select:eq(1)&quot;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 第三个按钮 【选中删除到左边】</span><br><span class="line">$(&quot;button:eq(2)&quot;).click(function () &#123;</span><br><span class="line">$(&quot;select:eq(1) option:selected&quot;).appendTo($(&quot;select:eq(0)&quot;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 第四个按钮 【全部删除到左边】</span><br><span class="line">$(&quot;button:eq(3)&quot;).click(function () &#123;</span><br><span class="line">$(&quot;select:eq(1) option&quot;).appendTo($(&quot;select:eq(0)&quot;));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;left&quot;&gt;</span><br><span class="line">&lt;select multiple=&quot;multiple&quot; name=&quot;sel01&quot;&gt;</span><br><span class="line">&lt;option value=&quot;opt01&quot;&gt;选项1&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;opt02&quot;&gt;选项2&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;opt03&quot;&gt;选项3&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;opt04&quot;&gt;选项4&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;opt05&quot;&gt;选项5&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;opt06&quot;&gt;选项6&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;opt07&quot;&gt;选项7&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;opt08&quot;&gt;选项8&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;button&gt;选中添加到右边&lt;/button&gt;</span><br><span class="line">&lt;button&gt;全部添加到右边&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;rigth&quot;&gt;</span><br><span class="line">&lt;select multiple=&quot;multiple&quot; name=&quot;sel02&quot;&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;button&gt;选中删除到左边&lt;/button&gt;</span><br><span class="line">&lt;button&gt;全部删除到左边&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>动态添加、删除表格记录</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styleB/css.css&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line"></span><br><span class="line">//删除用户的方法</span><br><span class="line">function delA()&#123;</span><br><span class="line">//获取要删除员工的名字</span><br><span class="line">var name = $(this).parents(&quot;tr&quot;).find(&quot;td:eq(0)&quot;).text();</span><br><span class="line">//弹出一个确认框</span><br><span class="line">var flag = confirm(&quot;确认删除&quot;+name+&quot;吗？&quot;);</span><br><span class="line">if(flag)&#123;</span><br><span class="line">//删除当前a所在的tr</span><br><span class="line">$(this).parents(&quot;tr&quot;).remove();</span><br><span class="line">&#125;</span><br><span class="line">//取消默认行为</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//删除用户</span><br><span class="line">//$(&quot;a&quot;).click(delA);</span><br><span class="line">$(&quot;a&quot;).live(&quot;click&quot; , delA);</span><br><span class="line"></span><br><span class="line">//添加员工</span><br><span class="line">$(&quot;#addEmpButton&quot;).click(function()&#123;</span><br><span class="line">//获取用户填写的内容</span><br><span class="line">var name = $(&quot;#empName&quot;).val();</span><br><span class="line">var email = $(&quot;#email&quot;).val();</span><br><span class="line">var salary = $(&quot;#salary&quot;).val();</span><br><span class="line"></span><br><span class="line">//创建tr</span><br><span class="line">/*</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Tom&lt;/td&gt;</span><br><span class="line">&lt;td&gt;tom@tom.com&lt;/td&gt;</span><br><span class="line">&lt;td&gt;5000&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;#&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">*/</span><br><span class="line">$(&quot;&lt;tr&gt;&lt;/tr&gt;&quot;).append(&quot;&lt;td&gt;&quot;+name+&quot;&lt;/td&gt;&quot;)</span><br><span class="line">  .append(&quot;&lt;td&gt;&quot;+email+&quot;&lt;/td&gt;&quot;)</span><br><span class="line">  .append(&quot;&lt;td&gt;&quot;+salary+&quot;&lt;/td&gt;&quot;)</span><br><span class="line">  .append(&quot;&lt;td&gt;&lt;a href=&#x27;#&#x27;&gt;Delete&lt;/a&gt;&lt;/td&gt;&quot;)</span><br><span class="line">  .appendTo(&quot;#employeeTable&quot;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;table id=&quot;employeeTable&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">&lt;th&gt;Email&lt;/th&gt;</span><br><span class="line">&lt;th&gt;Salary&lt;/th&gt;</span><br><span class="line">&lt;th&gt;&amp;nbsp;&lt;/th&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Tom&lt;/td&gt;</span><br><span class="line">&lt;td&gt;tom@tom.com&lt;/td&gt;</span><br><span class="line">&lt;td&gt;5000&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;#&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Jerry&lt;/td&gt;</span><br><span class="line">&lt;td&gt;jerry@sohu.com&lt;/td&gt;</span><br><span class="line">&lt;td&gt;8000&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;#&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Bob&lt;/td&gt;</span><br><span class="line">&lt;td&gt;bob@tom.com&lt;/td&gt;</span><br><span class="line">&lt;td&gt;10000&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;a href=&quot;#&quot;&gt;Delete&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;formDiv&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;h4&gt;添加新员工&lt;/h4&gt;</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td class=&quot;word&quot;&gt;name: &lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;inp&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;empName&quot; id=&quot;empName&quot; /&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td class=&quot;word&quot;&gt;email: &lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;inp&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;email&quot; id=&quot;email&quot; /&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td class=&quot;word&quot;&gt;salary: &lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;inp&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;salary&quot; id=&quot;salary&quot; /&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;</span><br><span class="line">&lt;button id=&quot;addEmpButton&quot; value=&quot;abc&quot;&gt;</span><br><span class="line">Submit</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CSS-样式操作"><a href="#CSS-样式操作" class="headerlink" title="CSS 样式操作"></a>CSS 样式操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">addClass() 添加样式 </span><br><span class="line">removeClass() 删除样式 </span><br><span class="line">toggleClass() 有就删除，没有就添加样式。 </span><br><span class="line">offset() 获取和设置元素的坐标</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">div&#123;</span><br><span class="line">width:100px;</span><br><span class="line">height:260px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.whiteborder&#123;</span><br><span class="line">border: 2px white solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.redDiv&#123;</span><br><span class="line">background-color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.blueBorder&#123;</span><br><span class="line">border: 5px blue solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line"></span><br><span class="line">var $divEle = $(&#x27;div:first&#x27;);</span><br><span class="line"></span><br><span class="line">$(&#x27;#btn01&#x27;).click(function()&#123;</span><br><span class="line">//addClass() - 向被选元素添加一个或多个类</span><br><span class="line">$divEle.addClass(&#x27;redDiv blueBorder&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&#x27;#btn02&#x27;).click(function()&#123;</span><br><span class="line">//removeClass() - 从被选元素删除一个或多个类 </span><br><span class="line">$divEle.removeClass();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(&#x27;#btn03&#x27;).click(function()&#123;</span><br><span class="line">//toggleClass() - 对被选元素进行添加/删除类的切换操作 </span><br><span class="line">$divEle.toggleClass(&#x27;redDiv&#x27;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(&#x27;#btn04&#x27;).click(function()&#123;</span><br><span class="line">//offset() - 返回第一个匹配元素相对于文档的位置。</span><br><span class="line">var pos = $divEle.offset();</span><br><span class="line">console.log(pos);</span><br><span class="line"></span><br><span class="line">$divEle.offset(&#123;</span><br><span class="line">top:100,</span><br><span class="line">left:50</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table align=&quot;center&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;div class=&quot;border&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;td&gt;</span><br><span class="line">&lt;div class=&quot;btn&quot;&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;addClass()&quot; id=&quot;btn01&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;removeClass()&quot; id=&quot;btn02&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;toggleClass()&quot; id=&quot;btn03&quot;/&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; value=&quot;offset()&quot; id=&quot;btn04&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br /&gt; &lt;br /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br /&gt; &lt;br /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-动画"><a href="#jQuery-动画" class="headerlink" title="jQuery 动画"></a>jQuery 动画</h2><p><strong>基本动画</strong> </p><p>show()                        将隐藏的元素显示 </p><p>hide()                          将可见的元素隐藏。 </p><p>toggle()                       可见就隐藏，不可见就显示。 </p><p>以上动画方法都可以添加参数。 </p><p>1、第一个参数是动画 执行的时长，以毫秒为单位 </p><p>2、第二个参数是动画的回调函数 (动画完成后自动调用的函数) </p><p><strong>淡入淡出动画</strong> </p><p>fadeIn()                          淡入（慢慢可见） </p><p>fadeOut()                      淡出（慢慢消失） </p><p>fadeTo()                        在指定时长内慢慢的将透明度修改到指定的值。0 透明，1 完成可见，0.5 半透明 </p><p>fadeToggle()                 淡入&#x2F;淡出 切换 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">&lt;link href=&quot;css/style.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">/* </span><br><span class="line">基本</span><br><span class="line">show([speed,[easing],[fn]]) </span><br><span class="line">hide([speed,[easing],[fn]]) </span><br><span class="line">toggle([speed],[easing],[fn]) </span><br><span class="line">滑动</span><br><span class="line">slideDown([spe],[eas],[fn]) </span><br><span class="line">slideUp([speed,[easing],[fn]]) </span><br><span class="line">slideToggle([speed],[easing],[fn]) </span><br><span class="line">淡入淡出</span><br><span class="line">fadeIn([speed],[eas],[fn]) </span><br><span class="line">fadeOut([speed],[eas],[fn]) </span><br><span class="line">fadeTo([[spe],opa,[eas],[fn]]) </span><br><span class="line">fadeToggle([speed,[eas],[fn]])</span><br><span class="line">*/</span><br><span class="line">$(function()&#123;</span><br><span class="line">//显示   show()</span><br><span class="line">$(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).show(2000,function () &#123;</span><br><span class="line">alert(&quot;show动画完成 &quot;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">//隐藏  hide()</span><br><span class="line">$(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).hide(1000,function () &#123;</span><br><span class="line">alert(&quot;hide动画 执行完成 &quot;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">//切换   toggle()</span><br><span class="line">$(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).toggle(1000,function () &#123;</span><br><span class="line">alert(&quot;toggle动画 完成 &quot;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// var abc = function()&#123;</span><br><span class="line">// $(&quot;#div1&quot;).toggle(1000,abc);</span><br><span class="line">// &#125;</span><br><span class="line">// abc();</span><br><span class="line"></span><br><span class="line">//淡入   fadeIn()</span><br><span class="line">$(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).fadeIn(2000,function () &#123;</span><br><span class="line">alert(&quot;fadeIn完成 &quot;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">//淡出  fadeOut()</span><br><span class="line">$(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).fadeOut(2000,function () &#123;</span><br><span class="line">alert(&quot;fadeOut完成 &quot;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//淡化到  fadeTo()</span><br><span class="line">$(&quot;#btn6&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).fadeTo(2000,0.5,function () &#123;</span><br><span class="line">alert(&#x27;fadeTo完成 &#x27;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">//淡化切换  fadeToggle()</span><br><span class="line">$(&quot;#btn7&quot;).click(function()&#123;</span><br><span class="line">$(&quot;#div1&quot;).fadeToggle(1000,function () &#123;</span><br><span class="line">alert(&quot;fadeToggle完成 &quot;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table style=&quot;float: left;&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;button id=&quot;btn1&quot;&gt;显示show()&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;button id=&quot;btn2&quot;&gt;隐藏hide()&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;button id=&quot;btn3&quot;&gt;显示/隐藏切换 toggle()&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;button id=&quot;btn4&quot;&gt;淡入fadeIn()&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;button id=&quot;btn5&quot;&gt;淡出fadeOut()&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;button id=&quot;btn6&quot;&gt;淡化到fadeTo()&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;button id=&quot;btn7&quot;&gt;淡化切换fadeToggle()&lt;/button&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;div1&quot; style=&quot;float:left;border: 1px solid;background-color: blue;width: 300px;height: 200px;&quot;&gt;</span><br><span class="line">jquery动画定义了很多种动画效果，可以很方便的使用这些动画效果</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>练习 06、CSS_动画 品牌展示</strong></p><p><strong>需求：</strong></p><p>1.点击按钮的时候，隐藏和显示卡西欧之后的品牌。 </p><p>2.当显示全部内容的时候，按钮文本为“显示精简品牌” </p><p>然后，小三角形向上。所有品牌产品为默认颜色。 </p><p>3.当只显示精简品牌的时候，要隐藏卡西欧之后的品牌，按钮文本为“显示全部品牌” </p><p>然后小三形向下。并且把 佳能，尼康的品牌颜色改为红色（给 li 标签添加 promoted 样式即可）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;品牌展示练习&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">font-size: 12px;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a &#123;</span><br><span class="line">color: #04D;</span><br><span class="line">text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:hover &#123;</span><br><span class="line">color: #F50;</span><br><span class="line">text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.SubCategoryBox &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">text-align: center;</span><br><span class="line">margin-top: 40px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.SubCategoryBox ul &#123;</span><br><span class="line">list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.SubCategoryBox ul li &#123;</span><br><span class="line">display: block;</span><br><span class="line">float: left;</span><br><span class="line">width: 200px;</span><br><span class="line">line-height: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.showmore , .showless&#123;</span><br><span class="line">clear: both;</span><br><span class="line">text-align: center;</span><br><span class="line">padding-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.showmore a , .showless a&#123;</span><br><span class="line">display: block;</span><br><span class="line">width: 120px;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">line-height: 24px;</span><br><span class="line">border: 1px solid #AAA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.showmore a span &#123;</span><br><span class="line">padding-left: 15px;</span><br><span class="line">background: url(img/down.gif) no-repeat 0 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.showless a span &#123;</span><br><span class="line">padding-left: 15px;</span><br><span class="line">background: url(img/up.gif) no-repeat 0 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.promoted a &#123;</span><br><span class="line">color: #F50;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function() &#123;</span><br><span class="line">// 基本初始状态</span><br><span class="line">$(&quot;li:gt(5):not(:last)&quot;).hide();</span><br><span class="line"></span><br><span class="line">// 给功能的按钮绑定单击事件</span><br><span class="line">$(&quot;div div a&quot;).click(function () &#123;</span><br><span class="line">// 让某些品牌，显示，或隐藏</span><br><span class="line">$(&quot;li:gt(5):not(:last)&quot;).toggle();</span><br><span class="line">// 判断 品牌，当前是否可见</span><br><span class="line">if( $(&quot;li:gt(5):not(:last)&quot;).is(&quot;:hidden&quot;) )&#123;</span><br><span class="line">// 品牌隐藏的状态 ：1 显示全部品牌    == 角标向下 showmore</span><br><span class="line">$(&quot;div div a span&quot;).text(&quot;显示全部品牌&quot;);</span><br><span class="line"></span><br><span class="line">$(&quot;div div&quot;).removeClass();</span><br><span class="line">$(&quot;div div&quot;).addClass(&quot;showmore&quot;);</span><br><span class="line"></span><br><span class="line">// 去掉高亮</span><br><span class="line">$(&quot;li:contains(&#x27;索尼&#x27;)&quot;).removeClass(&quot;promoted&quot;);</span><br><span class="line"></span><br><span class="line">&#125; else &#123;</span><br><span class="line">// 品牌可见的状态：2 显示精简品牌 == 角标向上 showless</span><br><span class="line">$(&quot;div div a span&quot;).text(&quot;显示精简品牌&quot;);</span><br><span class="line"></span><br><span class="line">$(&quot;div div&quot;).removeClass();</span><br><span class="line">$(&quot;div div&quot;).addClass(&quot;showless&quot;);</span><br><span class="line"></span><br><span class="line">// 加高亮</span><br><span class="line">$(&quot;li:contains(&#x27;索尼&#x27;)&quot;).addClass(&quot;promoted&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=&quot;SubCategoryBox&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;佳能&lt;/a&gt;&lt;i&gt;(30440) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;索尼&lt;/a&gt;&lt;i&gt;(27220) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;三星&lt;/a&gt;&lt;i&gt;(20808) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;尼康&lt;/a&gt;&lt;i&gt;(17821) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;松下&lt;/a&gt;&lt;i&gt;(12289) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;卡西欧&lt;/a&gt;&lt;i&gt;(8242) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;富士&lt;/a&gt;&lt;i&gt;(14894) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;柯达&lt;/a&gt;&lt;i&gt;(9520) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;宾得&lt;/a&gt;&lt;i&gt;(2195) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;理光&lt;/a&gt;&lt;i&gt;(4114) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;奥林巴斯&lt;/a&gt;&lt;i&gt;(12205) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;明基&lt;/a&gt;&lt;i&gt;(1466) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;爱国者&lt;/a&gt;&lt;i&gt;(3091) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;其它品牌相机&lt;/a&gt;&lt;i&gt;(7275) &lt;/i&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;div class=&quot;showmore&quot;&gt;</span><br><span class="line">&lt;a href=&quot;more.html&quot;&gt;&lt;span&gt;显示全部品牌&lt;/span&gt;&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="jQuery-事件操作"><a href="#jQuery-事件操作" class="headerlink" title="jQuery 事件操作"></a><strong>jQuery</strong> <strong>事件操作</strong></h2><h3 id="jQuery-和原生-js-的区别"><a href="#jQuery-和原生-js-的区别" class="headerlink" title="jQuery 和原生 js 的区别"></a>jQuery 和原生 js 的区别</h3><p> <strong>$( function(){} );</strong></p><p><strong>和</strong></p><p><strong>window.onload &#x3D; function(){}</strong> </p><p><strong>的区别？</strong> </p><p>他们分别是在什么时候触发？ </p><p>​             1、jQuery 的页面加载完成之后是浏览器的内核解析完页面的标签创建好 DOM 对象之后就会马上执行。 </p><p>​             2、原生 js 的页面加载完成之后，除了要等浏览器内核解析完标签创建好 DOM 对象，还要等标签显示时需要的内容加载 完成。</p><p>他们触发的顺序？ </p><p>​          1、jQuery 页面加载完成之后先执行 </p><p>​          2、原生 js 的页面加载完成之后 </p><p>他们执行的次数？ </p><p>​          1、原生 js 的页面加载完成之后，只会执行<strong>最后一次</strong>的赋值函数。 </p><p>​          2、jQuery 的页面加载完成之后是<strong>全部把注册的 function 函数</strong>，依次顺序全部执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//会在整个页面加载完毕之后调用</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">alert(&quot;原生js的页面加载完成之后--1&quot;)</span><br><span class="line">&#125;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">alert(&quot;原生js的页面加载完成之后--2&quot;)</span><br><span class="line">&#125;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">alert(&quot;原生js的页面加载完成之后--3&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//会在当前文档加载完毕之后调用</span><br><span class="line">$(function () &#123;</span><br><span class="line">alert(&quot;jquery的页面加载完成 之后--1&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">// jquery的页面加载完成 之后</span><br><span class="line">$(function () &#123;</span><br><span class="line">alert(&quot;jquery的页面加载完成 之后--2&quot;)</span><br><span class="line">&#125;);</span><br><span class="line">$(function () &#123;</span><br><span class="line">alert(&quot;jquery的页面加载完成 之后--3&quot;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//1、导入jquery的.js文件</span><br><span class="line">//2、可以在导入文件后的任意位置</span><br><span class="line">//   1）、可以写在head里面，如果写在head里面可能导致元素查找不到等问题</span><br><span class="line">//1-1、只需要把代码写在$(function()&#123; jquery代码  &#125;)</span><br><span class="line">//   2）、可以写在head之后的任意位置，我们一般不采用这种写法。</span><br><span class="line">// 3）、综合以上考虑，1-1</span><br><span class="line">//3、window.onload &amp; $(function()&#123;&#125;)</span><br><span class="line">//window.onload只可以使用一次</span><br><span class="line">//$(function()&#123;&#125;)可以使用多次</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button&gt;我是按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;http://localhost:8080&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;img src=&quot;http://localhost:8080/1.jpg&quot; alt=&quot;&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="jQuery-中其他的事件处理方法："><a href="#jQuery-中其他的事件处理方法：" class="headerlink" title="jQuery 中其他的事件处理方法："></a><strong>jQuery</strong> <strong>中其他的事件处理方法：</strong></h3><p>click()                               它可以绑定单击事件，以及触发单击事件 </p><p>mouseover()                   鼠标移入事件 </p><p>mouseout()                     鼠标移出事件 </p><p>bind()                               可以给元素一次性绑定一个或多个事件。 </p><p>one()                                 使用上跟 bind 一样。但是 one 方法绑定的事件只会响应一次。 </p><p>unbind()                           跟 bind 方法相反的操作，解除事件的绑定 </p><p>live()                                  也是用来绑定事件。它可以用来绑定选择器匹配的所有元素的事件。哪怕这个元素是后面                                              动态创建出来的也有效 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">&lt;link href=&quot;css/style.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">$(function()&#123;</span><br><span class="line">//*1.通常绑定事件的方式</span><br><span class="line">//给元素绑定事件  </span><br><span class="line">//jquery对象.事件方法(回调函数()&#123; 触发事件执行的代码 &#125;).事件方法(回调函数()&#123; 触发事件执行的代码 &#125;).事件方法(回调函数()&#123; 触发事件执行的代码 &#125;)</span><br><span class="line">//绑定事件可以链式操作</span><br><span class="line">// $(&quot;.head&quot;).click(function()&#123;</span><br><span class="line">// $(&quot;.content&quot;).toggle();</span><br><span class="line">// &#125;).mouseover(function()&#123;</span><br><span class="line">// $(&quot;.content&quot;).toggle();</span><br><span class="line">// &#125;);</span><br><span class="line">//</span><br><span class="line">//*2.jQuery提供的绑定方式：bind(type,[data],fn)函数把元素和事件绑定起来</span><br><span class="line">//type表示要绑定的事件   [data]表示传入的数据   fn表示事件的处理方法</span><br><span class="line">//bind(事件字符串,回调函数),后来添加的元素不会绑定事件</span><br><span class="line">//使用bind()绑定多个事件   type可以接受多个事件类型，使用空格分割多个事件</span><br><span class="line"> $(&quot;.head&quot;).bind(&quot;click mouseover&quot;,function()&#123;</span><br><span class="line">$(&quot;.content&quot;).toggle();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//3.one()只绑定一次,绑定的事件只会发生一次one(type,[data],fn)函数把元素和事件绑定起来</span><br><span class="line">//type表示要绑定的事件   [data]表示传入的数据   fn表示事件的处理方法</span><br><span class="line">/* $(&quot;.head&quot;).one(&quot;click mouseover&quot;,function()&#123;</span><br><span class="line">$(&quot;.content&quot;).toggle();</span><br><span class="line">&#125;); */</span><br><span class="line"></span><br><span class="line">//4.live方法会为现在及以后添加的元素都绑定上相应的事件</span><br><span class="line">/**$(&quot;.head&quot;).live(&quot;click&quot;,function()&#123;</span><br><span class="line">$(&quot;.content&quot;).toggle();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(&quot;#panel&quot;).before(&quot;&lt;h5 class=&#x27;head&#x27;&gt;什么是jQuery?&lt;/h5&gt;&quot;);</span><br><span class="line">*/</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;panel&quot;&gt;</span><br><span class="line">&lt;h5 class=&quot;head&quot;&gt;什么是jQuery?&lt;/h5&gt;</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">jQuery是继Prototype之后又一个优秀的JavaScript库，它是一个由 John Resig 创建于2006年1月的开源项目。jQuery凭借简洁的语法和跨平台的兼容性，极大地简化了JavaScript开发人员遍历HTML文档、操作DOM、处理事件、执行动画和开发Ajax。它独特而又优雅的代码风格改变了JavaScript程序员的设计思路和编写程序的方式。</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a><strong>事件的冒泡</strong></h3><p><strong>什么是事件的冒泡？</strong> </p><p>事件的冒泡是指，父子元素同时监听同一个事件。当触发子元素的事件的时候，同一个事件也被传递到了父元素的事件里去 响应。 </p><p><strong>那么如何阻止事件冒泡呢？</strong> </p><p>在子元素事件函数体内，return false; 可以阻止事件的冒泡传递。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">*&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">body&#123;</span><br><span class="line">font-size: 13px;</span><br><span class="line">line-height: 130%;</span><br><span class="line">padding: 60px;</span><br><span class="line">&#125;</span><br><span class="line">#content&#123;</span><br><span class="line">width: 220px;</span><br><span class="line">border: 1px solid #0050D0;</span><br><span class="line">background: #96E555;</span><br><span class="line">&#125;</span><br><span class="line">span&#123;</span><br><span class="line">width: 200px;</span><br><span class="line">margin: 10px;</span><br><span class="line">background: #666666;</span><br><span class="line">cursor: pointer;</span><br><span class="line">color: white;</span><br><span class="line">display: block;</span><br><span class="line">&#125;</span><br><span class="line">p&#123;</span><br><span class="line">width: 200px;</span><br><span class="line">background: #888;</span><br><span class="line">color: white;</span><br><span class="line">height: 16px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line"></span><br><span class="line">//冒泡就是事件的向上传导，子元素的事件被触发，父元素的响应事件也会触发</span><br><span class="line">//解决冒泡问题：return false;</span><br><span class="line"></span><br><span class="line">//给span绑定一个单击响应函数</span><br><span class="line">$(&quot;span&quot;).click(function()&#123;</span><br><span class="line">alert(&quot;我是span的单击响应函数&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//给id为content的div绑定一个单击响应函数</span><br><span class="line">$(&quot;#content&quot;).click(function()&#123;</span><br><span class="line">alert(&quot;我是div的单击响应函数&quot;);</span><br><span class="line">return false;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//给body绑定一个单击响应函数</span><br><span class="line">$(&quot;body&quot;).click(function()&#123;</span><br><span class="line">//alert(&quot;我是body的单击响应函数&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//取消默认行为</span><br><span class="line">/* $(&quot;a&quot;).click(function()&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;) */</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">外层div元素</span><br><span class="line">&lt;span&gt;内层span元素&lt;/span&gt;</span><br><span class="line">外层div元素</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;msg&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;a href=&quot;http://www.hao123.com&quot; onclick=&quot;return false;&quot;&gt;WWW.HAO123.COM&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="javaScript-事件对象"><a href="#javaScript-事件对象" class="headerlink" title="javaScript 事件对象"></a><strong>javaScript</strong> <strong>事件对象</strong></h3><p>事件对象，是封装有触发的事件信息的一个 javascript 对象。 </p><p>我们重点关心的是怎么拿到这个 javascript 的事件对象。以及使用。 </p><p>如何获取呢 javascript 事件对象呢？ </p><p>在给元素绑定事件的时候，在事件的 function( event ) 参数列表中添加一个参数，这个参数名，我们习惯取名为 event。 </p><p>这个 event 就是 javascript 传递参事件处理函数的事件对象。 </p><p>比如：&#x2F;&#x2F;1.原生 javascript 获取 事件对象 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line"></span><br><span class="line">#areaDiv &#123;</span><br><span class="line">border: 1px solid black;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 50px;</span><br><span class="line">margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#showMsg &#123;</span><br><span class="line">border: 1px solid black;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">//1.原生javascript获取 事件对象</span><br><span class="line">// window.onload = function () &#123;</span><br><span class="line">// document.getElementById(&quot;areaDiv&quot;).onclick = function (event) &#123;</span><br><span class="line">// console.log(event);</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line">//2.JQuery代码获取 事件对象</span><br><span class="line">$(function () &#123;</span><br><span class="line">// $(&quot;#areaDiv&quot;).click(function (event) &#123;</span><br><span class="line">// console.log(event);</span><br><span class="line">// &#125;);</span><br><span class="line">//3.使用bind同时对多个事件绑定同一个函数。怎么获取当前操作是什么事件。</span><br><span class="line"></span><br><span class="line">$(&quot;#areaDiv&quot;).bind(&quot;mouseover mouseout&quot;,function (event) &#123;</span><br><span class="line">if (event.type == &quot;mouseover&quot;) &#123;</span><br><span class="line">console.log(&quot;鼠标移入&quot;);</span><br><span class="line">&#125; else if (event.type == &quot;mouseout&quot;) &#123;</span><br><span class="line">console.log(&quot;鼠标移出&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;areaDiv&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;showMsg&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="图片跟随"><a href="#图片跟随" class="headerlink" title="图片跟随"></a><strong>图片跟随</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">body &#123;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">#small &#123;</span><br><span class="line">margin-top: 150px;</span><br><span class="line">&#125;</span><br><span class="line">#showBig &#123;</span><br><span class="line">position: absolute;</span><br><span class="line">display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">$(&quot;#small&quot;).bind(&quot;mouseover mouseout mousemove&quot;,function (event) &#123;</span><br><span class="line">if (event.type == &quot;mouseover&quot;) &#123;</span><br><span class="line">$(&quot;#showBig&quot;).show();</span><br><span class="line">&#125; else if (event.type == &quot;mousemove&quot;) &#123;</span><br><span class="line">console.log(event);</span><br><span class="line">$(&quot;#showBig&quot;).offset(&#123;</span><br><span class="line">left: event.pageX + 10,</span><br><span class="line">top: event.pageY + 10</span><br><span class="line">&#125;);</span><br><span class="line">&#125; else if (event.type == &quot;mouseout&quot;) &#123;</span><br><span class="line">$(&quot;#showBig&quot;).hide();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;img id=&quot;small&quot; src=&quot;img/small.jpg&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;showBig&quot;&gt;</span><br><span class="line">&lt;img src=&quot;img/big.jpg&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery-1</title>
      <link href="/2020/07/19/jQuery-1/"/>
      <url>/2020/07/19/jQuery-1/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery-介绍"><a href="#jQuery-介绍" class="headerlink" title="jQuery 介绍"></a><strong>jQuery</strong> <strong>介绍</strong></h2><p><strong>什么是 jQuery ?</strong> </p><p>jQuery，顾名思义，也就是 JavaScript 和查询（Query），它就是辅助 JavaScript 开发的 js 类库。 </p><p><strong>jQuery 核心思想！！！</strong> </p><p>它的核心思想是 write less,do more(写得更少,做得更多)，所以它实现了很多浏览器的兼容问题。 </p><p><strong>jQuery 流行程度</strong> </p><p>jQuery 现在已经成为最流行的 JavaScript 库，在世界前 10000 个访问最多的网站中，有超过 55%在使用 </p><p>jQuery。 </p><p><strong>jQuery 好处！！！</strong> </p><p>jQuery 是免费、开源的，jQuery 的语法设计可以使开发更加便捷，例如操作文档对象、选择 DOM 元素、 </p><p>制作动画效果、事件处理、使用 Ajax </p><h2 id="jQuery-的初体验"><a href="#jQuery-的初体验" class="headerlink" title="jQuery 的初体验"></a><strong>jQuery</strong> <strong>的初体验</strong></h2><p>需求：使用 jQuery 给一个按钮绑定单击事件?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">      // window.onload = function () &#123;</span><br><span class="line">      //     var btnObj = document.getElementById(&quot;btnId&quot;);</span><br><span class="line">      //     // alert(btnObj);//[object HTMLButtonElement]   ====&gt;&gt;&gt;  dom对象</span><br><span class="line">      //     btnObj.onclick = function () &#123;</span><br><span class="line">      //        alert(&quot;js 原生的单击事件&quot;);</span><br><span class="line">      //     &#125;</span><br><span class="line">      // &#125;</span><br><span class="line"></span><br><span class="line">      $(function () &#123; // 表示页面加载完成 之后，相当 window.onload = function () &#123;&#125;</span><br><span class="line">         var $btnObj = $(&quot;#btnId&quot;); // 表示按id查询标签对象</span><br><span class="line">         $btnObj.click(function () &#123; // 绑定单击事件</span><br><span class="line">            alert(&quot;jQuery 的单击事件&quot;);</span><br><span class="line">         &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;button id=&quot;btnId&quot;&gt;SayHello&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>细节：</strong>jQuery 一定要引入 jQuery 库，jQuery 中的$是一个函数 ，</p><p><strong>怎么为按钮添加点击响应函数的？</strong> </p><p>1、使用 jQuery 查询到标签对象 </p><p>2、使用标签对象.click( function(){} );</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123; // 表示页面加载完成 之后，相当 window.onload = function () &#123;&#125;</span><br><span class="line">   var $btnObj = $(&quot;#btnId&quot;); // 表示按id查询标签对象</span><br><span class="line">   $btnObj.click(function () &#123; // 绑定单击事件</span><br><span class="line">      alert(&quot;jQuery 的单击事件&quot;);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery-核心函数"><a href="#jQuery-核心函数" class="headerlink" title="jQuery 核心函数"></a><strong>jQuery</strong> <strong>核心函数</strong></h2><p>$ 是 jQuery 的核心函数，能完成 jQuery 的很多功能。$()就是调用$这个函数</p><p><strong>1、传入参数为 [ 函数 ] 时：</strong> </p><p>表示页面加载完成之后。相当于 window.onload &#x3D; function(){} </p><p><strong>2、传入参数为 [ HTML 字符串 ] 时：</strong> </p><p>会对我们创建这个 html 标签对象 </p><p><strong>3、传入参数为 [ 选择器字符串 ] 时：</strong> </p><p>$(“#id 属性值”);                id 选择器，根据 id 查询标签对象 </p><p>$(“标签名”);                       标签名选择器，根据指定的标签名查询标签对象 </p><p>$(“.class 属性值”);           类型选择器，可以根据 class 属性查询标签对象 </p><p><strong>4、传入参数为 [ DOM 对象 ] 时：</strong> </p><p>会把这个 dom 对象转换为 jQuery 对象 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">   //核心函数的4个作用</span><br><span class="line"></span><br><span class="line">    //传入参数为[函数]时：在文档加载完成后执行这个函数</span><br><span class="line">    //传入参数为[HTML字符串]时：根据这个字符串创建元素节点对象</span><br><span class="line">    //传入参数为[选择器字符串]时：根据这个字符串查找元素节点对象</span><br><span class="line">    //传入参数为[DOM对象]时：将DOM对象包装为jQuery对象返回</span><br><span class="line">    $(function () &#123;</span><br><span class="line">         //alert(&quot;页面加载完成之后，自动调用&quot;);</span><br><span class="line"></span><br><span class="line">        $(&quot;    &lt;div&gt;&quot; +</span><br><span class="line">            &quot;        &lt;span&gt;div-span1&lt;/span&gt;&quot; +</span><br><span class="line">            &quot;        &lt;span&gt;div-span2&lt;/span&gt;&quot; +</span><br><span class="line">            &quot;    &lt;/div&gt;&quot;).appendTo(&quot;body&quot;);</span><br><span class="line"></span><br><span class="line">         alert($(&quot;button&quot;).length);//3</span><br><span class="line"></span><br><span class="line">        var btnObj = document.getElementById(&quot;btn01&quot;);</span><br><span class="line">        // alert(btnObj);</span><br><span class="line">        // alert( $(btnObj) );</span><br><span class="line"></span><br><span class="line">        // alert( $(&quot;&lt;h1&gt;&lt;/h1&gt;&quot;) );</span><br><span class="line">        alert($(&quot;button&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;btn01&quot;&gt;按钮1&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮2&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮3&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-对象和-dom-对象区分"><a href="#jQuery-对象和-dom-对象区分" class="headerlink" title="jQuery 对象和 dom 对象区分"></a><strong>jQuery</strong> <strong>对象和</strong> <strong>dom</strong> <strong>对象区分</strong></h2><h3 id="什么是-jQuery-对象，什么是-dom-对象"><a href="#什么是-jQuery-对象，什么是-dom-对象" class="headerlink" title="什么是 jQuery 对象，什么是 dom 对象"></a><strong>什么是</strong> <strong>jQuery</strong> <strong>对象，什么是</strong> <strong>dom</strong> <strong>对象</strong></h3><h4 id="Dom-对象"><a href="#Dom-对象" class="headerlink" title="Dom 对象"></a><strong>Dom</strong> <strong>对象</strong></h4><p>1.通过 getElementById()查询出来的标签对象是 Dom 对象 </p><p>2.通过 getElementsByName()查询出来的标签对象是 Dom 对象 </p><p>3.通过 getElementsByTagName()查询出来的标签对象是 Dom 对象 </p><p>4.通过 createElement() 方法创建的对象，是 Dom 对象 </p><p>DOM 对象 Alert 出来的效果是：*[object HTML* <em>标签名</em> <em>Element]</em> </p><h4 id="jQuery-对象"><a href="#jQuery-对象" class="headerlink" title="jQuery 对象"></a><strong>jQuery</strong> <strong>对象</strong></h4><p>5.通过 JQuery 提供的 API 创建的对象，是 JQuery 对象 </p><p>6.通过 JQuery 包装的 Dom 对象，也是 JQuery 对象 </p><p>7.通过 JQuery 提供的 API 查询到的对象，是 JQuery 对象 </p><p>jQuery 对象 Alert 出来的效果是：[object Object]</p><h3 id="jQuery-对象的本质是什么？"><a href="#jQuery-对象的本质是什么？" class="headerlink" title="jQuery 对象的本质是什么？"></a><strong>jQuery</strong> <strong>对象的本质是什么？</strong></h3><p>jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数。</p><h3 id="jQuery-对象和-Dom-对象使用区别"><a href="#jQuery-对象和-Dom-对象使用区别" class="headerlink" title="jQuery 对象和 Dom 对象使用区别"></a><strong>jQuery</strong> <strong>对象和</strong> <strong>Dom</strong> <strong>对象使用区别</strong></h3><p>jQuery 对象不能使用 DOM 对象的属性和方法 </p><p>DOM 对象也不能使用 jQuery 对象的属性和方法 </p><h3 id="Dom-对象和-jQuery-对象互转"><a href="#Dom-对象和-jQuery-对象互转" class="headerlink" title="Dom 对象和 jQuery 对象互转"></a><strong>Dom</strong> <strong>对象和</strong> <strong>jQuery</strong> <strong>对象互转</strong></h3><h4 id="1、dom对象转化为-jQuery-对象"><a href="#1、dom对象转化为-jQuery-对象" class="headerlink" title="1、dom对象转化为 jQuery 对象"></a>1、dom对象转化为 <strong>jQuery</strong> 对象</h4><p>1、先有 DOM 对象 </p><p>2、$( DOM 对象 ) 就可以转换成为 jQuery 对象 </p><h4 id="2、Query-对象转为-dom对象"><a href="#2、Query-对象转为-dom对象" class="headerlink" title="2、Query 对象转为 dom对象"></a>2、Query <strong>对象转为</strong> dom对象</h4><p>1、先有 jQuery 对象 </p><p>2、jQuery 对象[下标]取出相应的 DOM 对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">   $(function()&#123;</span><br><span class="line">      //testDiv.css(&quot;color&quot;,&quot;red&quot;)</span><br><span class="line">      //testDiv.style.color = &quot;blue&quot;;</span><br><span class="line"></span><br><span class="line">      // var arr = [12,&quot;abc&quot;,true];</span><br><span class="line">      //</span><br><span class="line">      // var $btns = $(&quot;button&quot;);</span><br><span class="line">      //</span><br><span class="line">      // for (var i = 0; i &lt; $btns.length; i++)&#123;</span><br><span class="line">      //     alert($btns[i]);</span><br><span class="line">      // &#125;</span><br><span class="line"></span><br><span class="line">      // document.getElementById(&quot;testDiv&quot;).innerHTML = &quot;这是dom对象的属性InnerHTML&quot;;</span><br><span class="line">      // $(&quot;#testDiv&quot;).innerHTML = &quot;这是dom对象的属性InnerHTML&quot;;</span><br><span class="line"></span><br><span class="line">      // $(&quot;#testDiv&quot;).click(function () &#123;</span><br><span class="line">      //     alert(&quot;click()是jQuery对象的方法&quot;);</span><br><span class="line">      // &#125;);</span><br><span class="line"></span><br><span class="line">      // document.getElementById(&quot;testDiv&quot;).click(function () &#123;</span><br><span class="line">      //     alert(&quot;click()是jQuery对象的方法&quot;);</span><br><span class="line">      // &#125;);</span><br><span class="line"></span><br><span class="line">      // alert( $(document.getElementById(&quot;testDiv&quot;))[0] );</span><br><span class="line"></span><br><span class="line">      alert( $(&quot;button:first&quot;) );</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;div id=&quot;testDiv&quot;&gt;Atguigu is Very Good!&lt;/div&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;button id=&quot;dom2dom&quot;&gt;使用DOM对象调用DOM方法&lt;/button&gt;</span><br><span class="line">   &lt;button id=&quot;dom2jQuery&quot;&gt;使用DOM对象调用jQuery方法&lt;/button&gt;</span><br><span class="line">   &lt;button id=&quot;jQuery2jQuery&quot;&gt;使用jQuery对象调用jQuery方法&lt;/button&gt;</span><br><span class="line">   &lt;button id=&quot;jQuery2dom&quot;&gt;使用jQuery对象调用DOM方法&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a><strong>jQuery</strong> 选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>#ID选择器：根据 id 查找标签对象 </p><p>.class 选择器：根据 class 查找标签对象 </p><p>element 选择器：根据标签名查找标签对象 </p><p>* 选择器：表示任意的，所有的元素 </p><p>selector1，selector2 组合选择器：合并选择器 1，选择器 2 的结果并返回 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">      &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">         div, span, p &#123;</span><br><span class="line">             width: 140px;</span><br><span class="line">             height: 140px;</span><br><span class="line">             margin: 5px;</span><br><span class="line">             background: #aaa;</span><br><span class="line">             border: #000 1px solid;</span><br><span class="line">             float: left;</span><br><span class="line">             font-size: 17px;</span><br><span class="line">             font-family: Verdana;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.mini &#123;</span><br><span class="line">             width: 55px;</span><br><span class="line">             height: 55px;</span><br><span class="line">             background-color: #aaa;</span><br><span class="line">             font-size: 12px;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.hide &#123;</span><br><span class="line">             display: none;</span><br><span class="line">         &#125;</span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">         </span><br><span class="line">            $(function () &#123;</span><br><span class="line">               //1.选择 id 为 one 的元素 &quot;background-color&quot;,&quot;#bbffaa&quot;</span><br><span class="line">               $(&quot;#btn1&quot;).click(function () &#123;</span><br><span class="line">                  // css() 方法 可以设置和获取样式</span><br><span class="line">                  $(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               //2.选择 class 为 mini 的所有元素</span><br><span class="line">               $(&quot;#btn2&quot;).click(function () &#123;</span><br><span class="line">                  $(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">               //3.选择 元素名是 div 的所有元素</span><br><span class="line">               $(&quot;#btn3&quot;).click(function () &#123;</span><br><span class="line">                  $(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">               //4.选择所有的元素</span><br><span class="line">               $(&quot;#btn4&quot;).click(function () &#123;</span><br><span class="line">                  $(&quot;*&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">               //5.选择所有的 span 元素和id为two的元素</span><br><span class="line">               $(&quot;#btn5&quot;).click(function () &#123;</span><br><span class="line">                  $(&quot;span,#two&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">&lt;!--   &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;基本选择器&lt;/h1&gt;</span><br><span class="line">   &lt;/div&gt;  --&gt;   </span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 one 的元素&quot; id=&quot;btn1&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 class 为 mini 的所有元素&quot; id=&quot;btn2&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 元素名是 div 的所有元素&quot; id=&quot;btn3&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 所有的元素&quot; id=&quot;btn4&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 所有的 span 元素和id为two的元素&quot; id=&quot;btn5&quot; /&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;</span><br><span class="line">         id 为 one,class 为 one 的div</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;</span><br><span class="line">         id为two,class为one,title为test的div</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span class=&quot;one&quot; id=&quot;span&quot;&gt;^^span元素^^&lt;/span&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="层级选择器"><a href="#层级选择器" class="headerlink" title="层级选择器"></a><strong>层级选择器</strong></h3><p>ancestor descendant   后代选择器 ：在给定的祖先元素下匹配所有的后代元素 </p><p>parent &gt; child 子元素选择器：在给定的父元素下匹配所有的子元素 </p><p>prev + next 相邻元素选择器：匹配所有紧接在 prev 元素后的 next 元素 </p><p>prev ~ sibings 之后的兄弟元素选择器：匹配 prev 元素之后的所有 siblings 元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">      &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">         div, span, p &#123;</span><br><span class="line">             width: 140px;</span><br><span class="line">             height: 140px;</span><br><span class="line">             margin: 5px;</span><br><span class="line">             background: #aaa;</span><br><span class="line">             border: #000 1px solid;</span><br><span class="line">             float: left;</span><br><span class="line">             font-size: 17px;</span><br><span class="line">             font-family: Verdana;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.mini &#123;</span><br><span class="line">             width: 55px;</span><br><span class="line">             height: 55px;</span><br><span class="line">             background-color: #aaa;</span><br><span class="line">             font-size: 12px;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.hide &#123;</span><br><span class="line">             display: none;</span><br><span class="line">         &#125;        </span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">         $(document).ready(function()&#123;</span><br><span class="line">            //1.选择 body 内的所有 div 元素</span><br><span class="line">            $(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;body div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //2.在 body 内, 选择div子元素  </span><br><span class="line">            $(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;body &gt; div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //3.选择 id 为 one 的下一个 div 元素 </span><br><span class="line">            $(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;#one+div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //4.选择 id 为 two 的元素后面的所有 div 兄弟元素</span><br><span class="line">            $(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;#two~div&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt; </span><br><span class="line">   </span><br><span class="line">&lt;!--   &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;层级选择器:根据元素的层级关系选择元素&lt;/h1&gt;</span><br><span class="line">      ancestor descendant  ：</span><br><span class="line">      parent &gt; child           ：</span><br><span class="line">      prev + next          ：</span><br><span class="line">      prev ~ siblings       ：</span><br><span class="line">   &lt;/div&gt;  --&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 body 内的所有 div 元素&quot; id=&quot;btn1&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;在 body 内, 选择div子元素&quot; id=&quot;btn2&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 one 的下一个 div 元素&quot; id=&quot;btn3&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 id 为 two 的元素后面的所有 div 兄弟元素&quot; id=&quot;btn4&quot; /&gt;</span><br><span class="line">      &lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;</span><br><span class="line">         id 为 one,class 为 one 的div</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;</span><br><span class="line">         id为two,class为one,title为test的div</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span id=&quot;span&quot;&gt;^^span元素^^&lt;/span&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><h4 id="基本过滤器："><a href="#基本过滤器：" class="headerlink" title="基本过滤器："></a><strong>基本过滤器：</strong></h4><p><strong>:first</strong> 获取第一个元素 </p><p><strong>:last</strong> 获取最后个元素 </p><p><strong>:not(selector)</strong> 去除所有与给定选择器匹配的元素 </p><p><strong>:even</strong> 匹配所有索引值为偶数的元素，从 0 开始计数 </p><p><strong>:odd</strong> 匹配所有索引值为奇数的元素，从 0 开始计数 </p><p><strong>:eq(index)</strong> 匹配一个给定索引值的元素 </p><p><strong>:gt(index)</strong> 匹配所有大于给定索引值的元素 </p><p><strong>:lt(index)</strong> 匹配所有小于给定索引值的元素 </p><p><strong>:header</strong> 匹配如 h1, h2, h3 之类的标题元素 </p><p><strong>:animated</strong> 匹配所有正在执行动画效果的元素 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">      &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">         div, span, p &#123;</span><br><span class="line">             width: 140px;</span><br><span class="line">             height: 140px;</span><br><span class="line">             margin: 5px;</span><br><span class="line">             background: #aaa;</span><br><span class="line">             border: #000 1px solid;</span><br><span class="line">             float: left;</span><br><span class="line">             font-size: 17px;</span><br><span class="line">             font-family: Verdana;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.mini &#123;</span><br><span class="line">             width: 55px;</span><br><span class="line">             height: 55px;</span><br><span class="line">             background-color: #aaa;</span><br><span class="line">             font-size: 12px;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.hide &#123;</span><br><span class="line">             display: none;</span><br><span class="line">         &#125;        </span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">         $(document).ready(function()&#123;</span><br><span class="line">            function anmateIt()&#123;</span><br><span class="line">               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);</span><br><span class="line">            &#125;</span><br><span class="line">            anmateIt();</span><br><span class="line">         &#125;);</span><br><span class="line">         </span><br><span class="line">         $(document).ready(function()&#123;</span><br><span class="line">            //1.选择第一个 div 元素  </span><br><span class="line">            $(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:first&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //2.选择最后一个 div 元素</span><br><span class="line">            $(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //3.选择class不为 one 的所有 div 元素</span><br><span class="line">            $(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:not(.one)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //4.选择索引值为偶数的 div 元素</span><br><span class="line">            $(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:even&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //5.选择索引值为奇数的 div 元素</span><br><span class="line">            $(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:odd&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //6.选择索引值为大于 3 的 div 元素</span><br><span class="line">            $(&quot;#btn6&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:gt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //7.选择索引值为等于 3 的 div 元素</span><br><span class="line">            $(&quot;#btn7&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:eq(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //8.选择索引值为小于 3 的 div 元素</span><br><span class="line">            $(&quot;#btn8&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:lt(3)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //9.选择所有的标题元素</span><br><span class="line">            $(&quot;#btn9&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;:header&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //10.选择当前正在执行动画的所有元素</span><br><span class="line">            $(&quot;#btn10&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;:animated&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //11.选择没有执行动画的最后一个div</span><br><span class="line">            $(&quot;#btn11&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:not(:animated):last&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择第一个 div 元素&quot; id=&quot;btn1&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择最后一个 div 元素&quot; id=&quot;btn2&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择class不为 one 的所有 div 元素&quot; id=&quot;btn3&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择索引值为偶数的 div 元素&quot; id=&quot;btn4&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择索引值为奇数的 div 元素&quot; id=&quot;btn5&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择索引值为大于 3 的 div 元素&quot; id=&quot;btn6&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择索引值为等于 3 的 div 元素&quot; id=&quot;btn7&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择索引值为小于 3 的 div 元素&quot; id=&quot;btn8&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择所有的标题元素&quot; id=&quot;btn9&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择当前正在执行动画的所有元素&quot; id=&quot;btn10&quot; /&gt;    </span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择没有执行动画的最后一个div&quot; id=&quot;btn11&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &lt;h3&gt;基本选择器.&lt;/h3&gt;</span><br><span class="line">      &lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;</span><br><span class="line">         id 为 one,class 为 one 的div</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;</span><br><span class="line">         id为two,class为one,title为test的div</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="内容过滤器："><a href="#内容过滤器：" class="headerlink" title="内容过滤器："></a><strong>内容过滤器：</strong></h4><p><strong>:contains(text)</strong> 匹配包含给定文本的元素 </p><p><strong>:empty</strong> 匹配所有不包含子元素或者文本的空元素 </p><p><strong>:parent</strong> 匹配含有子元素或者文本的元素 </p><p><strong>:has(selector)</strong> 匹配含有选择器所匹配的元素的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">      &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">         div, span, p &#123;</span><br><span class="line">             width: 140px;</span><br><span class="line">             height: 140px;</span><br><span class="line">             margin: 5px;</span><br><span class="line">             background: #aaa;</span><br><span class="line">             border: #000 1px solid;</span><br><span class="line">             float: left;</span><br><span class="line">             font-size: 17px;</span><br><span class="line">             font-family: Verdana;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.mini &#123;</span><br><span class="line">             width: 55px;</span><br><span class="line">             height: 55px;</span><br><span class="line">             background-color: #aaa;</span><br><span class="line">             font-size: 12px;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.hide &#123;</span><br><span class="line">             display: none;</span><br><span class="line">         &#125;        </span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">         $(document).ready(function()&#123;</span><br><span class="line">            function anmateIt()&#123;</span><br><span class="line">               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">            anmateIt();             </span><br><span class="line">         &#125;);</span><br><span class="line">         </span><br><span class="line">         /** </span><br><span class="line">         :contains(text)   </span><br><span class="line">         :empty             </span><br><span class="line">         :has(selector)     </span><br><span class="line">         :parent          </span><br><span class="line">         */</span><br><span class="line">         $(document).ready(function()&#123;</span><br><span class="line">            //1.选择 含有文本 &#x27;di&#x27; 的 div 元素</span><br><span class="line">            $(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:contains(&#x27;di&#x27;)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //2.选择不包含子元素(或者文本元素) 的 div 空元素</span><br><span class="line">            $(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:empty&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //3.选择含有 class 为 mini 元素的 div 元素</span><br><span class="line">            $(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:has(.mini)&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //4.选择含有子元素(或者文本元素)的div元素</span><br><span class="line">            $(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div:parent&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;);</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;    </span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择 含有文本 &#x27;di&#x27; 的 div 元素&quot; id=&quot;btn1&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择不包含子元素(或者文本元素) 的 div 空元素&quot; id=&quot;btn2&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择含有 class 为 mini 元素的 div 元素&quot; id=&quot;btn3&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;选择含有子元素(或者文本元素)的div元素&quot; id=&quot;btn4&quot; /&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;</span><br><span class="line">         id 为 one,class 为 one 的div</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;</span><br><span class="line">         id为two,class为one,title为test的div</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="属性过滤器："><a href="#属性过滤器：" class="headerlink" title="属性过滤器："></a><strong>属性过滤器：</strong></h4><p><strong>[attribute]</strong> 匹配包含给定属性的元素。</p><p><strong>[attribute&#x3D;value]</strong> 匹配给定的属性是某个特定值的元素</p><p><strong>[attribute!&#x3D;value]</strong> 匹配所有不含有指定的属性，或者属性不等于特定值的元素。 </p><p><strong>[attribute^&#x3D;value]</strong> 匹配给定的属性是以某些值开始的元素 </p><p><strong>[attribute$&#x3D;value]</strong> 匹配给定的属性是以某些值结尾的元素 </p><p><em><em>[attribute</em>&#x3D;value]</em>* 匹配给定的属性是以包含某些值的元素 </p><p><strong>[attrSel1][attrSel2][attrSelN]</strong> 复合属性选择器，需要同时满足多个条件时使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">div,span,p &#123;</span><br><span class="line">   width: 140px;</span><br><span class="line">   height: 140px;</span><br><span class="line">   margin: 5px;</span><br><span class="line">   background: #aaa;</span><br><span class="line">   border: #000 1px solid;</span><br><span class="line">   float: left;</span><br><span class="line">   font-size: 17px;</span><br><span class="line">   font-family: Verdana;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.mini &#123;</span><br><span class="line">   width: 55px;</span><br><span class="line">   height: 55px;</span><br><span class="line">   background-color: #aaa;</span><br><span class="line">   font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div.hide &#123;</span><br><span class="line">   display: none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   /**</span><br><span class="line">[attribute]          </span><br><span class="line">[attribute=value]     </span><br><span class="line">[attribute!=value]         </span><br><span class="line">[attribute^=value]        </span><br><span class="line">[attribute$=value]        </span><br><span class="line">[attribute*=value]        </span><br><span class="line">[attrSel1][attrSel2][attrSelN]  </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   */</span><br><span class="line">   $(function() &#123;</span><br><span class="line">      //1.选取含有 属性title 的div元素</span><br><span class="line">      $(&quot;#btn1&quot;).click(function() &#123;</span><br><span class="line">         $(&quot;div[title]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">      //2.选取 属性title值等于&#x27;test&#x27;的div元素</span><br><span class="line">      $(&quot;#btn2&quot;).click(function() &#123;</span><br><span class="line">         $(&quot;div[title=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">      //3.选取 属性title值不等于&#x27;test&#x27;的div元素(*没有属性title的也将被选中)</span><br><span class="line">      $(&quot;#btn3&quot;).click(function() &#123;</span><br><span class="line">         $(&quot;div[title!=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">      //4.选取 属性title值 以&#x27;te&#x27;开始 的div元素</span><br><span class="line">      $(&quot;#btn4&quot;).click(function() &#123;</span><br><span class="line">         $(&quot;div[title^=&#x27;te&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">      //5.选取 属性title值 以&#x27;est&#x27;结束 的div元素</span><br><span class="line">      $(&quot;#btn5&quot;).click(function() &#123;</span><br><span class="line">         $(&quot;div[title$=&#x27;est&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">      //6.选取 属性title值 含有&#x27;es&#x27;的div元素</span><br><span class="line">      $(&quot;#btn6&quot;).click(function() &#123;</span><br><span class="line">         $(&quot;div[title*=&#x27;es&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">      </span><br><span class="line">      //7.首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素</span><br><span class="line">      $(&quot;#btn7&quot;).click(function() &#123;</span><br><span class="line">         $(&quot;div[id][title*=&#x27;es&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">      //8.选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素</span><br><span class="line">      $(&quot;#btn8&quot;).click(function() &#123;</span><br><span class="line">         $(&quot;div[title][title!=&#x27;test&#x27;]&quot;).css(&quot;background&quot;, &quot;#bbffaa&quot;);</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;input type=&quot;button&quot; value=&quot;选取含有 属性title 的div元素.&quot; id=&quot;btn1&quot; style=&quot;display: none;&quot;/&gt;</span><br><span class="line">   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值等于&#x27;test&#x27;的div元素.&quot; id=&quot;btn2&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;button&quot;</span><br><span class="line">      value=&quot;选取 属性title值不等于&#x27;test&#x27;的div元素(没有属性title的也将被选中).&quot; id=&quot;btn3&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 以&#x27;te&#x27;开始 的div元素.&quot; id=&quot;btn4&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 以&#x27;est&#x27;结束 的div元素.&quot; id=&quot;btn5&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;button&quot; value=&quot;选取 属性title值 含有&#x27;es&#x27;的div元素.&quot; id=&quot;btn6&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;button&quot;</span><br><span class="line">      value=&quot;组合属性选择器,首先选取有属性id的div元素，然后在结果中 选取属性title值 含有&#x27;es&#x27;的 div 元素.&quot;</span><br><span class="line">      id=&quot;btn7&quot; /&gt;</span><br><span class="line">   &lt;input type=&quot;button&quot;</span><br><span class="line">      value=&quot;选取 含有 title 属性值, 且title 属性值不等于 test 的 div 元素.&quot; id=&quot;btn8&quot; /&gt;</span><br><span class="line"></span><br><span class="line">   &lt;br&gt;</span><br><span class="line">   &lt;br&gt;</span><br><span class="line">   &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;</span><br><span class="line">      id 为 one,class 为 one 的div</span><br><span class="line">      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;</span><br><span class="line">      id为two,class为one,title为test的div</span><br><span class="line">      &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;class为mini,title为other&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div style=&quot;display: none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;</span><br><span class="line">   &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">      包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; value=&quot;123456789&quot;</span><br><span class="line">         size=&quot;8&quot;&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器:"></a>表单过滤器:</h4><p><strong>:input</strong> 匹配所有 input, textarea, select 和 button 元素 </p><p><strong>:text</strong> 匹配所有 文本输入框 </p><p><strong>:password</strong> 匹配所有的密码输入框 </p><p><strong>:radio</strong>匹配所有的单选框 </p><p><strong>:checkbox</strong> 匹配所有的复选框 </p><p><strong>:submit</strong> 匹配所有提交按钮 </p><p><strong>:image</strong> 匹配所有 img 标签 </p><p><strong>:reset</strong> 匹配所有重置按钮 </p><p><strong>:button</strong> 匹配所有 input type&#x3D;button <button>按钮 </p><p><strong>:file</strong> 匹配所有 input type&#x3D;file 文件上传 </p><p><strong>:hidden</strong> 匹配所有不可见元素 display:none 或 input type&#x3D;hidden</p><h4 id="表单对象属性过滤器："><a href="#表单对象属性过滤器：" class="headerlink" title="表单对象属性过滤器："></a><strong>表单对象属性过滤器：</strong></h4><p><strong>:enabled</strong> 匹配所有可用元素 </p><p><strong>:disabled</strong> 匹配所有不可用元素 </p><p><strong>:checked</strong> 匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象</p><p><strong>:selected</strong> 匹配所有选中的option</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;Untitled Document&lt;/title&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">         $(function()&#123;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">      /**</span><br><span class="line">      :input        </span><br><span class="line">      :text     </span><br><span class="line">      :password  </span><br><span class="line">      :radio        </span><br><span class="line">      :checkbox  </span><br><span class="line">      :submit    </span><br><span class="line">      :image        </span><br><span class="line">      :reset        </span><br><span class="line">      :button    </span><br><span class="line">      :file     </span><br><span class="line">      :hidden    </span><br><span class="line">      </span><br><span class="line">      表单对象的属性</span><br><span class="line">      :enabled      </span><br><span class="line">      :disabled     </span><br><span class="line">      :checked      </span><br><span class="line">      :selected     </span><br><span class="line">      */</span><br><span class="line"></span><br><span class="line">               </span><br><span class="line">            //1.对表单内 可用input 赋值操作</span><br><span class="line">            $(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">               // val()可以操作表单项的value属性值</span><br><span class="line">               // 它可以设置和获取</span><br><span class="line">               $(&quot;:text:enabled&quot;).val(&quot;我是万能的程序员&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //2.对表单内 不可用input 赋值操作</span><br><span class="line">            $(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;:text:disabled&quot;).val(&quot;管你可用不可用，反正我是万能的程序员&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //3.获取多选框选中的个数  使用size()方法获取选取到的元素集合的元素个数</span><br><span class="line">            $(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">               alert( $(&quot;:checkbox:checked&quot;).length );</span><br><span class="line">            &#125;);</span><br><span class="line">            //4.获取多选框，每个选中的value值</span><br><span class="line">            $(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">               // 获取全部选中的复选框标签对象</span><br><span class="line">               var $checkboies = $(&quot;:checkbox:checked&quot;);</span><br><span class="line">               // 老式遍历</span><br><span class="line">               // for (var i = 0; i &lt; $checkboies.length; i++)&#123;</span><br><span class="line">               //     alert( $checkboies[i].value );</span><br><span class="line">               // &#125;</span><br><span class="line"></span><br><span class="line">               // each方法是jQuery对象提供用来遍历元素的方法</span><br><span class="line">               // 在遍历的function函数中，有一个this对象，这个this对象，就是当前遍历到的dom对象</span><br><span class="line">               $checkboies.each(function () &#123;</span><br><span class="line">                  alert( this.value );</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">            //5.获取下拉框选中的内容  </span><br><span class="line">            $(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">               // 获取选中的option标签对象</span><br><span class="line">               var $options = $(&quot;select option:selected&quot;);</span><br><span class="line">               // 遍历，获取option标签中的文本内容</span><br><span class="line">               $options.each(function () &#123;</span><br><span class="line">                  // 在each遍历的function函数中，有一个this对象。这个this对象是当前正在遍历到的dom对象</span><br><span class="line">                  alert(this.innerHTML);</span><br><span class="line">               &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">         &#125;) </span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;</span><br><span class="line">      &lt;h3&gt;表单对象属性过滤选择器&lt;/h3&gt;</span><br><span class="line">       &lt;button id=&quot;btn1&quot;&gt;对表单内 可用input 赋值操作.&lt;/button&gt;</span><br><span class="line">       &lt;button id=&quot;btn2&quot;&gt;对表单内 不可用input 赋值操作.&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">       &lt;button id=&quot;btn3&quot;&gt;获取多选框选中的个数.&lt;/button&gt;</span><br><span class="line">       &lt;button id=&quot;btn4&quot;&gt;获取多选框选中的内容.&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">         &lt;button id=&quot;btn5&quot;&gt;获取下拉框选中的内容.&lt;/button&gt;&lt;br /&gt;&lt;br /&gt;</span><br><span class="line">       </span><br><span class="line">      &lt;form id=&quot;form1&quot; action=&quot;#&quot;&gt;         </span><br><span class="line">         可用元素: &lt;input name=&quot;add&quot; value=&quot;可用文本框1&quot;/&gt;&lt;br&gt;</span><br><span class="line">         不可用元素: &lt;input name=&quot;email&quot; disabled=&quot;disabled&quot; value=&quot;不可用文本框&quot;/&gt;&lt;br&gt;</span><br><span class="line">         可用元素: &lt;input name=&quot;che&quot; value=&quot;可用文本框2&quot;/&gt;&lt;br&gt;</span><br><span class="line">         不可用元素: &lt;input name=&quot;name&quot; disabled=&quot;disabled&quot; value=&quot;不可用文本框&quot;/&gt;&lt;br&gt;</span><br><span class="line">         &lt;br&gt;</span><br><span class="line">         </span><br><span class="line">         多选框: &lt;br&gt;</span><br><span class="line">         &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; checked=&quot;checked&quot; value=&quot;test1&quot; /&gt;test1</span><br><span class="line">         &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; value=&quot;test2&quot; /&gt;test2</span><br><span class="line">         &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; value=&quot;test3&quot; /&gt;test3</span><br><span class="line">         &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; checked=&quot;checked&quot; value=&quot;test4&quot; /&gt;test4</span><br><span class="line">         &lt;input type=&quot;checkbox&quot; name=&quot;newsletter&quot; value=&quot;test5&quot; /&gt;test5</span><br><span class="line">         </span><br><span class="line">         &lt;br&gt;&lt;br&gt;</span><br><span class="line">         下拉列表1: &lt;br&gt;</span><br><span class="line">         &lt;select name=&quot;test&quot; multiple=&quot;multiple&quot; style=&quot;height: 100px&quot; id=&quot;sele1&quot;&gt;</span><br><span class="line">            &lt;option&gt;浙江&lt;/option&gt;</span><br><span class="line">            &lt;option selected=&quot;selected&quot;&gt;辽宁&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;北京&lt;/option&gt;</span><br><span class="line">            &lt;option selected=&quot;selected&quot;&gt;天津&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;广州&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;湖北&lt;/option&gt;</span><br><span class="line">         &lt;/select&gt;</span><br><span class="line">         </span><br><span class="line">         &lt;br&gt;&lt;br&gt;</span><br><span class="line">         下拉列表2: &lt;br&gt;</span><br><span class="line">         &lt;select name=&quot;test2&quot;&gt;</span><br><span class="line">            &lt;option&gt;浙江&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;辽宁&lt;/option&gt;</span><br><span class="line">            &lt;option selected=&quot;selected&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;天津&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;广州&lt;/option&gt;</span><br><span class="line">            &lt;option&gt;湖北&lt;/option&gt;</span><br><span class="line">         &lt;/select&gt;</span><br><span class="line">      &lt;/form&gt;       </span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="jQuery-元素筛选"><a href="#jQuery-元素筛选" class="headerlink" title="jQuery 元素筛选"></a><strong>jQuery</strong> <strong>元素筛选</strong></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">q()              获取给定索引的元素                                     功能跟 :eq() 一样</span><br><span class="line">first()           获取第一个元素                                         功能跟 :first 一样</span><br><span class="line">last()            获取最后一个元素                                       功能跟 :last 一样</span><br><span class="line">filter(exp)       留下匹配的元素</span><br><span class="line">is(exp)           判断是否匹配给定的选择器，只要有一个匹配就返回，true</span><br><span class="line">has(exp)          返回包含有匹配选择器的元素的元素                       功能跟 :has 一样</span><br><span class="line">not(exp)          删除匹配选择器的元素                                   功能跟 :not 一样</span><br><span class="line">children(exp)     返回匹配给定选择器的子元素                             功能跟 parent&gt;child 一样</span><br><span class="line">find(exp)         返回匹配给定选择器的后代元素                           功能跟 ancestor descendant 一样</span><br><span class="line">next()            返回当前元素的下一个兄弟元素                           功能跟 prev + next 功能一样</span><br><span class="line">nextAll()         返回当前元素后面所有的兄弟元素                          功能跟 prev ~ siblings 功能一样</span><br><span class="line">nextUntil()       返回当前元素到指定匹配的元素为止的后面元素</span><br><span class="line">parent()          返回父元素</span><br><span class="line">prev(exp)         返回当前元素的上一个兄弟元素</span><br><span class="line">prevAll()         返回当前元素前面所有的兄弟元素</span><br><span class="line">prevUnit(exp)     返回当前元素到指定匹配的元素为止的前面元素</span><br><span class="line">siblings(exp)     返回所有兄弟元素</span><br><span class="line">add()             把add匹配的选择器的元素添加到当前jquery对象中</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">      &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">      &lt;title&gt;DOM查询&lt;/title&gt;</span><br><span class="line">      &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">         div, span, p &#123;</span><br><span class="line">             width: 140px;</span><br><span class="line">             height: 140px;</span><br><span class="line">             margin: 5px;</span><br><span class="line">             background: #aaa;</span><br><span class="line">             border: #000 1px solid;</span><br><span class="line">             float: left;</span><br><span class="line">             font-size: 17px;</span><br><span class="line">             font-family: Verdana;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.mini &#123;</span><br><span class="line">             width: 55px;</span><br><span class="line">             height: 55px;</span><br><span class="line">             background-color: #aaa;</span><br><span class="line">             font-size: 12px;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">         div.hide &#123;</span><br><span class="line">             display: none;</span><br><span class="line">         &#125;        </span><br><span class="line">      &lt;/style&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot; src=&quot;../script/jquery-1.7.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">         $(document).ready(function()&#123;</span><br><span class="line">            function anmateIt()&#123;</span><br><span class="line">               $(&quot;#mover&quot;).slideToggle(&quot;slow&quot;, anmateIt);</span><br><span class="line">            &#125;</span><br><span class="line">            anmateIt();</span><br><span class="line">            </span><br><span class="line">   /**</span><br><span class="line">               </span><br><span class="line">   过滤</span><br><span class="line">   eq(index|-index)         </span><br><span class="line">   first()                </span><br><span class="line">   last()                    </span><br><span class="line">   hasClass(class)          </span><br><span class="line">   filter(expr|obj|ele|fn)    </span><br><span class="line">   is(expr|obj|ele|fn)1.6*    </span><br><span class="line">   has(expr|ele)           </span><br><span class="line">   not(expr|ele|fn)         </span><br><span class="line">   slice(start,[end])           </span><br><span class="line">   </span><br><span class="line">   查找</span><br><span class="line">   children([expr])         </span><br><span class="line">   closest(expr,[con]|obj|ele)1.6*   </span><br><span class="line">   find(expr|obj|ele)              </span><br><span class="line">   next([expr])               </span><br><span class="line">   nextall([expr])             </span><br><span class="line">   nextUntil([exp|ele][,fil])1.6*     </span><br><span class="line">   parent([expr])                 </span><br><span class="line">   parents([expr])             </span><br><span class="line">   parentsUntil([exp|ele][,fil])1.6*  </span><br><span class="line">   prev([expr])               </span><br><span class="line">   prevall([expr])             </span><br><span class="line">   prevUntil([exp|ele][,fil])1.6*     </span><br><span class="line">   siblings([expr])            </span><br><span class="line">   </span><br><span class="line">   串联</span><br><span class="line">   add(expr|ele|html|obj[,con])   </span><br><span class="line">                     </span><br><span class="line">   </span><br><span class="line">   */</span><br><span class="line">            </span><br><span class="line">            //(1)eq()  选择索引值为等于 3 的 div 元素</span><br><span class="line">            $(&quot;#btn1&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;div&quot;).eq(3).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(2)first()选择第一个 div 元素</span><br><span class="line">             $(&quot;#btn2&quot;).click(function()&#123;</span><br><span class="line">                //first()   选取第一个元素</span><br><span class="line">               $(&quot;div&quot;).first().css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(3)last()选择最后一个 div 元素</span><br><span class="line">            $(&quot;#btn3&quot;).click(function()&#123;</span><br><span class="line">               //last()  选取最后一个元素</span><br><span class="line">               $(&quot;div&quot;).last().css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(4)filter()在div中选择索引为偶数的</span><br><span class="line">            $(&quot;#btn4&quot;).click(function()&#123;</span><br><span class="line">               //filter()  过滤   传入的是选择器字符串</span><br><span class="line">               $(&quot;div&quot;).filter(&quot;:even&quot;).css(&quot;background-color&quot;,&quot;#bbffaa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">             //(5)is()判断#one是否为:empty或:parent</span><br><span class="line">            //is用来检测jq对象是否符合指定的选择器</span><br><span class="line">            $(&quot;#btn5&quot;).click(function()&#123;</span><br><span class="line">               alert( $(&quot;#one&quot;).is(&quot;:empty&quot;) );</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            //(6)has()选择div中包含.mini的</span><br><span class="line">            $(&quot;#btn6&quot;).click(function()&#123;</span><br><span class="line">               //has(selector)  选择器字符串    是否包含selector</span><br><span class="line">               $(&quot;div&quot;).has(&quot;.mini&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(7)not()选择div中class不为one的</span><br><span class="line">            $(&quot;#btn7&quot;).click(function()&#123;</span><br><span class="line">               //not(selector)  选择不是selector的元素</span><br><span class="line">               $(&quot;div&quot;).not(&#x27;.one&#x27;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(8)children()在body中选择所有class为one的div子元素</span><br><span class="line">            $(&quot;#btn8&quot;).click(function()&#123;</span><br><span class="line">               //children()  选出所有的子元素</span><br><span class="line">               $(&quot;body&quot;).children(&quot;div.one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            //(9)find()在body中选择所有class为mini的div元素</span><br><span class="line">            $(&quot;#btn9&quot;).click(function()&#123;</span><br><span class="line">               //find()  选出所有的后代元素</span><br><span class="line">               $(&quot;body&quot;).find(&quot;div.mini&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(10)next() #one的下一个div</span><br><span class="line">            $(&quot;#btn10&quot;).click(function()&#123;</span><br><span class="line">               //next()  选择下一个兄弟元素</span><br><span class="line">               $(&quot;#one&quot;).next(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(11)nextAll() #one后面所有的span元素</span><br><span class="line">            $(&quot;#btn11&quot;).click(function()&#123;</span><br><span class="line">               //nextAll()   选出后面所有的元素</span><br><span class="line">               $(&quot;#one&quot;).nextAll(&quot;span&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(12)nextUntil() #one和span之间的元素</span><br><span class="line">            $(&quot;#btn12&quot;).click(function()&#123;</span><br><span class="line">               //</span><br><span class="line">               $(&quot;#one&quot;).nextUntil(&quot;span&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">            &#125;);</span><br><span class="line">            //(13)parent() .mini的父元素</span><br><span class="line">            $(&quot;#btn13&quot;).click(function()&#123;</span><br><span class="line">               $(&quot;.mini&quot;).parent().css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line">            //(14)prev() #two的上一个div</span><br><span class="line">            $(&quot;#btn14&quot;).click(function()&#123;</span><br><span class="line">               //prev()  </span><br><span class="line">               $(&quot;#two&quot;).prev(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">            &#125;);</span><br><span class="line">            //(15)prevAll() span前面所有的div</span><br><span class="line">            $(&quot;#btn15&quot;).click(function()&#123;</span><br><span class="line">               //prevAll()   选出前面所有的元素</span><br><span class="line">               $(&quot;span&quot;).prevAll(&quot;div&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">            &#125;);</span><br><span class="line">            //(16)prevUntil() span向前直到#one的元素</span><br><span class="line">            $(&quot;#btn16&quot;).click(function()&#123;</span><br><span class="line">               //prevUntil(exp)   找到之前所有的兄弟元素直到找到exp停止</span><br><span class="line">               $(&quot;span&quot;).prevUntil(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">            &#125;);</span><br><span class="line">            //(17)siblings() #two的所有兄弟元素</span><br><span class="line">            $(&quot;#btn17&quot;).click(function()&#123;</span><br><span class="line">               //siblings()    找到所有的兄弟元素，包括前面的和后面的</span><br><span class="line">               $(&quot;#two&quot;).siblings().css(&quot;background-color&quot;,&quot;#bfa&quot;)</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            //(18)add()选择所有的 span 元素和id为two的元素</span><br><span class="line">            $(&quot;#btn18&quot;).click(function()&#123;</span><br><span class="line">   </span><br><span class="line">               //   $(&quot;span,#two,.mini,#one&quot;)</span><br><span class="line">               $(&quot;span&quot;).add(&quot;#two&quot;).add(&quot;#one&quot;).css(&quot;background-color&quot;,&quot;#bfa&quot;);</span><br><span class="line">               </span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">         &#125;);</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">   &lt;/head&gt;</span><br><span class="line">   &lt;body&gt;    </span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;eq()选择索引值为等于 3 的 div 元素&quot; id=&quot;btn1&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;first()选择第一个 div 元素&quot; id=&quot;btn2&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;last()选择最后一个 div 元素&quot; id=&quot;btn3&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;filter()在div中选择索引为偶数的&quot; id=&quot;btn4&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;is()判断#one是否为:empty或:parent&quot; id=&quot;btn5&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;has()选择div中包含.mini的&quot; id=&quot;btn6&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;not()选择div中class不为one的&quot; id=&quot;btn7&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;children()在body中选择所有class为one的div子元素&quot; id=&quot;btn8&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;find()在body中选择所有class为mini的div后代元素&quot; id=&quot;btn9&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;next()#one的下一个div&quot; id=&quot;btn10&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;nextAll()#one后面所有的span元素&quot; id=&quot;btn11&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;nextUntil()#one和span之间的元素&quot; id=&quot;btn12&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;parent().mini的父元素&quot; id=&quot;btn13&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;prev()#two的上一个div&quot; id=&quot;btn14&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;prevAll()span前面所有的div&quot; id=&quot;btn15&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;prevUntil()span向前直到#one的元素&quot; id=&quot;btn16&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;siblings()#two的所有兄弟元素&quot; id=&quot;btn17&quot; /&gt;</span><br><span class="line">      &lt;input type=&quot;button&quot; value=&quot;add()选择所有的 span 元素和id为two的元素&quot; id=&quot;btn18&quot; /&gt;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      &lt;h3&gt;基本选择器.&lt;/h3&gt;</span><br><span class="line">      &lt;br /&gt;&lt;br /&gt;</span><br><span class="line">      文本框&lt;input type=&quot;text&quot; name=&quot;account&quot; disabled=&quot;disabled&quot; /&gt;</span><br><span class="line">      &lt;br&gt;&lt;br&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;one&quot;&gt;</span><br><span class="line">         id 为 one,class 为 one 的div</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot; id=&quot;two&quot; title=&quot;test&quot;&gt;</span><br><span class="line">         id为two,class为one,title为test的div</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;other&quot;&gt;&lt;b&gt;class为mini,title为other&lt;/b&gt;&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;test&quot;&gt;class为mini,title为test&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;one&quot;&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot;&gt;class为mini&lt;/div&gt;</span><br><span class="line">         &lt;div class=&quot;mini&quot; title=&quot;tesst&quot;&gt;class为mini,title为tesst&lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div style=&quot;display:none;&quot; class=&quot;none&quot;&gt;style的display为&quot;none&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;hide&quot;&gt;class为&quot;hide&quot;的div&lt;/div&gt;</span><br><span class="line">      &lt;span id=&quot;span1&quot;&gt;^^span元素 111^^&lt;/span&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">         包含input的type为&quot;hidden&quot;的div&lt;input type=&quot;hidden&quot; size=&quot;8&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;span id=&quot;span2&quot;&gt;^^span元素 222^^&lt;/span&gt;</span><br><span class="line">      &lt;div id=&quot;mover&quot;&gt;正在执行动画的div元素.&lt;/div&gt;</span><br><span class="line">   &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript</title>
      <link href="/2020/07/18/javascript/"/>
      <url>/2020/07/18/javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript-介绍"><a href="#JavaScript-介绍" class="headerlink" title="JavaScript 介绍"></a>JavaScript 介绍</h2><p>Javascript 语言诞生主要是完成页面的数据验证。因此它运行在客户端，需要运行浏览器来解析执行 JavaScript 代码。 </p><p>JS 是 Netscape 网景公司的产品，最早取名为 LiveScript;为了吸引更多 java 程序员。更名为 JavaScript。 </p><p>JS 是弱类型，Java 是强类型。 </p><p><strong>特点：</strong> </p><ol><li><p>交互性（它可以做的就是信息的动态交互） </p></li><li><p>安全性（不允许直接访问本地硬盘） </p></li><li><p>跨平台性（只要是可以解释 JS 的浏览器都可以执行，和平台无关）</p></li></ol><h2 id="JavaScript和-html-代码的结合方式"><a href="#JavaScript和-html-代码的结合方式" class="headerlink" title="JavaScript和 html 代码的结合方式"></a>JavaScript和 html 代码的结合方式</h2><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>只需要在 head 标签中，或者在 body 标签中， 使用 script 标签 来书写 JavaScript 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// alert是JavaScript语言提供的一个警告框函数。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 它可以接收任意类型的参数，这个参数就是警告框的提示信息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(<span class="string">&quot;黄皖爱你&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a><strong>第二种方式</strong></h3><p>使用 script 标签引入 单独的 JavaScript 代码文件</p><p>创建js文件：右击-&gt;new-&gt;JavaScript</p><p>html 代码内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        现在需要使用script引入外部的js文件来执行</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">            src 属性专门用来引入js文件路径（可以是相对路径，也可以是绝对路径）</span></span></span><br><span class="line"><span class="comment"><span class="language-xml"></span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        script标签可以用来定义js代码，也可以用来引入js文件</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        但是，两个功能二选一使用。不能同时使用两个功能</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&quot;皖哥现在可以飞了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><p>什么是变量？变量是可以存放某些值的内存的命名。 </p><p><strong>JavaScript 的变量类型：</strong> </p><p>数值类型： number </p><p>字符串类型： string </p><p>对象类型： object </p><p>布尔类型： boolean </p><p>函数类型： function </p><p><strong>JavaScript 里特殊的值：</strong> </p><p>undefined ： 未定义，所有 js 变量未赋于初始值的时候，默认值都是 undefined. </p><p>null ：空值 </p><p>NaN : 全称是：Not a Number。非数字。非数值。 </p><p><strong>JS 中的定义变量格式：</strong> </p><p><code>var 变量名;</code> </p><p><code>var 变量名 = 值;</code> </p><p><strong>示例代码：</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> i;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert(i); // undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        i = <span class="number">12</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// typeof()是JavaScript语言提供的一个函数。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( typeof(i) ); // number</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        i = <span class="string">&quot;abc&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 它可以取变量的数据类型返回</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( typeof(i) ); // String</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> a = <span class="number">12</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> b = <span class="string">&quot;abc&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>( a * b ); <span class="comment">// NaN是非数字，非数值。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>关系（比较）运算</strong> </p><p>等于： &#x3D;&#x3D;  等于是简单的做字面值的比较 </p><p>全等于： &#x3D;&#x3D;&#x3D; 除了做字面值的比较之外，还会比较两个变量的数据类型 </p><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> a = <span class="string">&quot;12&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> b = <span class="number">12</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>( a == b ); <span class="comment">// true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>( a === b ); <span class="comment">// false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a><strong>逻辑运算</strong></h2><p>且运算： &amp;&amp; </p><p>或运算： || </p><p>取反运算： ! </p><p><strong>注意：</strong>在 JavaScript 语言中，所有的变量，都可以做为一个 boolean 类型的变量去使用。 0 、null、 undefined、””(空串) 都认为是 false； </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">/*     在JavaScript语言中，所有的变量，都可以做为一个boolean类型的变量去使用。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        0 、null、 undefined、””(空串) 都认为是 false；*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var a = 0;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// if (a) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(&quot;零为真&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(&quot;零为假&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var b = null;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// if (b) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(&quot;null为真&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(&quot;null为假&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var c = undefined;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// if (c) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(&quot;undefined为真&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(&quot;undefined为假&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var d = &quot;&quot;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// if (d) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(&quot;空串为真&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     alert(&quot;空串为假&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">/*         &amp;&amp; 且运算。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">      有两种情况：</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">      第一种：当表达式全为真的时候。返回最后一个表达式的值。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">      第二种：当表达式中，有一个为假的时候。返回第一个为假的表达式的值*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> a = <span class="string">&quot;abc&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> b = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> d = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> c = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( a &amp;&amp; b );//true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//alert( b &amp;&amp; a );//abc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( a &amp;&amp; d ); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( a &amp;&amp; c ); // null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="comment">/*      || 或运算</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       第一种情况：当表达式全为假时，返回最后一个表达式的值</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">       第二种情况：只要有一个表达式为真。就会把回第一个为真的表达式的值*/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( d || c ); // null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( c|| d ); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( a || c ); //abc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( b || c ); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><p><strong>JS 中 数组的定义 格式：</strong></p><p>var 数组名 &#x3D; []; &#x2F;&#x2F; 空数组 </p><p>var 数组名 &#x3D; [1 , ’abc’ , true]; </p><p>&#x2F;&#x2F; 定义数组同时赋值元素 </p><p><strong>示例代码：</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> arr = []; <span class="comment">// 定义一个空数组</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">//  alert( arr.length ); // 0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        arr[<span class="number">0</span>] = <span class="number">12</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( arr[0] );//12</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//  alert( arr.length ); // 1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// javaScript语言中的数组，只要我们通过数组下标赋值，那么最大的下标值，就会自动的给数组做扩容操作。</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        arr[<span class="number">2</span>] = <span class="string">&quot;abc&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//  alert(arr.length); //3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert(arr[1]);// undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 数组的遍历</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(arr[i]);<span class="comment">//12 undefined abc</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>函数的二种定义方式：</strong></p><h3 id="第一种"><a href="#第一种" class="headerlink" title="**第一种"></a>**第一种</h3><p>可以使用** <strong>function</strong> <strong>关键字来定义函数。</strong> </p><p><strong>使用的格式如下:</strong> </p><p><code>function 函数名(形参列表)&#123;</code> </p><p><code>函数体</code> </p><p><code>&#125;</code></p><p><code>在</code> JavaScript 语言中，如何定义带有返回值的函数？ </p><p>只需要在函数体内直接使用 return 语句返回值即可！ </p><p><strong>示例代码：</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 定义一个无参函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;无参函数fun()被调用了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 函数调用===才会执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//  fun();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params">a ,b</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;有参函数fun2()被调用了 a=&gt;&quot;</span> + a + <span class="string">&quot;,b=&gt;&quot;</span>+b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">//  fun2(12,&quot;abc&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 定义带有返回值的函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1,num2</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> result = num1 + num2;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> result;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>( <span class="title function_">sum</span>(<span class="number">100</span>,<span class="number">50</span>) );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h3><p>使用格式如下： </p><p>var 函数名 &#x3D; function(形参列表) { 函数体 } </p><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;无参函数&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fun();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> fun2 = <span class="keyword">function</span> (<span class="params">a,b</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;有参函数a=&quot;</span> + a + <span class="string">&quot;,b=&quot;</span> + b);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// fun2(1,2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> fun3 = <span class="keyword">function</span> (<span class="params">num1,num2</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> num1 + num2;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>( <span class="title function_">fun3</span>(<span class="number">100</span>,<span class="number">200</span>) );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>注：</strong>在 Java 中函数允许重载。但是在 JS 中函数的重载会直接覆盖掉上一次的定义</p><h3 id="函数的-arguments-隐形参数（只在-function-函数内）"><a href="#函数的-arguments-隐形参数（只在-function-函数内）" class="headerlink" title="函数的 arguments 隐形参数（只在 function 函数内）"></a><strong>函数的</strong> <strong>arguments</strong> <strong>隐形参数（只在</strong> <strong>function</strong> <strong>函数内）</strong></h3><p>就是在 function 函数中不需要定义，但却可以直接用来获取所有参数的变量。我们管它叫隐形参数。 </p><p>隐形参数特别像 java 基础的可变长参数一样。 </p><p>public void fun( Object … args ); </p><p>可变长参数其他是一个数组。 </p><p>那么 js 中的隐形参数也跟 java 的可变长参数一样。操作类似数组。</p><p><strong>示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>( <span class="variable language_">arguments</span>.<span class="property">length</span> );<span class="comment">//可看参数个数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>( <span class="variable language_">arguments</span>[<span class="number">0</span>] );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>( <span class="variable language_">arguments</span>[<span class="number">1</span>] );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>( <span class="variable language_">arguments</span>[<span class="number">2</span>] );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;a = &quot;</span> + a);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>( <span class="variable language_">arguments</span>[i] );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;无参函数fun()&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">         <span class="title function_">fun</span>(<span class="number">1</span>,<span class="string">&quot;ad&quot;</span>,<span class="literal">true</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 需求：要求 编写 一个函数。用于计算所有参数相加的和并返回</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1,num2</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> result = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">if</span> (<span class="title function_">typeof</span>(<span class="variable language_">arguments</span>[i]) == <span class="string">&quot;number&quot;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    result += <span class="variable language_">arguments</span>[i];</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> result;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>( <span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;abc&quot;</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>) );</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="JS-中的自定义对象"><a href="#JS-中的自定义对象" class="headerlink" title="JS 中的自定义对象"></a><strong>JS</strong> 中的自定义对象</h2><h3 id="Object-形式的自定义对象"><a href="#Object-形式的自定义对象" class="headerlink" title="Object 形式的自定义对象"></a><strong>Object</strong> <strong>形式的自定义对象</strong></h3><h3 id="对象的定义："><a href="#对象的定义：" class="headerlink" title="对象的定义："></a>对象的定义：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象实例（空对象）</span></span><br><span class="line"></span><br><span class="line">变量名.属性名 = 值;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个属性</span></span><br><span class="line"></span><br><span class="line">变量名.函数名 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 定义一个函数</span></span><br><span class="line"></span><br><span class="line">对象的访问：</span><br><span class="line"></span><br><span class="line">变量名.属性 / 函数名(); </span><br></pre></td></tr></table></figure><p><strong>示例代码：</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 对象的定义：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     var 变量名 = new Object();   // 对象实例（空对象）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     变量名.属性名 = 值;         // 定义一个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     变量名.函数名 = function()&#123;&#125;  // 定义一个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="property">name</span> = <span class="string">&quot;华仔&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="property">age</span> = <span class="number">18</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="property">fun</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; , 年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 对象的访问：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     变量名.属性 / 函数名();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// alert( obj.age );</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="title function_">fun</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="花括号形式的自定义"><a href="#花括号形式的自定义" class="headerlink" title="{}花括号形式的自定义"></a>{}花括号形式的自定义</h3><p><strong>对象的定义：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = &#123; <span class="comment">// 空对象</span></span><br><span class="line">属性名：值, <span class="comment">// 定义一个属性 属性名：</span></span><br><span class="line">值, <span class="comment">// 定义一个属性 函</span></span><br><span class="line">数名：<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="comment">// 定义一个函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">对象的访问： 变量名.属性 / 函数名();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 对象的定义：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// var 变量名 = &#123;       // 空对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     属性名：值,        // 定义一个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     属性名：值,        // 定义一个属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     函数名：function()&#123;&#125;    // 定义一个函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">name</span>:<span class="string">&quot;皖哥&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">age</span>:<span class="number">18</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                fun : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&quot;姓名：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; , 年龄：&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 对象的访问：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//     变量名.属性 / 函数名();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(obj.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(obj.<span class="property">age</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        obj.<span class="title function_">fun</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="js-中的事件"><a href="#js-中的事件" class="headerlink" title="js 中的事件"></a><strong>js</strong> <strong>中的事件</strong></h2><p>什么是事件？事件是电脑输入设备与页面进行交互的响应。我们称之为事件。 </p><p><strong>常用的事件：</strong> </p><p>onload 加载完成事件： 页面加载完成之后，常用于做页面 js 代码初始化操作 </p><p>onclick 单击事件： 常用于按钮的点击响应操作。 </p><p>onblur 失去焦点事件： 常用用于输入框失去焦点后验证其输入内容是否合法。 </p><p>onchange 内容发生改变事件： 常用于下拉列表和输入框内容发生改变后操作 </p><p>onsubmit 表单提交事件： 常用于表单提交前，验证所有表单项是否合法。 </p><p><strong>事件的注册又分为静态注册和动态注册两种：</strong> </p><p>什么是事件的注册（绑定）？ </p><p>其实就是告诉浏览器，当事件响应后要执行哪些操作代码，叫事件注册或事件绑定。 </p><p><strong>静态注册事件：</strong>通过 html 标签的事件属性直接赋于事件响应后的代码，这种方式我们叫静态注册。 </p><p><strong>动态注册事件：</strong>是指先通过 js 代码得到标签的 dom 对象，然后再通过 dom 对象.事件名 &#x3D; function(){} 这种形式赋于事件 响应后的代码，叫动态注册。 </p><p><strong>动态注册基本步骤：</strong> </p><p>1、获取标签对象 </p><p>2、标签对象.事件名 &#x3D; fucntion(){} </p><h3 id="onload-加载完成事件"><a href="#onload-加载完成事件" class="headerlink" title="onload 加载完成事件"></a><strong>onload</strong> <strong>加载完成事件</strong></h3><p><strong>示例代码：</strong> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        // onload事件的方法</span><br><span class="line">        function onloadFun() &#123;</span><br><span class="line">           // alert(&quot;静态注册onload事件，所有代码&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // onload事件动态注册。是固定写法</span><br><span class="line">       window.onload=function () &#123;</span><br><span class="line">            alert(&quot;动态注册onload事件，所有代码&quot;);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;!--静态注册onload事件</span><br><span class="line">        onload事件是浏览器解析完页面之后就会自动触发的事件</span><br><span class="line">       &lt;body onload=&quot;onloadFun();&quot;&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>静态注册onload事件，是写在body里面的，也就是（ <body onload="onloadFun();">）</p><h3 id="onclick-单击事件"><a href="#onclick-单击事件" class="headerlink" title="onclick 单击事件"></a><strong>onclick</strong> <strong>单击事件</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">onclickFun</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册onclick事件&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 动态注册onclick事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 1 获取标签对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">/*</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            * document 是JavaScript语言提供的一个对象（文档）&lt;br/&gt;</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            * get           获取</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            * Element       元素（就是标签）</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            * By            通过。。   由。。经。。。</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            * Id            id属性</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            *</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            * getElementById通过id属性获取标签对象</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            **/</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> btnObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// alert( btnObj );</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            btnObj.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&quot;动态注册的onclick事件&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--静态注册onClick事件--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;onclickFun();&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong>静态通过在标签里面引用函数名，动态是id</p><h3 id="onblur-失去焦点事件"><a href="#onblur-失去焦点事件" class="headerlink" title="onblur 失去焦点事件"></a><strong>onblur</strong> <strong>失去焦点事件</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        // 静态注册失去焦点事件</span><br><span class="line">        function onblurFun() &#123;</span><br><span class="line">            // console是控制台对象，是由JavaScript语言提供，专门用来向浏览器的控制器打印输出， 用于测试使用</span><br><span class="line">            // log() 是打印的方法</span><br><span class="line">            console.log(&quot;静态注册失去焦点事件&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 动态注册 onblur事件</span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line">            //1 获取标签对象</span><br><span class="line">           var passwordObj = document.getElementById(&quot;password&quot;);</span><br><span class="line">           // alert(passwordObj);</span><br><span class="line">            //2 通过标签对象.事件名 = function()&#123;&#125;;</span><br><span class="line">            passwordObj.onblur = function () &#123;</span><br><span class="line">                console.log(&quot;动态注册失去焦点事件&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名:&lt;input type=&quot;text&quot; onblur=&quot;onblurFun();&quot;&gt;&lt;br/&gt;</span><br><span class="line">    密码:&lt;input id=&quot;password&quot; type=&quot;text&quot; &gt;&lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>这里需要在浏览器里面按F12来看，就会发现。</p><h3 id="onchange-内容发生改变事件"><a href="#onchange-内容发生改变事件" class="headerlink" title="onchange 内容发生改变事件"></a><strong>onchange</strong> <strong>内容发生改变事件</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">onchangeFun</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;女神已经改变了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//1 获取标签对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> selObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sel01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// alert( selObj );</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            selObj.<span class="property">onchange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&quot;男神已经改变了&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    请选择你心中的女神：</span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--静态注册onchange事件--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">onchange</span>=<span class="string">&quot;onchangeFun();&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--女神--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>芳芳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>佳佳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>娘娘<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    请选择你心中的男神：</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;sel01&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>--男神--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>皖哥<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>华仔<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>富城<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="onsubmit-表单提交事件"><a href="#onsubmit-表单提交事件" class="headerlink" title="onsubmit 表单提交事件"></a><strong>onsubmit</strong> <strong>表单提交事件</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> &gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 静态注册表单提交事务</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">function</span> <span class="title function_">onsubmitFun</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 要验证所有表单项是否合法，如果，有一个不合法就阻止表单提交</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&quot;静态注册表单提交事件----发现不合法&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//1 获取标签对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> formObj = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;form01&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//2 通过标签对象.事件名 = function()&#123;&#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            formObj.<span class="property">onsubmit</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 要验证所有表单项是否合法，如果，有一个不合法就阻止表单提交</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">alert</span>(<span class="string">&quot;动态注册表单提交事件----发现不合法&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--return false 可以阻止 表单提交 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return onsubmitFun();&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;静态注册&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:8080&quot;</span> <span class="attr">id</span>=<span class="string">&quot;form01&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;动态注册&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>细节：</strong>这里静态提交的时候，如果出错，不让他跳转页面，注意因为是函数体里面false，而form里面应该是返回函数名，加return 函数名。</p><h2 id="DOM-模型"><a href="#DOM-模型" class="headerlink" title="DOM 模型"></a><strong>DOM</strong> <strong>模型</strong></h2><p>DOM 全称是 Document Object Model 文档对象模型 </p><p>大白话，就是把文档中的标签，属性，文本，转换成为对象来管理。 </p><p>那么 它们是如何实现把标签，属性，文本转换成为对象来管理呢。这就是我们马上要学习的重点。 </p><h3 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h3><p><img src="https://s1.ax1x.com/2020/07/18/U2GJD1.png" alt="image-20200718213114380"></p><p><strong>Document</strong> <strong>对象的理解：</strong> </p><p><strong>第一点：</strong>Document 它管理了所有的 HTML 文档内容。</p><p><strong>第二点：</strong>document 它是一种树结构的文档。有层级关系。</p><p><strong>第三点：</strong>它让我们把所有的标签 都 对象化 </p><p><strong>第四点：</strong>我们可以通过 document 访问所有的标签对象</p><p><strong>Document 对象中的方法介绍</strong></p><p><strong>document.getElementById(elementId)</strong> </p><p>通过标签的 id 属性查找标签 dom 对象，elementId 是标签的 id 属性值 </p><p><strong>document.getElementsByName(elementName)</strong> </p><p>通过标签的 name 属性查找标签 dom 对象，elementName 标签的 name 属性值 </p><p><strong>document.getElementsByTagName(tagname)</strong> </p><p>通过标签名查找标签 dom 对象。tagname 是标签名 </p><p><strong>document.createElement( tagName)</strong> </p><p>方法，通过给定的标签名，创建一个标签对象。tagName 是要创建的标签名 </p><p><strong>注：</strong></p><p>document 对象的三个查询方法，如果有 id 属性，优先使用 <strong>getElementById</strong> 方法来进行查询 </p><p>如果没有 id 属性，则优先使用 <strong>getElementsByName</strong> 方法来进行查询 </p><p>如果 id 属性和 name 属性都没有最后再按标签名查 <strong>getElementsByTagName</strong> </p><p>以上三个方法，一定要在页面加载完成之后执行，才能查询到标签对象。</p><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById"></a><strong>getElementById</strong></h3><p><strong>方法示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line">        /*</span><br><span class="line">        * 需求：当用户点击了较验按钮，要获取输出框中的内容。然后验证其是否合法。&lt;br/&gt;</span><br><span class="line">        * 验证的规则是：必须由字母，数字。下划线组成。并且长度是5到12位。</span><br><span class="line">        * */</span><br><span class="line">        function onclickFun() &#123;</span><br><span class="line">            // 1 当我们要操作一个标签的时候，一定要先获取这个标签对象。</span><br><span class="line">            var usernameObj = document.getElementById(&quot;username&quot;);</span><br><span class="line">            // [object HTMLInputElement] 它就是dom对象</span><br><span class="line">            var usernameText = usernameObj.value;</span><br><span class="line">            // 如何 验证 字符串，符合某个规则 ，需要使用正则表达式技术</span><br><span class="line">            var patt = /^\w&#123;5,12&#125;$/;</span><br><span class="line">            /*</span><br><span class="line">            *  test()方法用于测试某个字符串，是不是匹配我的规则 ，</span><br><span class="line">            *  匹配就返回true。不匹配就返回false.</span><br><span class="line">            * */</span><br><span class="line"></span><br><span class="line">            var usernameSpanObj = document.getElementById(&quot;usernameSpan&quot;);</span><br><span class="line">            // innerHTML 表示起始标签和结束标签中的内容</span><br><span class="line">            // innerHTML 这个属性可读，可写</span><br><span class="line">           //usernameSpanObj.innerHTML = &quot;国哥真可爱！&quot;;</span><br><span class="line"></span><br><span class="line">            if (patt.test(usernameText)) &#123;</span><br><span class="line">                // alert(&quot;用户名合法！&quot;);</span><br><span class="line">                // usernameSpanObj.innerHTML = &quot;用户名合法！&quot;;</span><br><span class="line">                usernameSpanObj.innerHTML = &quot;&lt;img src=\&quot;right.png\&quot; width=\&quot;18\&quot; height=\&quot;18\&quot;&gt;&quot;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // alert(&quot;用户名不合法！&quot;);</span><br><span class="line">                // usernameSpanObj.innerHTML = &quot;用户名不合法！&quot;;</span><br><span class="line">                usernameSpanObj.innerHTML = &quot;&lt;img src=\&quot;wrong.png\&quot; width=\&quot;18\&quot; height=\&quot;18\&quot;&gt;&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    用户名：&lt;input type=&quot;text&quot; id=&quot;username&quot; value=&quot;wzg&quot;/&gt;</span><br><span class="line">    &lt;span id=&quot;usernameSpan&quot; style=&quot;color:red;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;button onclick=&quot;onclickFun()&quot;&gt;较验&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>这里插入了图片</p><h3 id="getElementsByName"><a href="#getElementsByName" class="headerlink" title="getElementsByName"></a><strong>getElementsByName</strong></h3><p><strong>方法示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        // 全选</span><br><span class="line">        function checkAll() &#123;</span><br><span class="line">            // 让所有复选框都选中</span><br><span class="line">            // document.getElementsByName();是根据 指定的name属性查询返回多个标签对象集合</span><br><span class="line">            // 这个集合的操作跟数组 一样</span><br><span class="line">            // 集合中每个元素都是dom对象</span><br><span class="line">            // 这个集合中的元素顺序是他们在html页面中从上到下的顺序</span><br><span class="line">            var hobbies = document.getElementsByName(&quot;hobby&quot;);</span><br><span class="line">            // checked表示复选框的选中状态。如果选中是true，不选中是false</span><br><span class="line">            // checked 这个属性可读，可写</span><br><span class="line">            for (var i = 0; i &lt; hobbies.length; i++)&#123;</span><br><span class="line">                hobbies[i].checked = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //全不选</span><br><span class="line">        function checkNo() &#123;</span><br><span class="line"></span><br><span class="line">            var hobbies = document.getElementsByName(&quot;hobby&quot;);</span><br><span class="line">            // checked表示复选框的选中状态。如果选中是true，不选中是false</span><br><span class="line">            // checked 这个属性可读，可写</span><br><span class="line">            for (var i = 0; i &lt; hobbies.length; i++)&#123;</span><br><span class="line">                hobbies[i].checked = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 反选</span><br><span class="line">        function checkReverse() &#123;</span><br><span class="line">            var hobbies = document.getElementsByName(&quot;hobby&quot;);</span><br><span class="line"></span><br><span class="line">            for (var i = 0; i &lt; hobbies.length; i++) &#123;</span><br><span class="line">                hobbies[i].checked = !hobbies[i].checked;</span><br><span class="line"></span><br><span class="line">                // if (hobbies[i].checked) &#123;</span><br><span class="line">                //     hobbies[i].checked = false;</span><br><span class="line">                // &#125;else &#123;</span><br><span class="line">                //     hobbies[i].checked = true;</span><br><span class="line">                // &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    兴趣爱好：</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;cpp&quot; checked=&quot;checked&quot;&gt;C++</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;java&quot;&gt;Java</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; value=&quot;js&quot;&gt;JavaScript</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;button onclick=&quot;checkAll()&quot;&gt;全选&lt;/button&gt;</span><br><span class="line">    &lt;button onclick=&quot;checkNo()&quot;&gt;全不选&lt;/button&gt;</span><br><span class="line">    &lt;button onclick=&quot;checkReverse()&quot;&gt;反选&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName"></a><strong>getElementsByTagName</strong></h3><p><strong>方法示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        window.onload = function()&#123;</span><br><span class="line">            // alert( document.getElementById(&quot;btn01&quot;) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 全选</span><br><span class="line">        function checkAll() &#123;</span><br><span class="line">            alert( document.getElementById(&quot;btn01&quot;) );</span><br><span class="line">            // document.getElementsByTagName(&quot;input&quot;);</span><br><span class="line">            // 是按照指定标签名来进行查询并返回集合</span><br><span class="line">            // 这个集合的操作跟数组 一样</span><br><span class="line">            // 集合中都是dom对象</span><br><span class="line">            // 集合中元素顺序 是他们在html页面中从上到下的顺序。</span><br><span class="line">            var inputs = document.getElementsByTagName(&quot;input&quot;);</span><br><span class="line"></span><br><span class="line">            for (var i = 0; i &lt; inputs.length; i++)&#123;</span><br><span class="line">                inputs[i].checked = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--as --&gt;</span><br><span class="line">    兴趣爱好：</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; value=&quot;cpp&quot; checked=&quot;checked&quot;&gt;C++</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; value=&quot;java&quot;&gt;Java</span><br><span class="line">    &lt;input type=&quot;checkbox&quot; value=&quot;js&quot;&gt;JavaScript</span><br><span class="line">    &lt;br/&gt;</span><br><span class="line">    &lt;button id=&quot;btn01&quot; onclick=&quot;checkAll()&quot;&gt;全选&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>细节：  alert( document.getElementById(“btn01”) );得写在里面，因为最后执行</p><h3 id="createElement"><a href="#createElement" class="headerlink" title="createElement"></a><strong>createElement</strong></h3><p><strong>方法示例代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 现在需要我们使用js代码来创建html标签，并显示在页面上</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 标签的内容就是：&lt;div&gt;皖哥，我爱你&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> divObj = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>); <span class="comment">// 在内存中 &lt;div&gt;&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">var</span> textNodeObj = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;皖哥，我爱你&quot;</span>); <span class="comment">// 有一个文本节点对象 #国哥，我爱你</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            divObj.<span class="title function_">appendChild</span>(textNodeObj); <span class="comment">// &lt;div&gt;皖哥，我爱你&lt;/div&gt;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// divObj.innerHTML = &quot;皖哥，我爱你&quot;; // &lt;div&gt;皖哥，我爱你&lt;/div&gt;,但，还只是在内存中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">// 添加子元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(divObj);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="节点的常用属性和方法"><a href="#节点的常用属性和方法" class="headerlink" title="节点的常用属性和方法"></a><strong>节点的常用属性和方法</strong></h2><p>节点就是标签对象<strong>方法：</strong> </p><p>通过具体的元素节点调用</p><p>  getElementsByTagName() 方法，获取当前节点的指定标签名孩子节点 </p><p>appendChild( oChildNode ) 方法，可以添加一个子节点，oChildNode 是要添加的孩子节点 </p><p><strong>属性：</strong> </p><p>childNodes ：属性，获取当前节点的所有子节点 </p><p>firstChild ：属性，获取当前节点的第一个子节点 </p><p>lastChild ：属性，获取当前节点的最后一个子节点 </p><p>parentNode ：属性，获取当前节点的父节点 </p><p>nextSibling ：属性，获取当前节点的下一个节点 </p><p>previousSibling :属性，获取当前节点的上一个节点 </p><p>className :用于获取或设置标签的 class 属性值 </p><p>innerHTML :属性，表示获取&#x2F;设置起始标签和结束标签中的内容 </p><p>innerText :属性，表示获取&#x2F;设置起始标签和结束标签中的文本 </p><h3 id="DOM-查询练习"><a href="#DOM-查询练习" class="headerlink" title="DOM 查询练习"></a><strong>DOM</strong> <strong>查询练习</strong></h3><p><strong>css文件代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">@<span class="variable constant_">CHARSET</span> <span class="string">&quot;UTF-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">   <span class="attr">width</span>: 800px;</span><br><span class="line">   margin-<span class="attr">left</span>: auto;</span><br><span class="line">   margin-<span class="attr">right</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">button &#123;</span><br><span class="line">   <span class="attr">width</span>: 300px;</span><br><span class="line">   margin-<span class="attr">bottom</span>: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#btnList &#123;</span><br><span class="line">   <span class="attr">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#total&#123;</span><br><span class="line">   <span class="attr">width</span>: 450px;</span><br><span class="line">   <span class="attr">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ul&#123;</span><br><span class="line">   list-style-<span class="attr">type</span>: none;</span><br><span class="line">   <span class="attr">margin</span>: 0px;</span><br><span class="line">   <span class="attr">padding</span>: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">inner</span> li&#123;</span><br><span class="line">   border-<span class="attr">style</span>: solid;</span><br><span class="line">   border-<span class="attr">width</span>: 1px;</span><br><span class="line">   <span class="attr">padding</span>: 5px;</span><br><span class="line">   <span class="attr">margin</span>: 5px;</span><br><span class="line">   background-<span class="attr">color</span>: #99ff99;</span><br><span class="line">   <span class="attr">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.<span class="property">inner</span>&#123;</span><br><span class="line">   <span class="attr">width</span>:400px;</span><br><span class="line">   border-<span class="attr">style</span>: solid;</span><br><span class="line">   border-<span class="attr">width</span>: 1px;</span><br><span class="line">   margin-<span class="attr">bottom</span>: 10px;</span><br><span class="line">   <span class="attr">padding</span>: 10px;</span><br><span class="line">   <span class="attr">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>js查询代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;dom查询&lt;/title&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;style/css.css&quot; /&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   window.onload = function()&#123;</span><br><span class="line">      //1.查找#bj节点</span><br><span class="line">      document.getElementById(&quot;btn01&quot;).onclick = function () &#123;</span><br><span class="line">         var bjObj = document.getElementById(&quot;bj&quot;);</span><br><span class="line">         alert(bjObj.innerHTML);</span><br><span class="line">      &#125;</span><br><span class="line">      //2.查找所有li节点</span><br><span class="line">      var btn02Ele = document.getElementById(&quot;btn02&quot;);</span><br><span class="line">      btn02Ele.onclick = function()&#123;</span><br><span class="line">         var lis = document.getElementsByTagName(&quot;li&quot;);</span><br><span class="line">         alert(lis.length)</span><br><span class="line">      &#125;;</span><br><span class="line">      //3.查找name=gender的所有节点</span><br><span class="line">      var btn03Ele = document.getElementById(&quot;btn03&quot;);</span><br><span class="line">      btn03Ele.onclick = function()&#123;</span><br><span class="line">         var genders = document.getElementsByName(&quot;gender&quot;);</span><br><span class="line">         alert(genders.length)</span><br><span class="line">      &#125;;</span><br><span class="line">      //4.查找#city下所有li节点</span><br><span class="line">      var btn04Ele = document.getElementById(&quot;btn04&quot;);</span><br><span class="line">      btn04Ele.onclick = function()&#123;</span><br><span class="line">         //1 获取id为city的节点</span><br><span class="line">         //2 通过city节点.getElementsByTagName按标签名查子节点</span><br><span class="line">         var lis = document.getElementById(&quot;city&quot;).getElementsByTagName(&quot;li&quot;);</span><br><span class="line">         alert(lis.length)</span><br><span class="line">      &#125;;</span><br><span class="line">      //5.返回#city的所有子节点</span><br><span class="line">      var btn05Ele = document.getElementById(&quot;btn05&quot;);</span><br><span class="line">      btn05Ele.onclick = function()&#123;</span><br><span class="line">         //1 获取id为city的节点</span><br><span class="line">         //2 通过city获取所有子节点</span><br><span class="line">         alert(document.getElementById(&quot;city&quot;).childNodes.length);</span><br><span class="line">      &#125;;</span><br><span class="line">      //6.返回#phone的第一个子节点</span><br><span class="line">      var btn06Ele = document.getElementById(&quot;btn06&quot;);</span><br><span class="line">      btn06Ele.onclick = function()&#123;</span><br><span class="line">         // 查询id为phone的节点</span><br><span class="line">         alert( document.getElementById(&quot;phone&quot;).firstChild.innerHTML );</span><br><span class="line">      &#125;;</span><br><span class="line">      //7.返回#bj的父节点</span><br><span class="line">      var btn07Ele = document.getElementById(&quot;btn07&quot;);</span><br><span class="line">      btn07Ele.onclick = function()&#123;</span><br><span class="line">         //1 查询id为bj的节点</span><br><span class="line">         var bjObj = document.getElementById(&quot;bj&quot;);</span><br><span class="line">         //2 bj节点获取父节点</span><br><span class="line">         alert( bjObj.parentNode.innerHTML );</span><br><span class="line">      &#125;;</span><br><span class="line">      //8.返回#android的前一个兄弟节点</span><br><span class="line">      var btn08Ele = document.getElementById(&quot;btn08&quot;);</span><br><span class="line">      btn08Ele.onclick = function()&#123;</span><br><span class="line">         // 获取id为android的节点</span><br><span class="line">         // 通过android节点获取前面兄弟节点</span><br><span class="line">         alert( document.getElementById(&quot;android&quot;).previousSibling.innerHTML );</span><br><span class="line">      &#125;;</span><br><span class="line">      //9.读取#username的value属性值</span><br><span class="line">      var btn09Ele = document.getElementById(&quot;btn09&quot;);</span><br><span class="line">      btn09Ele.onclick = function()&#123;</span><br><span class="line">         alert(document.getElementById(&quot;username&quot;).value);</span><br><span class="line">      &#125;;</span><br><span class="line">      //10.设置#username的value属性值</span><br><span class="line">      var btn10Ele = document.getElementById(&quot;btn10&quot;);</span><br><span class="line">      btn10Ele.onclick = function()&#123;</span><br><span class="line">         document.getElementById(&quot;username&quot;).value = &quot;国哥你真牛逼&quot;;</span><br><span class="line">      &#125;;</span><br><span class="line">      //11.返回#bj的文本值</span><br><span class="line">      var btn11Ele = document.getElementById(&quot;btn11&quot;);</span><br><span class="line">      btn11Ele.onclick = function()&#123;</span><br><span class="line">         alert(document.getElementById(&quot;city&quot;).innerHTML);</span><br><span class="line">         // alert(document.getElementById(&quot;city&quot;).innerText);</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;total&quot;&gt;</span><br><span class="line">   &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">         你喜欢哪个城市?</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul id=&quot;city&quot;&gt;</span><br><span class="line">         &lt;li id=&quot;bj&quot;&gt;北京&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;上海&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;东京&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;首尔&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;</span><br><span class="line">         你喜欢哪款单机游戏?</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul id=&quot;game&quot;&gt;</span><br><span class="line">         &lt;li id=&quot;rl&quot;&gt;红警&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;实况&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;极品飞车&lt;/li&gt;</span><br><span class="line">         &lt;li&gt;魔兽&lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;br /&gt;</span><br><span class="line">      &lt;br /&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;</span><br><span class="line">         你手机的操作系统是?</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;ul id=&quot;phone&quot;&gt;&lt;li&gt;IOS&lt;/li&gt;&lt;li id=&quot;android&quot;&gt;Android&lt;/li&gt;&lt;li&gt;Windows Phone&lt;/li&gt;&lt;/ul&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=&quot;inner&quot;&gt;</span><br><span class="line">      gender:</span><br><span class="line">      &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;male&quot;/&gt;</span><br><span class="line">      Male</span><br><span class="line">      &lt;input type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;female&quot;/&gt;</span><br><span class="line">      Female</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      &lt;br&gt;</span><br><span class="line">      name:</span><br><span class="line">      &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;username&quot; value=&quot;abcde&quot;/&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;btnList&quot;&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn01&quot;&gt;查找#bj节点&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn02&quot;&gt;查找所有li节点&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn03&quot;&gt;查找name=gender的所有节点&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn04&quot;&gt;查找#city下所有li节点&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn05&quot;&gt;返回#city的所有子节点&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn06&quot;&gt;返回#phone的第一个子节点&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn07&quot;&gt;返回#bj的父节点&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn08&quot;&gt;返回#android的前一个兄弟节点&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn09&quot;&gt;返回#username的value属性值&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn10&quot;&gt;设置#username的value属性值&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">   &lt;div&gt;&lt;button id=&quot;btn11&quot;&gt;返回#bj的文本值&lt;/button&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html/css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC~黑马笔记</title>
      <link href="/2020/07/16/JDBC~%E9%BB%91%E9%A9%AC%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/07/16/JDBC~%E9%BB%91%E9%A9%AC%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h2><p>Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库</p><h3 id="JDBC本质："><a href="#JDBC本质：" class="headerlink" title="JDBC本质："></a>JDBC本质：</h3><p>​       其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p><h2 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h2><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar<br>1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下<br>2.右键–&gt;Add As Library</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql</li><li>获取执行sql语句的对象 Statement</li><li>执行sql，接受返回结果</li><li>处理结果</li><li>释放资源</li></ol><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. DriverManager:驱动管理对象</span></span><br><span class="line"><span class="comment"> * * 功能：</span></span><br><span class="line"><span class="comment"> * 1.注册驱动</span></span><br><span class="line"><span class="comment"> * 2. Connection：数据库连接对象</span></span><br><span class="line"><span class="comment"> * 3. Statement：执行sql的对象</span></span><br><span class="line"><span class="comment"> * 4. ResultSet：结果集对象</span></span><br><span class="line"><span class="comment"> * 5. PreparedStatement:执行sql的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * JDBC快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 1.导入驱动jar包</span></span><br><span class="line">        <span class="comment">// 2.注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="comment">// 3.获取数据库连接对象</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">coon</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jk2010&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;hw205683&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.定义sql操作语句</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set upassword=199 where uid=1&quot;</span>;</span><br><span class="line">        <span class="comment">// 5.获取执行sql的对象， Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> coon.createStatement();</span><br><span class="line">        <span class="comment">// 6.执行sql</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql); <span class="comment">//count执行次数</span></span><br><span class="line">        <span class="comment">// 7.处理结果</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="comment">// 8.释放资源</span></span><br><span class="line">        stmt.close();</span><br><span class="line">        coon.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="详解各个对象："><a href="#详解各个对象：" class="headerlink" title="详解各个对象："></a>详解各个对象：</h2><h3 id="DriverManager：驱动管理对象"><a href="#DriverManager：驱动管理对象" class="headerlink" title="DriverManager：驱动管理对象"></a>DriverManager：驱动管理对象</h3><p><strong>功能</strong></p><p>🌂注册驱动：告诉程序该使用哪一个数据库驱动jar</p><p>​<strong>注意：</strong>mysql5之后的驱动jar包可以省略注册驱动的步骤。</p><p>🌂🌂获取数据库连接：</p><ul><li>方法：static Connection getConnection(String url, String user, String password) <ul><li>参数：<ul><li>url：指定连接的路径<ul><li>语法：jdbc:mysql:&#x2F;&#x2F;ip地址(域名):端口号&#x2F;数据库名称<ul><li>例子：jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;jk2010</li><li>细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:&#x2F;&#x2F;&#x2F;数据库名称</li></ul></li><li>user：用户名</li><li>password：密码</li></ul></li></ul></li></ul></li></ul><h3 id="Connection：数据库连接对象"><a href="#Connection：数据库连接对象" class="headerlink" title="Connection：数据库连接对象"></a>Connection：数据库连接对象</h3><p><strong>功能</strong></p><ol><li><p>获取执行sql 的对象</p><ul><li><p>Statement createStatement()</p></li><li><p>PreparedStatement prepareStatement(String sql)  </p><p><strong>管理事务：</strong></p></li><li><p>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务</p></li><li><p>提交事务：commit() </p></li><li><p>回滚事务：rollback()</p></li></ul></li></ol><h3 id="Statement：执行sql的对象"><a href="#Statement：执行sql的对象" class="headerlink" title="Statement：执行sql的对象"></a>Statement：执行sql的对象</h3><ol><li><strong>执行sql</strong><ol><li>boolean execute(String sql) ：可以执行任意的sql 了解 </li><li>int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句<ul><li>返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值&gt;0的则执行成功，反之，则失败。</li></ul></li><li>ResultSet executeQuery(String sql)  ：执行DQL（select)语句</li></ol></li><li><strong>练习：</strong><ol><li>account表 添加一条记录</li><li>account表 修改记录</li><li>account表 删除一条记录</li></ol></li></ol><p></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * user表 添加一记录 insert语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into user values(null ,&#x27;hw&#x27;,1999)&quot;</span>;</span><br><span class="line">            <span class="comment">// 3.获取connection对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jk2010&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;hw205683&quot;</span>);</span><br><span class="line">            <span class="comment">// 4.获取执行sql的对象 Statement</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">// 5.执行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql); <span class="comment">//影响行数</span></span><br><span class="line">            <span class="comment">//处理结果</span></span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//stmt.close();</span></span><br><span class="line">            <span class="comment">// 7.释放资源</span></span><br><span class="line">            <span class="comment">//避免空指针异常</span></span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * user表 修改记录</span><br><span class="line"> */</span><br><span class="line">public class JdbcDemo03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        Statement stmt = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 1.注册驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">            // 2.获取连接对象</span><br><span class="line">            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/jk2010&quot;, &quot;root&quot;, &quot;hw205683&quot;);</span><br><span class="line">            // 3.定义sql</span><br><span class="line">            String sql = &quot;update  user set upassword=22 where uid=4&quot;;</span><br><span class="line">            // 4.获取sql对象</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            //执 5.行sql</span><br><span class="line">            int count = stmt.executeUpdate(sql);</span><br><span class="line">            // 6.处理结果</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            if (count &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;修改成功&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;修改失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //释放资源</span><br><span class="line">            if (stmt != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; catch (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (conn != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; catch (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * user表 删除一条记录</span><br><span class="line"> */</span><br><span class="line">public class JdbcDemo04 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Connection conn = null;</span><br><span class="line">        Statement stmt = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            // 1.注册驱动</span><br><span class="line">            Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">            // 2.获取连接对象</span><br><span class="line">            conn = DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/jk2010&quot;, &quot;root&quot;, &quot;hw205683&quot;);</span><br><span class="line">            // 3.定义sql</span><br><span class="line">            String sql = &quot;delete from user where uid=7&quot;;</span><br><span class="line">            // 4.获取sql对象</span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            //执 5.行sql</span><br><span class="line">            int count = stmt.executeUpdate(sql);</span><br><span class="line">            // 6.处理结果</span><br><span class="line">            System.out.println(count);</span><br><span class="line">            if (count &gt; 0) &#123;</span><br><span class="line">                System.out.println(&quot;删除成功&quot;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;删除失败&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; catch (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            //释放资源</span><br><span class="line">            if (stmt != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; catch (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (conn != null) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; catch (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行DDL语句"><a href="#执行DDL语句" class="headerlink" title="执行DDL语句"></a>执行DDL语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行DDL语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.获取连接对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jk2010&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;hw205683&quot;</span>);</span><br><span class="line">            <span class="comment">// 3.定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;create table st1 (id int ,name varchar(20))&quot;</span>;</span><br><span class="line">            <span class="comment">// 4.获取sql对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//执 5.行sql</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            <span class="comment">// 6.处理结果</span></span><br><span class="line">            System.out.println(count);</span><br><span class="line">            <span class="comment">//  if (count&gt;0)&#123;</span></span><br><span class="line">            <span class="comment">//     System.out.println(&quot;删除成功&quot;);</span></span><br><span class="line">            <span class="comment">//   &#125;else &#123;</span></span><br><span class="line">            <span class="comment">//   System.out.println(&quot;删除失败&quot;);</span></span><br><span class="line">            <span class="comment">//   &#125;</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResultSet："><a href="#ResultSet：" class="headerlink" title="ResultSet："></a>ResultSet：</h2><p> <strong>ResultSet：</strong>结果集对象,封装查询结</p><ul><li>boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true</li><li>getXxx(参数):获取数据<ul><li>Xxx：代表数据类型   如： int getInt() ,String getString()</li><li>参数：<ol><li>int：代表列的编号,从1开始   如： getString(1)</li><li>String：代表列名称。 如： getDouble(“balance”)</li></ol></li><li>注意：</li></ul></li><li>使用步骤：<ol><li>游标向下移动一行</li><li>判断是否有数据</li><li>获取数据</li></ol></li></ul><p>&#96;循环判断游标是否是最后一行末尾。<br>​        while(rs.next()){<br>​            &#x2F;&#x2F;获取数据<br>​            &#x2F;&#x2F;6.2 获取数据<br>​            int id &#x3D; rs.getInt(1);<br>​            String name &#x3D; rs.getString(“name”);<br>​            double balance &#x3D; rs.getDouble(3);</p><p>​            System.out.println(id + “—“ + name + “—“ + balance);<br>​        }&#96;</p><ul><li>练习：<ul><li>定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。<ol><li>定义Emp类</li><li>定义方法 public List<Emp> findAll(){}</li><li>实现方法 select * from emp;</li></ol></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行ResultSet语句</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1.注册驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="comment">// 2.获取连接对象</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jk2010&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;hw205683&quot;</span>);</span><br><span class="line">            <span class="comment">// 3.定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">            <span class="comment">// 4.获取sql对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//执 5.行sql</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">// 6.处理结果</span></span><br><span class="line">            <span class="comment">// 6.1让游标向下一行</span></span><br><span class="line">            <span class="comment">//  rs.next();  //所有的就不加</span></span><br><span class="line">            <span class="comment">// 6.2获取数据</span></span><br><span class="line">            <span class="comment">//循环判断数据是否是最后一行末尾</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="comment">// 6.2获取数据</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">uid</span> <span class="operator">=</span> rs.getInt(<span class="number">1</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">uname</span> <span class="operator">=</span> rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">upassword</span> <span class="operator">=</span> rs.getString(<span class="number">3</span>);</span><br><span class="line">                System.out.println(uid + <span class="string">&quot;---&quot;</span> + uname + <span class="string">&quot;---&quot;</span> + upassword);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                    throwables.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1---zhangsan---199</span></span><br><span class="line"><span class="comment"> * 2---liuyuan---456</span></span><br><span class="line"><span class="comment"> * 4---cc---22</span></span><br><span class="line"><span class="comment"> * 5---kkkc---9999</span></span><br><span class="line"><span class="comment"> * 6---hw---1999</span></span><br><span class="line"><span class="comment"> * 8---hhh---123</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p><strong>PreparedStatement：执行sql的对象</strong></p><ol><li>SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题<ol><li><p>输入用户随便，输入密码：a’ or ‘a’ &#x3D; ‘a</p><ol start="2"><li>sql：select * from user where username &#x3D; ‘fhdsjkf’ and password &#x3D; ‘a’ or ‘a’ &#x3D; ‘a’</li></ol></li><li><p>解决sql注入问题：使用PreparedStatement对象来解决</p></li><li><p>预编译的SQL：参数使用?作为占位符</p></li><li><p>步骤：</p><ol><li>导入驱动jar包 mysql-connector-java-5.1.37-bin.jar</li><li>注册驱动</li><li>获取数据库连接对象 Connection</li><li>定义sql<ul><li>注意：sql的参数使用？作为占位符。 如：select * from user where username &#x3D; ? and password &#x3D; ?;</li></ul></li><li>获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) </li><li>给？赋值：<ul><li>方法： setXxx(参数1,参数2)<ul><li>参数1：？的位置编号 从1 开始</li><li>参数2：？的值</li></ul></li></ul></li><li>执行sql，接受返回结果，不需要传递sql语句</li><li>处理结果</li><li>释放资源</li></ol></li><li><p>注意：后期都会使用PreparedStatement来完成增删改查的所有操作</p><ol><li>可以防止SQL注入</li><li>效率更高</li></ol></li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> until.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> until.JdbcUiils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.通过键盘录入用户名和密码</span></span><br><span class="line"><span class="comment"> * 2.判断用户是否录入成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JdbcDemo10</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入，接受用户名和密码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcDemo10</span>().login2(username, password);</span><br><span class="line">        <span class="comment">//3.判断结果，输出不同语句</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login2</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span> || password == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user2 where username =? and password = ?&quot;</span>;</span><br><span class="line">            <span class="comment">// System.out.println(sql);</span></span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            pstmt = conn.prepareStatement(sql);</span><br><span class="line">            pstmt.setString(<span class="number">1</span>, password);</span><br><span class="line">            pstmt.setString(<span class="number">2</span>, password);</span><br><span class="line">            <span class="comment">//4.执行查询</span></span><br><span class="line">            rs = pstmt.executeQuery();</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">                    <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                         return true;</span></span><br><span class="line"><span class="comment">                     &#125;else&#123;</span></span><br><span class="line"><span class="comment">                         return false;</span></span><br><span class="line"><span class="comment">                     &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();</span><br><span class="line">            <span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUiils.close(rs, pstmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽取JDBC工具类-：-JDBCUtils"><a href="#抽取JDBC工具类-：-JDBCUtils" class="headerlink" title="抽取JDBC工具类 ： JDBCUtils"></a>抽取JDBC工具类 ： JDBCUtils</h2><ul><li><p>目的：简化书写</p></li><li><p>分析：</p><ol><li><p>注册驱动也抽取</p></li><li><p>抽取一个方法获取连接对象</p><ul><li>需求：不想传递参数（麻烦），还得保证工具类的通用性。</li><li>解决：配置文件<br>jdbc.properties<br>url&#x3D;<br>user&#x3D;<br>password&#x3D;</li></ul></li><li><p>抽取一个方法释放资源</p><p><strong>代码实现：</strong></p></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> until;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDBC工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUiils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件的读取，只读取一次即可，使用静态代码块</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取资源文件，获取值</span></span><br><span class="line">        <span class="comment">//1.创建properties集合类</span></span><br><span class="line">        <span class="comment">//2.加载文件</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Properties</span> <span class="variable">pro</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">            <span class="comment">//获取src路径下文件的方式---类加载器</span></span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> JdbcUiils.class.getClassLoader();</span><br><span class="line">            <span class="type">URL</span> <span class="variable">res</span> <span class="operator">=</span> classLoader.getResource(<span class="string">&quot;jdbc.properties&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">pathh</span> <span class="operator">=</span> res.getPath();</span><br><span class="line">            pro.load(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;src/jdbc.properties&quot;</span>));</span><br><span class="line">            <span class="comment">// pro.load(new FileReader(&quot;C:\\Users\\Hasee\\Desktop\\数据\\src\\jdbc.properties&quot;));</span></span><br><span class="line">            <span class="comment">//3.获取属性，赋值</span></span><br><span class="line">            url = pro.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">            user = pro.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            password = pro.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            driver = pro.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">            <span class="comment">//4.注册驱动</span></span><br><span class="line">            Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(Statement stmt, Connection conn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(ResultSet rs, Statement stmt, Connection conn)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stmt.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：<br>    * 需求：<br>        1. 通过键盘录入用户名和密码<br>        2. 判断用户是否登录成功<br>            * select * from user where username &#x3D; “” and password &#x3D; “”;<br>            * 如果这个sql有查询结果，则成功，反之，则失败</p><ul><li><p>步骤：</p><ol><li><p>创建数据库表 user<br>CREATE TABLE USER(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>username VARCHAR(32),<br>PASSWORD VARCHAR(32)<br>);</p><p>INSERT INTO USER VALUES(NULL,’zhangsan’,’123’);<br>INSERT INTO USER VALUES(NULL,’lisi’,’234’);</p></li><li><p>代码实现：</p></li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> until.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> until.JdbcUiils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.通过键盘录入用户名和密码</span></span><br><span class="line"><span class="comment"> * 2.判断用户是否录入成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JdbcDemo09</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入，接受用户名和密码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcDemo09</span>().login(username, password);</span><br><span class="line">        <span class="comment">//3.判断结果，输出不同语句</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//登录成功</span></span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用户名或密码错误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (username == <span class="literal">null</span> || password == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//连接数据库判断是否登录成功</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = JDBCUtils.getConnection();</span><br><span class="line">            <span class="comment">//2.定义sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user2 where username = &#x27;&quot;</span> + username + <span class="string">&quot;&#x27; and password = &#x27;&quot;</span> + password + <span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">            <span class="comment">// System.out.println(sql);</span></span><br><span class="line">            <span class="comment">//3.获取执行sql的对象</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            <span class="comment">//4.执行查询</span></span><br><span class="line">            rs = stmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//5.判断</span></span><br><span class="line">                    <span class="comment">/* if(rs.next())&#123;//如果有下一行，则返回true</span></span><br><span class="line"><span class="comment">                         return true;</span></span><br><span class="line"><span class="comment">                     &#125;else&#123;</span></span><br><span class="line"><span class="comment">                         return false;</span></span><br><span class="line"><span class="comment">                     &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> rs.next();</span><br><span class="line">            <span class="comment">//如果有下一行，则返回true</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUiils.close(rs, stmt, conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC控制事务："><a href="#JDBC控制事务：" class="headerlink" title="JDBC控制事务："></a>JDBC控制事务：</h2><ol><li>事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。</li><li>操作：<ol><li>开启事务</li><li>提交事务</li><li>回滚事务</li></ol></li><li>使用Connection对象来管理事务<ul><li>开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务<ul><li>在执行sql之前开启事务</li></ul></li><li>提交事务：commit() <ul><li>当所有sql都执行完提交事务</li></ul></li><li>回滚事务：rollback() <ul><li>在catch中回滚事务</li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> until.JdbcUiils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcDemo11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">pstmt2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.获取连接</span></span><br><span class="line">            conn = JdbcUiils.getConnection();</span><br><span class="line">            <span class="comment">//开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//定义sql</span></span><br><span class="line">            <span class="comment">//2.1 定义张三 - 500</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql1</span> <span class="operator">=</span> <span class="string">&quot;update account set balance=balance - ? where id =?&quot;</span>;</span><br><span class="line">            <span class="comment">//2.2 定义李四 + 500</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql2</span> <span class="operator">=</span> <span class="string">&quot;update account set balance=balance + ? where id =?&quot;</span>;</span><br><span class="line">            <span class="comment">//3.执行sql对象</span></span><br><span class="line">            pstmt1 = conn.prepareStatement(sql1);</span><br><span class="line">            pstmt2 = conn.prepareStatement(sql2);</span><br><span class="line">            <span class="comment">//4.设置参数</span></span><br><span class="line">            pstmt1.setDouble(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">            pstmt1.setInt(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            pstmt2.setDouble(<span class="number">1</span>, <span class="number">500</span>);</span><br><span class="line">            pstmt2.setInt(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="comment">//5.执行sql</span></span><br><span class="line">            pstmt1.executeUpdate();</span><br><span class="line">            <span class="comment">// 手动制造异常</span></span><br><span class="line">            <span class="comment">//   int i=3/0;</span></span><br><span class="line">            pstmt2.executeUpdate();</span><br><span class="line">            <span class="comment">//提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//事务回滚</span></span><br><span class="line">                <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                    conn.rollback();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">                throwables.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUiils.close(pstmt1, conn);</span><br><span class="line">            JdbcUiils.close(pstmt2, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html/css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/2020/05/22/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/22/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="基数排序介绍"><a href="#基数排序介绍" class="headerlink" title="基数排序介绍"></a>基数排序介绍</h2><h3 id="排序思路"><a href="#排序思路" class="headerlink" title="排序思路"></a>排序思路</h3><p>先以个位数的大小来对数据进行排序，接着以十位数的大小来多数进行排序，接着以百位数的大小……排到最后，就是一组有序的元素了。不过，他在以某位数进行排序的时候，是用“桶”来排序的。由于某位数（个位&#x2F;十位….，不是一整个数）的大小范围为0-9，所以我们需要10个桶，然后把具有相同数值的数放进同一个桶里，之后再把桶里的数按照0号桶到9号桶的顺序取出来，这样一趟下来，按照某位数的排序就完成了</p><p>为方便理解我还准备了<strong>动图</strong>：<br><img src="https://img-blog.csdnimg.cn/20200515145303532.gif#pic_center" alt="在这里插入图片描述"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RadioSort</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] RadioSort(<span class="type">int</span> []arr)&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr==<span class="literal">null</span>||arr.length&lt;<span class="number">2</span>)<span class="keyword">return</span> arr;</span><br><span class="line">        <span class="type">int</span> n=arr.length;</span><br><span class="line">        <span class="type">int</span> max=arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//找出最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;n ; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max&lt;arr[i])max=arr[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算最大值是几位数</span></span><br><span class="line">        <span class="type">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (max/<span class="number">10</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            num++;</span><br><span class="line">            max=max/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不管多少位数字，因为最多创建10个桶，所以咋们弄十个准没错</span></span><br><span class="line">        ArrayList&lt;LinkedList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">//初始化桶</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">            bucketList.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//进行每一趟排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;num ; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;n ; j++) &#123;</span><br><span class="line">                <span class="comment">//获取每个数最后第i位数</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">radio</span> <span class="operator">=</span> (arr[j] / (<span class="type">int</span>)Math.pow(<span class="number">10</span>,i-<span class="number">1</span>)) % <span class="number">10</span>;</span><br><span class="line">                <span class="comment">//放进开始我们弄好的桶里面（对应）</span></span><br><span class="line">                bucketList.get(radio).add(arr[j]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//因为桶里面已经有序,现在咋们进行合并放回原来的数组里面</span></span><br><span class="line">            <span class="type">int</span> k=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;<span class="number">10</span> ; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer t:bucketList.get(j))&#123;</span><br><span class="line">                    arr[k++]=t;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//取出来合并了之后把桶清光数据</span></span><br><span class="line">                bucketList.get(j).clear();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">51</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">698</span>, <span class="number">9</span>, &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;排序前:  &quot;</span>);</span><br><span class="line">        print(arr);</span><br><span class="line"></span><br><span class="line">         RadioSort(arr);  <span class="comment">//此时已经成功</span></span><br><span class="line"></span><br><span class="line">        System.out.print(<span class="string">&quot;排序后:  &quot;</span>);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="literal">null</span>)    <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//遍历并且输出</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : arr) &#123;</span><br><span class="line">            System.</span><br><span class="line">                out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出测试"><a href="#输出测试" class="headerlink" title="输出测试"></a>输出测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">排序前:  5 8 2 4 698 9 </span><br><span class="line">排序后:  2 4 8 9 51 698 </span><br></pre></td></tr></table></figure><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>1、时间复杂度：O(kn)  </p><p>2、空间复杂度：O(n+k)  </p><p>3、稳定排序  </p><p>4、非原地排序</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>十大经典排序代码+讲解均已经完成，大家可以关注小黄公众号进行阅读！后续会继续写一些数据结构方面的知识，也会写一些其它语言的基础，预计这两天发一个对java总结的游戏出来，欢迎大家来和小黄一起学习哟！</p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计数排序</title>
      <link href="/2020/05/22/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/22/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计数排序是一种适合于最大值和最小值的差值不是不是很大的排序。</p><h2 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h2><p>就是把数组元素作为数组的下标，然后用一个临时数组统计该元素出现的次数，例如 temp[i] &#x3D; m, 表示元素 i 一共出现了 m 次。最后再把临时数组统计的数据从小到大汇总起来，此时汇总起来是数据是有序的。</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>为方便理解我还准备了<strong>动图</strong>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2dpZi83MmdpYTJjSEluNFd6ZFFBRWJMbVJBNUNPR0p3ZGdXMVRpY2FjYUxab1VQTjJhVVVZZ0NxN3Q5TGg3NzNKU2lhM1JYc1ZCQnU5UjloS2tTRFNaeHBDUnZXQS82NDA?x-oss-process=image/format,png" alt="img"></p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package fg;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 皖</span><br><span class="line"> * @data 2020.5.13</span><br><span class="line"> */</span><br><span class="line">public class Counting&#123;</span><br><span class="line">    public static int[] countSort (int[] arr) &#123;</span><br><span class="line">        if (arr == null || arr.length &lt; 2)</span><br><span class="line">        return arr;</span><br><span class="line">        int n=arr.length;</span><br><span class="line">        int max=arr[0];</span><br><span class="line">        //寻找数组的最大值</span><br><span class="line">        for (int i = 1; i &lt;n ; i++) &#123;</span><br><span class="line">            if (max&lt;arr[i])</span><br><span class="line">                max=arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">            //创建一个临时数组大小为max</span><br><span class="line">            int []temp=new int[max+1];</span><br><span class="line">            //统计元素出现次数</span><br><span class="line">            for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">                temp[arr[i]]++;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            int k=0;</span><br><span class="line">            //把临时数组统计好的数据汇总到原数组</span><br><span class="line">            for ( int i = 0; i &lt;=max ; i++) &#123;</span><br><span class="line">                for (int j = temp[i]; j &gt;0 ; j--) &#123;</span><br><span class="line">                    arr[k++]=i;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        return arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main (String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;5, 8, 2, 4, 6, 9, 7, 0, 1, 3&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;排序前:  &quot;);</span><br><span class="line">        print(arr);</span><br><span class="line"></span><br><span class="line">        countSort(arr);  //此时已经成功</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;排序后:  &quot;);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打印数组</span><br><span class="line">    public static void print(int[] arr) &#123;</span><br><span class="line">        if (arr == null)    return;</span><br><span class="line">        //遍历并且输出</span><br><span class="line">        for(int i : arr) &#123;</span><br><span class="line">            System.out.print(i + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">排序前:  5 8 2 4 6 9 7 0 1 3 </span><br><span class="line">排序后:  0 1 2 3 4 5 6 7 8 9 </span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>计数排序确实很简单，也希望看到本篇博客的朋友，认真领会其中的精华，更多内容敬请关注小黄公众号哟，后期我会利用假期给大家写一些Java游戏，欢迎大家持续跟随小黄一起学习哟，我个人比较喜欢写游戏，也写了一些，就是一直上课没总结，我会利用假期给大家总结发出来哟！</p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桶排序</title>
      <link href="/2020/05/22/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/22/%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="桶排序介绍"><a href="#桶排序介绍" class="headerlink" title="桶排序介绍"></a>桶排序介绍</h2><p>桶排序就是把<strong>最大值和最小值之间的数进行瓜分</strong>，例如分成 10 个区间，10个区间对应10个桶，我们把各元素放到对应区间的桶中去，再对每个桶中的数进行排序，可以采用归并排序，也可以采用快速排序之类的。</p><p>之后每个桶里面的数据就是有序的了，我们在进行合并汇总。</p><p>为方便理解我还准备了<strong>图片</strong>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X2pwZy83MmdpYTJjSEluNFUwMXpCMWt2Z2V3YkRGMmlhZk5saWJQaWF3VG5iTnA0OGZRWWxuOFhUOG14ZWxiUWYzbzVEazlSeEFnalB6RTk0c0dqNDdOTVhnRmQ1QncvNjQw?x-oss-process=image/format,png" alt="img"></p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>为了让大家更好的对桶排序理解，下面形象生动的画出几个桶，其实过程并不复杂，大家可以看到图中分为几个桶，然后在桶里面进行排序，这样子就快了许多，然后合并就是了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy83MmdpYTJjSEluNFUwMXpCMWt2Z2V3YkRGMmlhZk5saWJQaWFkZG82VkFlRkx0Q1RQUzVrMlRXaGFBMFYyUnd0REdEVmxpY2ZRS2hkbzFIRUJhaWJCT21xUERrQS82NDA?x-oss-process=image/format,png" alt="img"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">package fg;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Collection;</span><br><span class="line">import java.util.Collections;</span><br><span class="line">import java.util.LinkedList;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 皖</span><br><span class="line"> * @data 2020.5.14</span><br><span class="line"> */</span><br><span class="line">public class BuckeStort&#123;</span><br><span class="line">    public static int[]BuckeStort(int[] arr)&#123;</span><br><span class="line">        if (arr==null||arr.length&lt;2)return arr;</span><br><span class="line"></span><br><span class="line">        int n=arr.length;</span><br><span class="line">        int max=arr[0];</span><br><span class="line">        int min=arr[0];</span><br><span class="line">        //寻找数组中的最大值与最小值</span><br><span class="line">        for (int i = 1; i &lt;n; i++) &#123;</span><br><span class="line">            if (min&gt;arr[i])</span><br><span class="line">                min=arr[i];</span><br><span class="line">            if (max&lt;arr[i])</span><br><span class="line">                max=arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">        //弄一个大小为min偏移值</span><br><span class="line">        int d=max-min;</span><br><span class="line">        //创建 d / 5 + 1 个桶，第 i 桶存放  5*i ~ 5*i+5-1范围的数</span><br><span class="line">        int bucktNum=d/5+1;</span><br><span class="line">        ArrayList&lt;LinkedList&lt;Integer&gt;&gt;bucketList=new ArrayList&lt;&gt;(bucktNum);</span><br><span class="line">        //初始化桶</span><br><span class="line">        for (int i = 0; i &lt;bucktNum ; i++) &#123;</span><br><span class="line">            bucketList.add(new LinkedList&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //遍历数组，将每个元素分别插入桶中</span><br><span class="line">        for (int i = 0; i &lt;n ; i++) &#123;</span><br><span class="line">            bucketList.get((arr[i]-min)/d).add(arr[i]-min);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //对桶内元素进行排序</span><br><span class="line">        for (int i = 0; i &lt;bucktNum ; i++) &#123;</span><br><span class="line">            Collections.sort(bucketList.get(i));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //这里然后把排好序之后的数据进行合并汇总放回原来的数组里面</span><br><span class="line">        int k=0;</span><br><span class="line">        for (int i = 0; i &lt;bucktNum; i++) &#123;</span><br><span class="line">            for (Integer t:bucketList.get(i))&#123;</span><br><span class="line">                arr[k++]=t+min;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">     return arr;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main (String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;5, 8, 2, 4, 6, 9, 7, 23, 1,3&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;排序前:  &quot;);</span><br><span class="line">        print(arr);</span><br><span class="line"></span><br><span class="line">        BuckeStort(arr);  //此时已经成功</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;排序后:  &quot;);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打印数组</span><br><span class="line">    public static void print(int[] arr) &#123;</span><br><span class="line">        if (arr == null)    return;</span><br><span class="line">        //遍历并且输出</span><br><span class="line">        for(int i : arr) &#123;</span><br><span class="line">            System.out.print(i + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出测试"><a href="#输出测试" class="headerlink" title="输出测试"></a>输出测试</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">排序前:  5 8 2 4 6 9 7 23 1 3 </span><br><span class="line">排序后:  1 2 3 4 5 6 7 8 9 23 </span><br></pre></td></tr></table></figure><h2 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h2><p>1、时间复杂度：O(n+k)</p><p>2、空间复杂度：O(n+k)</p><p>3、稳定排序</p><p>4、非原地排序</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>我每天一更不是为了装x，其实我也有过想放弃，毕竟看看视频，玩玩儿游戏多舒服，时间过的又快，害，可是这样子下去只能是先甜后苦，最后只会得不尝试，说实话我从初中开始就有了第一步手机，当时酷跑还那么火，我曾经也通宵玩儿，所有的赛道都记熟悉了，我当时比较喜欢跑极速模式，当时可以跑十万多米（确实挺难的)，就这样子稀里糊涂的进了一个普通的高中，继续玩儿，记得中考结束之后出了一个新游戏《英雄战迹》（就是现在的王者荣耀)，当时就上瘾了，雾草这么好玩儿，这不就是手机版本的lol么，就一直玩儿，到现在累计场数都有接近五千场了，咋们来算一个时间帐，就按照五千来算，平均一局就按照20分钟来算吧，总共时间达到了1666小时，换算成天数就是69天，不吃不喝69天，害，现在想起来花一半的时间来写数据结构，也是一个大神了，学校开这个课程也就几十个学时，不过现在的我，也还是很不自觉，偶尔还是会玩儿一下，不过非常少了，基本上一些短视频软件和游戏一周时间加起来不会超过4小时吧，我也有时候会因为心情不好不想学习，但是哪有天天心情好呢，人非草木，岂无情，学习还是得坚持下去，就像我现在虽说会的也是比较基础的但是如果，不坚持下去，就永远也不会，到时候也只会和前两次一样心里只有后悔了，现在幸好还有一年多的时间，也许还可以搏一搏，起码最后不会后悔吧，也许青春永远是充满迷茫的，作为我们这个年纪，玩儿是天性，我也想着玩儿呀，害，希望看老本篇文章的各位好好总结一下，时间是永远不会倒流的，也没有后悔药，也希望以后的岁月我看到这篇文章，又能重温现在这种后浪推前浪的豪情，加油！</p><p>欢迎大家和小黄一起学习！<br>微信公众号：小黄爱编程<br><img src="https://img-blog.csdnimg.cn/20200514183530800.jpg" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2020/05/22/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/22/%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="堆排序介绍"><a href="#堆排序介绍" class="headerlink" title="堆排序介绍"></a>堆排序介绍</h2><p><strong>堆排序</strong>：堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似<strong>完全二叉树</strong>的结构。并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p><p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。如下图：<br><img src="https://img-blog.csdnimg.cn/20200512171246538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk4MDA3Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>同时，我们对堆中的结点按层进行编号，将这种逻辑结构映射到数组中就是下面这个样子<br><img src="https://img-blog.csdnimg.cn/20200512171310782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk4MDA3Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="堆结构"><a href="#堆结构" class="headerlink" title="堆结构"></a>堆结构</h3><p>该数组从逻辑上讲就是一个堆结构，我们用简单的公式来描述一下堆的定义就是：</p><p>大顶堆：arr[i] &gt;&#x3D; arr[2i+1] &amp;&amp; arr[i] &gt;&#x3D; arr[2i+2]  </p><p>小顶堆：arr[i] &lt;&#x3D; arr[2i+1] &amp;&amp; arr[i] &lt;&#x3D; arr[2i+2]  </p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>堆的特点就是堆顶的元素是一个<strong>最值</strong>，大顶堆的堆顶是最大值，小顶堆则是最小值。</p><h2 id="过程描述"><a href="#过程描述" class="headerlink" title="过程描述"></a>过程描述</h2><p>堆排序就是把堆顶的元素与最后一个元素交换，交换之后破坏了堆的特性，我们再把堆中剩余的元素再次构成一个大顶堆，然后再把堆顶元素与最后第二个元素交换….如此往复下去，等到剩余的元素只有一个的时候，此时的数组就是有序的了。</p><p>为方便理解我还准备了动图：<br><img src="https://img-blog.csdnimg.cn/20200512171441413.gif#pic_center" alt="在这里插入图片描述"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapSort</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []arr=&#123;<span class="number">50</span>,<span class="number">45</span>,<span class="number">40</span>,<span class="number">20</span>,<span class="number">25</span>,<span class="number">35</span>,<span class="number">30</span>,<span class="number">10</span>,<span class="number">15</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span>+ Arrays.toString(arr));</span><br><span class="line">        sprt(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sprt</span> <span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//1.构建大顶堆</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span>arr.length/<span class="number">2</span>-<span class="number">1</span>; i &gt;=<span class="number">0</span> ; i--) &#123;</span><br><span class="line">            <span class="comment">//从第一个非叶子结点从下至上，从右至左调整结构</span></span><br><span class="line">            adjustHeap(arr,i,arr.length); <span class="comment">//sdjust是调整的意思(英语不好的小伙伴儿不用惊讶)</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.调整堆结构+交换堆顶元素与末尾元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; j &gt;<span class="number">0</span> ; j--) &#123;</span><br><span class="line">            swap(arr,<span class="number">0</span>,j);<span class="comment">//将堆顶元素与末尾元素进行交换</span></span><br><span class="line">            adjustHeap(arr,<span class="number">0</span>,j);<span class="comment">//重新对堆进行调整</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span> <span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span>arr[a];</span><br><span class="line">        arr[a]=arr[b];</span><br><span class="line">        arr[b]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 调整大顶堆（仅是调整过程，建立在大顶堆已构建的基础上）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> length</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">adjustHeap</span> <span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="type">int</span> temp=arr[i];   <span class="comment">//先取出当前元素i</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">2</span>*i+<span class="number">1</span>; k &lt;length ; k=<span class="number">2</span>*k+<span class="number">1</span>)&#123;<span class="comment">//从i结点的左子结点开始，也就是2i+1处开始</span></span><br><span class="line">          <span class="keyword">if</span> (k+<span class="number">1</span>&lt;length&amp;&amp;arr[k]&lt;arr[k+<span class="number">1</span>])&#123;<span class="comment">//如果左子结点小于右子结点，k指向右子结点</span></span><br><span class="line">             k++;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">            <span class="keyword">if</span>(arr[k] &gt;temp)&#123;<span class="comment">//如果子节点大于父节点，将子节点值赋给父节点（不用进行交换）</span></span><br><span class="line">                arr[i] = arr[k];</span><br><span class="line">                i = k;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = temp;<span class="comment">//将temp值放到最终的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">排序前：[50, 45, 40, 20, 25, 35, 30, 10, 15]</span><br><span class="line">排序后：[10, 15, 20, 25, 30, 35, 40, 45, 50]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2020/05/22/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/22/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们从数组中选择一个元素，我们把这个元素称之为<strong>中轴元素</strong>吧，然后把数组中所有小于中轴元素的元素放在其左边，所有大于或等于中轴元素的元素放在其右边，显然，此时中轴元素所处的位置的是<strong>有序的</strong>。也就是说，我们无需再移动中轴元素的位置。</p><p>从中轴元素那里开始把大的数组切割成两个小的数组(两个数组都不包含中轴元素)，接着我们通过递归的方式，让中轴元素左边的数组和右边的数组也重复同样的操作，直到数组的大小为1，此时每个元素都处于<strong>有序的位置</strong>。</p><p>为方便理解我还准备了<strong>动图</strong>：<br><img src="https://img-blog.csdnimg.cn/20200512165313148.gif#pic_center" alt="在这里插入图片描述"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">package fg;</span><br><span class="line"></span><br><span class="line">public class QuickSort&#123;</span><br><span class="line">    private static int count;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 快速排序</span><br><span class="line">     *</span><br><span class="line">     * @param num   排序的数组</span><br><span class="line">     * @param left  数组的前针</span><br><span class="line">     * @param right 数组后针</span><br><span class="line">     */</span><br><span class="line">    private static void QuickSort (int[] num, int left, int right) &#123;</span><br><span class="line">        //如果left等于right，即数组只有一个元素，直接返回</span><br><span class="line">        if (left &gt;= right) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        //设置最左边的元素为基准值(key)</span><br><span class="line">        int key = num[left];</span><br><span class="line">        //数组中比key小的放在左边，比key大的放在右边，key值下标为i</span><br><span class="line">        int i = left;</span><br><span class="line">        int j = right;</span><br><span class="line">        while (i &lt; j) &#123;</span><br><span class="line">            //j向左移，直到遇到比key小的值</span><br><span class="line">            while (num[j] &gt;= key &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            //i向右移，直到遇到比key大的值</span><br><span class="line">            while (num[i] &lt;= key &amp;&amp; i &lt; j) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            //i和j指向的元素交换(i&lt;j情况)</span><br><span class="line">            if (i &lt; j) &#123;</span><br><span class="line">                int temp = num[i];</span><br><span class="line">                num[i] = num[j];</span><br><span class="line">                num[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        num[left] = num[i];</span><br><span class="line">        num[i] = key;</span><br><span class="line">        count++;</span><br><span class="line">        QuickSort(num, left, i - 1);</span><br><span class="line">        QuickSort(num, i + 1, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 将一个int类型数组转化为字符串</span><br><span class="line">     *</span><br><span class="line">     * @param arr</span><br><span class="line">     * @param flag</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    //遍历一下数组而已</span><br><span class="line">    private static String arrayToString (int[] arr, String flag) &#123;</span><br><span class="line">        String str = &quot;数组为(&quot; + flag + &quot;)：&quot;;</span><br><span class="line">        for (int a : arr) &#123;</span><br><span class="line">            str += a + &quot;\t&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 测试</span><br><span class="line">     *</span><br><span class="line">     * @param args</span><br><span class="line">     */</span><br><span class="line">    public static void main (String[] args) &#123;</span><br><span class="line">        int[] num = &#123;3, 44, 38, 64, 52, 11, 64, 55, 99, 11, 18,59,8989,54,12,544,6,154,4,7,454,245,45,61,64&#125;;</span><br><span class="line">        System.out.println(arrayToString(num, &quot;未排序&quot;));</span><br><span class="line">        QuickSort(num, 0, num.length - 1);</span><br><span class="line">        System.out.println(arrayToString(num, &quot;排序&quot;));</span><br><span class="line">        System.out.println(&quot;数组个数：&quot; + num.length);</span><br><span class="line">        System.out.println(&quot;循环次数：&quot; + count);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数组为(未排序)：3443864521164559911185989895412544615447454245456164</span><br><span class="line">数组为(排序)：3467111112183844455254555961646464991542454545448989</span><br><span class="line">数组个数：25</span><br><span class="line">循环次数：18</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h2><p>1、时间复杂度：O(nlogn)</p><p>2、空间复杂度：O(logn)</p><p>3、非稳定排序</p><p>4、原地排序</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>快速排序是冒泡排序的改进版，也是最好的一种内排序，在很多面试题中都会出现，也是作为程序员必须掌握的一种排序方法。因此我们掌握它是非常有必要的，希望看到本篇博客的朋友能够真正的学会它！</p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2020/05/10/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/10/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>将一个大的无序数组有序，我们可以把大的数组分成<strong>两个</strong>，然后对这两个数组分别进行排序，之后在把这两个数组合并成一个有序的数组。由于两个小的数组都是有序的，所以在合并的时候是很快的。</p><p>还可以通过<strong>递归</strong>的方式将大的数组一直分割，直到数组的大小为 1，此时只有一个元素，那么该数组就是有序的了，之后再把两个数组大小为1的合并成一个大小为2的，再把两个大小为2的合并成4的 ….. 直到全部小的数组合并起来。</p><p>为方便理解我还准备了<strong>动图</strong>：<br><img src="https://img-blog.csdnimg.cn/20200510115124195.gif#pic_center" alt="在这里插入图片描述"></p><h3 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h3><p><img src="https://img-blog.csdnimg.cn/20200510115104852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDk4MDA3Mg==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package fg;</span><br><span class="line">class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;49,38,65,97,76,13,27&#125;;</span><br><span class="line">        int[] tmp = new int[arr.length];    //新建一个临时数组存放</span><br><span class="line">        mergeSort(arr,0,arr.length-1,tmp);</span><br><span class="line">        for(int i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">            System.out.print(arr[i]+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void merge(int[] arr,int low,int mid,int high,int[] tmp)&#123;</span><br><span class="line">        int i = 0;</span><br><span class="line">        int j = low,k = mid+1;  //左边序列和右边序列起始索引</span><br><span class="line">        while(j &lt;= mid &amp;&amp; k &lt;= high)&#123;</span><br><span class="line">            if(arr[j] &lt; arr[k])&#123;</span><br><span class="line">                tmp[i++] = arr[j++];</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                tmp[i++] = arr[k++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //若左边序列还有剩余，则将其全部拷贝进tmp[]中</span><br><span class="line">        while(j &lt;= mid)&#123;</span><br><span class="line">            tmp[i++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        //同理</span><br><span class="line">        while(k &lt;= high)&#123;</span><br><span class="line">            tmp[i++] = arr[k++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(int t=0;t&lt;i;t++)&#123;</span><br><span class="line">            arr[low+t] = tmp[t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void mergeSort(int[] arr,int low,int high,int[] tmp)&#123;</span><br><span class="line">        if(low&lt;high)&#123;</span><br><span class="line">            int mid = (low+high)/2;</span><br><span class="line">            mergeSort(arr,low,mid,tmp); //对左边序列进行归并排序</span><br><span class="line">            mergeSort(arr,mid+1,high,tmp);  //对右边序列进行归并排序</span><br><span class="line">            merge(arr,low,mid,high,tmp);    //合并两个有序序列</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 27 38 49 65 76 97 </span><br></pre></td></tr></table></figure><h2 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h2><p>1、时间复杂度：O(nlogn) </p><p> 2、空间复杂度：O(n)  </p><p>3、稳定排序  </p><p>4、非原地排序</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>归并排序对于前面几个来说稍微难了一点儿，大家可以先理解其中的过程，然后看一下实现代码，应该就可以明白了，更多内容请关注：<strong>小黄爱编程</strong></p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>希尔排序</title>
      <link href="/2020/05/09/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/09/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>希尔排序可以说是<strong>插入排序</strong>的一种变种。无论是插入排序还是冒泡排序，如果数组的最大值刚好是在第一位，要将它挪到正确的位置就需要 n - 1 次移动。也就是说，原数组的一个元素如果距离它正确的位置很远的话，则需要与相邻元素交换很多次才能到达正确的位置，这样是相对比较花时间了。</p><p>希尔排序就是为了加快速度简单地<strong>改进了插入排序</strong>，交换不相邻的元素以对数组的<strong>局部</strong>进行排序。</p><p>希尔排序的思想是采用插入排序的方法，先让数组中任意间隔为 h 的元素有序，刚开始 h 的大小可以是 h &#x3D; n &#x2F; 2,接着让 h &#x3D; n &#x2F; 4，让 h 一直缩小，当 h &#x3D; 1 时，也就是此时数组中任意间隔为1的元素有序，此时的数组就是<strong>有序</strong>的了。</p><p>为方便理解我还准备了<strong>图片</strong>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9nc1FNNjFHU3pJTUxiM2tCaFFpYmliNkhwVlpJZHlBM2ljaWIwc0IxQkRFemF4aWNjWXozSVM5YzRESktacExTbFo1SGljWVBxZG9la2I5dXpBb1AxdlNzdnp6US82NDA?x-oss-process=image/format,png" alt="img"></p><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package fg;</span><br><span class="line"></span><br><span class="line">public class ShellSort &#123;</span><br><span class="line">    public static void shellSort(int[] arr) &#123;</span><br><span class="line">        if (arr == null || arr.length &lt;2)   // 空数组 或 只有一个元素的数组，则什么都不做。</span><br><span class="line">            return;</span><br><span class="line">        int gap = arr.length / 2;   // 定义希尔增量。</span><br><span class="line"></span><br><span class="line">        // gap缩小到0的时候就退出循环（判断结束条件）。</span><br><span class="line">        while (gap != 0) &#123;</span><br><span class="line">            // 每组进行直接插入排序。</span><br><span class="line">            for (int i = gap; i &lt; arr.length; i++) &#123;    // i 代表待插入元素的索引。</span><br><span class="line">                int value = arr[i];</span><br><span class="line">                int j = i - gap;    // j 代表i的上一个元素，相差一个增量gap。</span><br><span class="line"></span><br><span class="line">                // j &lt; 0 时退出循环，说明 j 是最小的元素的索引值。</span><br><span class="line">                // 或者 arr[j] &lt;= value 时退出循环，说明 j 是比value小的元素的索引值。</span><br><span class="line">                for (; j &gt;= 0 &amp;&amp; arr[j] &gt; value; j -= gap) &#123;</span><br><span class="line">                    arr[j + gap] = arr[j];  // 把元素往后挪。</span><br><span class="line">                &#125;</span><br><span class="line">                arr[j + gap] = value;  //元素值</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            // 把每一趟排序的结果也输出一下。</span><br><span class="line">            print(arr);</span><br><span class="line"></span><br><span class="line">            // 缩小增量。</span><br><span class="line">            gap /= 2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int[] arr = &#123;5, 8, 2, 4, 6, 9, 7, 0, 1, 3&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;排序前:  &quot;);</span><br><span class="line">        print(arr);</span><br><span class="line"></span><br><span class="line">        shellSort(arr);  //此时已经成功</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;排序后:  &quot;);</span><br><span class="line">        print(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 打印数组</span><br><span class="line">    public static void print(int[] arr) &#123;</span><br><span class="line">        if (arr == null)    return;</span><br><span class="line">    //遍历并且输出</span><br><span class="line">        for(int i : arr) &#123;</span><br><span class="line">            System.out.print(i + &quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">排序前:  5 8 2 4 6 9 7 0 1 3 5 7 0 1 3 9 8 2 4 6 0 1 3 2 4 6 5 7 8 9 0 1 2 3 4 5 6 7 8 9 排序后:  0 1 2 3 4 5 6 7 8 9 </span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>对各个分组进行插入的时候并不是先对一个组排序完了再来对另一个组排序，而是轮流对每个组进行排序。</p><h3 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h3><p>1、时间复杂度：O(nlogn)</p><p>2、空间复杂度：O(1)</p><p>3、非稳定排序</p><p>4、原地排序</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>十大排序算法</strong>可以说是每个程序员都必须得掌握的，由于考虑到读者，保证每种排序速算法大概三分钟左右就能轻松掌握，所以分开讲解，对于<strong>希尔排序</strong>精髓就是一个希尔增量，大家了解这个就完全欧克了！但是呢得坚持下去，哪怕在简单的你一看就懂，但是你不看还是不懂的，脚踏实地一起努力输入，看到本篇文章的小伙伴们一起加油吧！</p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2020/05/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/07/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序介绍"><a href="#冒泡排序介绍" class="headerlink" title="冒泡排序介绍"></a>冒泡排序介绍</h2><p>冒泡排序就是把把第一个元素与第二个元素比较，如果第一个比第二个大，则交换他们的位置。接着继续比较第二个与第三个元素，如果第二个比第三个大，则交换他们的位置….</p><p>我们对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样一趟比较交换下来之后，排在最右的元素就会是最大的数。</p><p>除去最右的元素，我们对剩余的元素做同样的工作，如此重复下去，直到排序完成。</p><p>为方便理解我还准备了<strong>动图</strong>：<br><img src="https://img-blog.csdnimg.cn/20200507202330157.gif" alt="在这里插入图片描述"><br><strong>性质：</strong>1、时间复杂度：O(n2)  2、空间复杂度：O(1)  3、稳定排序  4、原地排序</p><h3 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a><strong>实现代码：</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fg;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> bubbleSort TestSort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arrary)</span>&#123;</span><br><span class="line">        <span class="comment">//从第一个元素开始，向后依次成对比较，逆序则交换。</span></span><br><span class="line">        <span class="comment">//对所有的元素都进行这一操作 。</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arrary.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;arrary.length-<span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="comment">//1、比较第一对相邻的元素。判断第一个元素是否大于第二个元素如果是则交换.</span></span><br><span class="line">                <span class="comment">//2、此时要比较的是第J-1个元素。要不停的向后移动</span></span><br><span class="line">                <span class="keyword">if</span>(arrary[j]&gt;arrary[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arrary[j];</span><br><span class="line">                    arrary[j] = arrary[j+<span class="number">1</span>];</span><br><span class="line">                    arrary[j+<span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;轮:&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:arrary) &#123;</span><br><span class="line">                System.out.print(j + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> [] arrary = &#123;<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>&#125;;;</span><br><span class="line">        bubbleSort(arrary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a><strong>输出结果：</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第1轮:4,6,8,1,2,3,7,9,</span><br><span class="line">第2轮:4,6,1,2,3,7,8,9,</span><br><span class="line">第3轮:4,1,2,3,6,7,8,9,</span><br><span class="line">第4轮:1,2,3,4,6,7,8,9,</span><br><span class="line">第5轮:1,2,3,4,6,7,8,9,</span><br><span class="line">第6轮:1,2,3,4,6,7,8,9,</span><br><span class="line">第7轮:1,2,3,4,6,7,8,9,</span><br></pre></td></tr></table></figure><h2 id="冒泡排序优化"><a href="#冒泡排序优化" class="headerlink" title="冒泡排序优化"></a>冒泡排序优化</h2><p>由以上代码输出可知<strong>第四轮</strong>就已经达到了排序要求，那么从第四轮开始就是多余的啦！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第1轮:4,6,8,1,2,3,7,9,</span><br><span class="line">第2轮:4,6,1,2,3,7,8,9,</span><br><span class="line">第3轮:4,1,2,3,6,7,8,9,</span><br><span class="line">第4轮:1,2,3,4,6,7,8,9,</span><br><span class="line">-----实际上排序了4次以后我们已经完成了整个数组的排序。后面的3轮都是无意义的。</span><br><span class="line">第5轮:1,2,3,4,6,7,8,9,</span><br><span class="line">第6轮:1,2,3,4,6,7,8,9,</span><br><span class="line">第7轮:1,2,3,4,6,7,8,9,</span><br></pre></td></tr></table></figure><p>因此需要优化，那么该怎么优化呢………..</p><p>其实思路很简单，就是加一个比较条件(<strong>当在比较失败的时候我们就退出整个循环</strong>)</p><h3 id="优化代码："><a href="#优化代码：" class="headerlink" title="优化代码："></a>优化代码：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fg;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">bubbleSort</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> bubbleSort TestSort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span>[] arrary)</span>&#123;</span><br><span class="line">        <span class="comment">//从第一个元素开始，向后依次成对比较，逆序则交换。</span></span><br><span class="line">        <span class="comment">//对所有的元素都进行这一操作 。</span></span><br><span class="line">        <span class="type">int</span> temp ;</span><br><span class="line">        <span class="type">boolean</span> success ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ; i &lt; arrary.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="comment">//一开始就是成功了</span></span><br><span class="line">            success=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;arrary.length-<span class="number">1</span> ;j++)&#123;</span><br><span class="line">                <span class="comment">//1、比较第一对相邻的元素。判断第一个元素是否大于第二个元素如果是则交换.</span></span><br><span class="line">                <span class="comment">//2、此时要比较的是第J-1个元素。要不停的向后移动</span></span><br><span class="line">                <span class="keyword">if</span>(arrary[j]&gt;arrary[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp = arrary[j];</span><br><span class="line">                    arrary[j] = arrary[j+<span class="number">1</span>];</span><br><span class="line">                    arrary[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    <span class="comment">//进行优化 1、当不在比较失败的时候我们就退出整个循环</span></span><br><span class="line">                    <span class="comment">//证明还在排序</span></span><br><span class="line">                    success=<span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果没有排序了我们则认为已经完成了所有的排序</span></span><br><span class="line">            <span class="keyword">if</span>(success)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;第&quot;</span>+(i+<span class="number">1</span>)+<span class="string">&quot;轮&quot;</span>+success);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j:arrary) &#123;</span><br><span class="line">                System.out.print(j + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> [] arrary = &#123;<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        bubbleSort(arrary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="输出结果：-1"><a href="#输出结果：-1" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第1轮false4,6,8,1,2,3,7,9,</span><br><span class="line">第2轮false4,6,1,2,3,7,8,9,</span><br><span class="line">第3轮false4,1,2,3,6,7,8,9,</span><br><span class="line">第4轮false1,2,3,4,6,7,8,9,</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>冒泡排序作为十大经典排序之一，是必须要掌握的算法，实际工作中使用频率也非常高。其次，本文采用先展示代码，博主个人认为博客因该尽量短小精悍，主要的内容在3分钟内解释完！更多的感悟肯能会出现在结语部分。虽说是很基础的内容，但是金典还是记录一下，就像86版西游记一样，经典就是不一样，哈哈哈 不扯了，继续努力！</p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2020/05/03/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/05/03/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​       我们在玩打牌的时候，你是怎么整理那些牌的呢？一种简单的方法就是一张一张的来，将每一张牌插入到其他已经有序的牌中的适当位置。当我们给无序数组做排序的时候，为了要插入元素，我们需要腾出空间，将其余所有元素在插入之前都向右移动一位，这种算法我们称之为<strong>插入排序</strong>。</p><h2 id="过程描述："><a href="#过程描述：" class="headerlink" title="过程描述："></a>过程描述：</h2><p>1、从数组第2个元素开始抽取元素。</p><p>2、把它与左边第一个元素比较，如果左边第一个元素比它大，则继续与左边第二个元素比较下去，直到遇到不比它大的元素，然后插到这个元素的右边。</p><p>3、继续选取第3，4，…n个元素,重复步骤 2 ，选择适当的位置插入。</p><h2 id="动图："><a href="#动图：" class="headerlink" title="动图："></a>动图：</h2><p><img src="https://s1.ax1x.com/2020/05/03/YS5thT.gif"></p><h2 id="实现代码："><a href="#实现代码：" class="headerlink" title="实现代码："></a>实现代码：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fg;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertSort</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">insertSort</span> <span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;                             <span class="comment">//临时变量,用于交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;    <span class="comment">//从第二数开始比较</span></span><br><span class="line">            temp = arr[i];                        <span class="comment">//将当前数插入到已经有序的数组中</span></span><br><span class="line">            <span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; temp) &#123;              <span class="comment">//如果前面的数大于当前数,将他后移</span></span><br><span class="line">                    arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;                          <span class="comment">//因为小于就不用管了嘛</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;                     <span class="comment">//将当前轮数的数放到应该在的位置</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));   <span class="comment">//将其转换成数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">9</span>, <span class="number">322</span>, <span class="number">22</span>, <span class="number">72</span>, <span class="number">33</span>, <span class="number">99</span>&#125;;</span><br><span class="line">        insertSort(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[9, 22, 33, 72, 99, 322]</span><br></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>​             实现起来确实非常的简单，为了防止以后忘记，记录一下！</p>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit单元测试</title>
      <link href="/2020/05/02/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/05/02/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="测试分类："><a href="#测试分类：" class="headerlink" title="测试分类："></a>测试分类：</h2><p>1.黑盒测试：不需要写代码，给出输入值，看程序能否输出期望值。</p><p>2.白盒测试：需要写代码，关注程序具体执行流程。</p><h2 id="Junit使用：白盒测试"><a href="#Junit使用：白盒测试" class="headerlink" title="Junit使用：白盒测试"></a>Junit使用：白盒测试</h2><p>废话不多说，直接附上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> itcast;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span>&#123;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">       <span class="comment">// int i=3/0;</span></span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们也可以使用创建对象来看，但是就不知道是否是执行正确的，并且一个主方法只可以运行一个，就很麻烦，因此我们就用单元测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> itcast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Calculator C=<span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">       <span class="comment">// int result=C.add(1,2);</span></span><br><span class="line">        <span class="type">int</span> result=C.sub(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>测试代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itcast.Calculator;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法；</span></span><br><span class="line"><span class="comment">     * 用于资源申请，所有测试方法在执行之前都会执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行init....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源；</span></span><br><span class="line"><span class="comment">     * 在所有方法执行完成后，都会自动执行该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行close....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试add方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="comment">//  System.out.println(&quot;我被执行了&quot;);</span></span><br><span class="line">        <span class="comment">//1.创建计算器对象</span></span><br><span class="line">        Calculator c= <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="type">int</span> result=c.add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        <span class="comment">//3.断言 我断言这个结果是3</span></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>,result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testSub</span><span class="params">()</span>&#123;</span><br><span class="line">        Calculator c= <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="comment">//2.调用方法</span></span><br><span class="line">        <span class="type">int</span> result=c.sub(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">        System.out.println(<span class="string">&quot;执行testSub&quot;</span>);</span><br><span class="line">        <span class="comment">//3.断言 我断言这个结果是-1</span></span><br><span class="line">        Assert.assertEquals(-<span class="number">1</span>,result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>说明：</strong>单元测试中主要就是给方法加@Test，然后倒入依赖环境，其次代码中用到了断言；</p><h2 id="判定结果（断言）："><a href="#判定结果（断言）：" class="headerlink" title="判定结果（断言）："></a>判定结果（断言）：</h2><p><strong>红色：</strong>失败</p><p><strong>绿色：</strong>成功</p><p><strong>代码：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.assertEquals(期望结果,运算结果);</span><br></pre></td></tr></table></figure><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p>@Before：修饰的方法会在测试方法之前被自动执行；</p><p> @After：修饰的方法会在测试方法之后被自动执行；</p><p>注意：无论测试方法是否会出异常，这两个方法都会被执行。</p>]]></content>
      
      
      <categories>
          
          <category> java单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java集合框架小结</title>
      <link href="/2020/05/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/05/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><a href="ttp://ur868q.coding-pages.com/2020/03/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%BA%B2/"><strong>Java集合框架（一）：大纲</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/03/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%95%B4%E4%BD%93%E6%A6%82%E8%A7%88/#Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%BC%98%E7%82%B9"><strong>Java集合框架（二）：整体概览</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/03/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ACollection%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（三）：Collection 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/03/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AIterator%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（四）：Iterator 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/03/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AListIterator%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（五）：ListIterator 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#1%E3%80%81Set-%E7%AE%80%E8%BF%B0"><strong>JavaJava集合框架（六）：Set 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ASortedSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（七）：SortedSet 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9AList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（八）：List 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AQueue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（九）：Queue 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9ADeque%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十）：Deque 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十一）：Map 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9ASortedMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十二）：SortedMap 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9AHashSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十三）：HashSet 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9ALinkedHashSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十四）：LinkedHashSet 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9ATreeSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十五）：TreeSet 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/05/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9AArrayList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#4-1-6%E3%80%81size"><strong>Java集合框架（十六）：ArrayList 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/06/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9ALinkedList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十七）：LinkedList 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/12/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9AHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十八）：HashMap 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/16/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9ALinkedHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十九）：LinkedHashMap 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/16/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9ATreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"><strong>Java集合框架（二十）：TreeMap 源码解析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/05/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AHashTable%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（二十一）：HashTable 源码分析</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（二十一）：HashTable 源码分析</title>
      <link href="/2020/05/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AHashTable%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/05/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AHashTable%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、HashTable-简介"><a href="#1、HashTable-简介" class="headerlink" title="1、HashTable 简介"></a>1、HashTable 简介</h2><p>和 HashMap 一样，Hashtable 也是一个<strong>散列表</strong>。从Java 1.2开始，这个类被改进以实现Map接口，使其成为Java Collections Framework的成员。 与新的集合实现不同，Hashtable是同步的。 如果不需要线程安全实现，建议使用HashMap代替Hashtable。 如果需要线程安全的高度并发实现，那么建议使用ConcurrentHashMap代替Hashtable。</p><p>该类实现了一个哈希表，它将键映射到值。 任何非null对象都可以用作键或值。要成功存储和检索哈希表中的对象，用作键的对象必须实现hashCode方法和equals方法。</p><p>通常，默认负载系数（0.75）在时间和空间成本之间提供了良好的折衷。 较高的值会减少空间开销，但会增加查找条目的时间成本（这反映在大多数Hashtable操作中，包括get和put）。</p><p>初始容量控制了浪费空间和重新运算操作的需要之间的权衡，这是非常耗时的。 如果初始容量大于Hashtable将包含的最大条目数除以其加载因子，则不会发生重复操作。 但是，将初始容量设置得太高会浪费空间。</p><p>如果要将多个元素设置为Hashtable，则创建具有足够容量的初始大小可以更有效地插入元素，而不是根据需要执行自动扩容来扩展表。</p><h3 id="1-1、HashTable-定义"><a href="#1-1、HashTable-定义" class="headerlink" title="1.1、HashTable 定义"></a>1.1、HashTable 定义</h3><p><img src="https://s1.ax1x.com/2020/04/16/JF184s.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hashtable</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">Dictionary</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p>从源码中，我们可以看出，Hashtable 继承于 Dictionary 类，实现了 Map, Cloneable, java.io.Serializable接口。</p><p>其中Dictionary类是任何可将键映射到相应值的类（如 Hashtable）的抽象父类，每个键和值都是对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dictionary 源码注释中有这样一句话，NOTE: This <span class="keyword">class</span> <span class="title class_">is</span> obsolete. New implementations should implement the Map interface, rather than extending <span class="built_in">this</span> class.（ Dictionary 这个类过时了，新的实现类应该实现Map接口。）</span><br></pre></td></tr></table></figure><h3 id="1-2、HashTable-属性"><a href="#1-2、HashTable-属性" class="headerlink" title="1.2、HashTable 属性"></a>1.2、HashTable 属性</h3><p>Hashtable 是通过”拉链法”实现的哈希表。它包括几个重要的成员变量：table, count, threshold, loadFactor, modCount。</p><p>🌂table：是一个 Entry[] 数组类型，而 Entry（在 HashMap 中有讲解过）实际上就是一个单向链表。哈希表的”key-value键值对”都是存储在Entry数组中的。</p><p>🌂count：是 Hashtable 的大小，它是 Hashtable 保存的键值对的数量。</p><p>🌂threshold：是 Hashtable 的阈值，用于判断是否需要调整 Hashtable 的容量。threshold 的值&#x3D;“容量*加载因子”。</p><p>🌂loadFactor：是加载因子。</p><p>🌂modCount：是用来实现 fail-fast 机制的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hashtable</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">Dictionary</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;, Cloneable, java.io.Serializable &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存key-value的数组。</span></span><br><span class="line"><span class="comment"> * Hashtable同样采用单链表解决冲突，每一个Entry本质上是一个单向链表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hashtable中键值对的数量，这个大小并不是HashTable的容器大小，而是他所包含Entry键值对的数量。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  阈值，用于判断是否需要调整Hashtable的容量（threshold = 容量*加载因子）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载因子</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hashtable被改变的次数，用于fail-fast机制的实现。</span></span><br><span class="line"><span class="comment"> * 所谓快速失败就是在并发集合中，其进行迭代操作时，若有其他线程对其进行结构性的修改，这时迭代器会立马感知* 到，并且立即抛出ConcurrentModificationException异常，而不是等到迭代完成之后才告诉你</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中table中存储的是Entry节点，Entry节点直接采用内部类的方式实现，实现了Map.Entry类，其数据结构源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="type">int</span> hash;</span><br><span class="line">    K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;<span class="comment">// 下一个节点，构成链表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entry 节点中存储了元素的hash值，key, value，next引用。至此Hashtable的数据结构从源码就能看出来是数组+链表的方式实现的。</p><h3 id="1-3、HashTable-构造方法"><a href="#1-3、HashTable-构造方法" class="headerlink" title="1.3、HashTable 构造方法"></a>1.3、HashTable 构造方法</h3><h4 id="1-3-1、Hashtable"><a href="#1-3-1、Hashtable" class="headerlink" title="1.3.1、Hashtable()"></a>1.3.1、Hashtable()</h4><p>在默认构造方法中，调用了Hashtable(int initialCapacity, float loadFactor)方法，初始Hashtable的容量为11，负载因子为0.75，那么初始阈值就是8。这点和HashMap很不同，HashMap在初始化时，table的大小总是2的幂次方，即使给定一个不是2的幂次方容量的值，也会自动初始化为最接近其2的幂次方的容量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用默认初始容量（11）和加载因子（0.75）构造一个新的空哈希表。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-2、Hashtable-int-initialCapacity"><a href="#1-3-2、Hashtable-int-initialCapacity" class="headerlink" title="1.3.2、Hashtable(int initialCapacity)"></a>1.3.2、Hashtable(int initialCapacity)</h4><p>使用指定的初始容量和默认加载因子（0.75）构造一个新的空哈希表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定的初始容量和默认加载因子（0.75）构造一个新的空哈希表。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>     initialCapacity   初始容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> IllegalArgumentException if the initial capacity is less</span></span><br><span class="line"><span class="comment">     *              than zero.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-3、Hashtable-int-initialCapacity-float-loadFactor"><a href="#1-3-3、Hashtable-int-initialCapacity-float-loadFactor" class="headerlink" title="1.3.3、Hashtable(int initialCapacity, float loadFactor)"></a>1.3.3、Hashtable(int initialCapacity, float loadFactor)</h4><p>使用指定的初始容量和指定的加载因子构造一个新的空哈希表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定的初始容量和指定的加载因子构造一个新的空哈希表。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      initialCapacity   初始容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>      loadFactor        加载因子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span>  IllegalArgumentException  if the initial capacity is less</span></span><br><span class="line"><span class="comment">     *             than zero, or if the load factor is nonpositive.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Load: &quot;</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">            initialCapacity = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[initialCapacity];</span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-4、Hashtable-Map-t"><a href="#1-3-4、Hashtable-Map-t" class="headerlink" title="1.3.4、Hashtable(Map&lt;? extends K,? extends V&gt; t)"></a>1.3.4、Hashtable(Map&lt;? extends K,? extends V&gt; t)</h4><p>构造一个新的哈希表，其具有与给定Map相同的映射。 创建哈希表的初始容量足以容纳给定Map中的映射和默认加载因子（0.75）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造一个新的哈希表，其具有与给定Map相同的映射。 创建哈希表的初始容量足以容纳给定Map中的映射和默认加载因子（0.75）。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> t 指定的map</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException 如果给定的 map 是 null.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span>   1.2</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</span><br><span class="line">       putAll(t);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="2、HashTable-源码分析"><a href="#2、HashTable-源码分析" class="headerlink" title="2、HashTable 源码分析"></a>2、HashTable 源码分析</h2><h3 id="2-1、put-方法"><a href="#2-1、put-方法" class="headerlink" title="2.1、put 方法"></a>2.1、put 方法</h3><p>put方法是同步的，即线程安全的，这点和HashMap不一样，还有具体的put操作和HashMap也存在很大的差别，Hashtable插入的时候是插入到链表头部，而HashMap是插入到链表尾部</p><p>put 方法的整体逻辑如下：</p><p>🌂判断 value 是否为空，为空则抛出异常；<br>🌂计算 key 的 hash 值，并根据 hash 值获得 key 在 table 数组中的位置 index，如果 table[index] 元素不为空，则进行迭代，如果遇到相同的 key，则直接替换，并返回旧 value；<br>🌂否则，我们可以将其插入到 table[index] 位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">// Hashtable 中不能插入value为null的元素</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">// 若“Hashtable中已存在键为key的键值对”，则用“新的value”替换“旧的value”</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="comment">//直接取key的hashCode()作为哈希地址，这与HashMap的取hashCode()之后再进行hash()的结果作为哈希地址 不一样</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="comment">//数组下标=(哈希地址 &amp; 0x7FFFFFFF) % Hashtable容量，这与HashMap的数组下标=哈希地址 &amp; (HashMap容量-1)计算数组下标方式不一样，前者是取模运算，后者是位于运算，这也是为什么HashMap的容量要是2的幂次方的原因，效率上后者的效率更高。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="comment">//获取key所在索引的entry</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    <span class="comment">//遍历Entry链表，如果链表中存在key、哈希地址相同的节点，则将值更新，返回旧值</span></span><br><span class="line">    <span class="keyword">for</span>(; entry != <span class="literal">null</span> ; entry = entry.next) &#123;</span><br><span class="line">         <span class="comment">//如果key已经存在</span></span><br><span class="line">        <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">            <span class="comment">//保存旧的value</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">old</span> <span class="operator">=</span> entry.value;</span><br><span class="line">            <span class="comment">//替换value</span></span><br><span class="line">            entry.value = value;</span><br><span class="line">            <span class="comment">//返回旧的value</span></span><br><span class="line">            <span class="keyword">return</span> old;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果为新的节点，则调用addEntry()方法添加新的节点</span></span><br><span class="line">    addEntry(hash, key, value, index);</span><br><span class="line">    <span class="comment">//插入成功返回null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据参数向table中添加entry</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">   <span class="comment">// 修改次数+1</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 记录当前的table</span></span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="comment">// 如果当前的entry数量大于临界值</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">         <span class="comment">// 扩容</span></span><br><span class="line">        rehash();</span><br><span class="line">        <span class="comment">//记录新的table</span></span><br><span class="line">        tab = table;</span><br><span class="line">        <span class="comment">//重新计算key的hash</span></span><br><span class="line">        hash = key.hashCode();</span><br><span class="line">        <span class="comment">//重新计算index</span></span><br><span class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前Entry链表的引用 复赋值给e</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">    <span class="comment">//创建新的Entry链表，将新的节点插入到Entry链表的头部，再指向之前的Entry，即在链表头部插入节点</span></span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">//table大小+1</span></span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码，我们可以看出 HashMap 与 Hashtable 计算索引的方式是不一样的：</p><p>🌂HashMap 计算索引的方式是h&amp;(length-1),而Hashtable用的是模运算，效率上是低于HashMap的<br>🌂Hashtable计算索引时将hash值先与上0x7FFFFFFF,这是为了保证hash值始终为正数<br>🌂特别需要注意的是这个方法加了synchronized关键字，也就意味着这个Hashtable是个线程安全的类，这也是它和HashMap最大的不同点</p><h3 id="2-2、get-方法"><a href="#2-2、get-方法" class="headerlink" title="2.2、get 方法"></a>2.2、get 方法</h3><p>get方法也是同步的，和HashMap不一样,即线程安全，具体的get操作和HashMap也有区别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">       Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">       <span class="comment">// 直接获取key的hashCode()作为哈希地址</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">       <span class="comment">// 通过(哈希地址 &amp; 0x7FFFFFFF)与Hashtable容量做%运算 计算出下标</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">       <span class="comment">//遍历Entry链表，如果链表中存在key、哈希地址一样的节点，则找到 返回该节点的值，否者返回null</span></span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;</span><br><span class="line">           <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">               <span class="keyword">return</span> (V)e.value;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-3、remove-方法"><a href="#2-3、remove-方法" class="headerlink" title="2.3、remove 方法"></a>2.3、remove 方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">        <span class="comment">// 遍历Entry链表，e为当前节点，prev为上一个节点</span></span><br><span class="line">        <span class="keyword">for</span>(Entry&lt;K,V&gt; prev = <span class="literal">null</span> ; e != <span class="literal">null</span> ; prev = e, e = e.next) &#123;</span><br><span class="line">           <span class="comment">// 找到key及哈希地址相等的节点</span></span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                modCount++;</span><br><span class="line">                <span class="comment">// 如果上一个节点不为空，将上一个节点的next指向当前节点的next，即将当前节点移除链表</span></span><br><span class="line">                <span class="keyword">if</span> (prev != <span class="literal">null</span>) &#123;</span><br><span class="line">                    prev.next = e.next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果上一个节点为空，即当前节点为头结点，将table数组保存的链表头结点地址改成当前节点的下一个节点</span></span><br><span class="line">                    tab[index] = e.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 键值对数量-1</span></span><br><span class="line">                count--;</span><br><span class="line">                <span class="comment">// 获取被删除节点的值，并返回</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                e.value = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-4、rehash-方法"><a href="#2-4、rehash-方法" class="headerlink" title="2.4、rehash 方法"></a>2.4、rehash 方法</h3><p>Hashtable 的rehash方法是用来扩容哈希表的。Hashtable每次扩容,容量都为原来的2倍加1,而HashMap为原来的2倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取旧的Hashtable的容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> table.length;</span><br><span class="line">    <span class="comment">// 获取旧的Hashtable引用</span></span><br><span class="line">    Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新的Hashtable容量=旧的Hashtable容量 * 2 + 1，HashMap是新的Hashtable容量=旧的Hashtable容量 * 2。</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 如果新的Hashtable容量大于允许的最大容量值(Integer的最大值 - 8)</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果旧的容量等于允许的最大容量值则返回</span></span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">            <span class="comment">// Keep running with MAX_ARRAY_SIZE buckets</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 新的容量等于允许的最大容量值</span></span><br><span class="line">        newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用新的容量构建一个新的Hashtable </span></span><br><span class="line">    Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 计算新的阈值</span></span><br><span class="line">    threshold = (<span class="type">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    table = newMap;</span><br><span class="line">    <span class="comment">// 扩容后迁移Hashtable的Entry链表</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="literal">null</span> ; ) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = old;</span><br><span class="line">            old = old.next;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">            e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">            newMap[index] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Hashtable-如何保证线程安全"><a href="#3、Hashtable-如何保证线程安全" class="headerlink" title="3、Hashtable 如何保证线程安全"></a>3、Hashtable 如何保证线程安全</h2><p>通过Hashtable源码，我们发现对外提供的public方法，几乎全部加上了synchronized关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;K&gt; <span class="title function_">keys</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;V&gt; <span class="title function_">elements</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object value)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>所以从这个特性上看，Hashtable是通过简单粗暴的方式来保证线程安全的额。所以Hashtable的性能在多线程环境下会非常低效。前面介绍的ConcurrentHashMap其实就是Java开发团队为了替换他而开发的，性能提高了不少。</p><p>所以建议大家在多线程环境下使用 ConcurrentHashMap，或者用HashMap配合外部锁，例如ReentrantLock来提高效率。</p><h2 id="4、Hashtable-与-HashMap-的区别"><a href="#4、Hashtable-与-HashMap-的区别" class="headerlink" title="4、Hashtable 与 HashMap 的区别"></a>4、Hashtable 与 HashMap 的区别</h2><p><strong>不同点：</strong></p><p>🌂HashMap 继承于 AbstractMap抽象类，Hashtable 继承于Dictionay抽象类<br>🌂HashMap 是非线程安全的，Hashtable是线程安全的，所以Hashtable效率比较低<br>🌂HashMap 通过key的hashCode()进行hash()得到哈希地址，数组下标&#x3D;哈希地址 &amp; (容量 - 1)，采用的是与运算，所以容量需要是2的幂次方结果才和取模运算结果一样。而Hashtable则是：数组下标&#x3D;(key的🌂hashCode() &amp; 0x7FFFFFFF ) % 容量，采用的取模运算，所以容量没要求<br>🌂HashMap 允许键值为null，而Hashtable不允许键值为null<br>🌂HashMap 的容量扩容按照原来的容量2，而Hashtable的容量扩容按照原来的容量2+1<br>🌂HashMap 的容量默认值为16，而Hashtable的默认值是11<br>🌂HashMap 是将节点插入到链表的尾部，而Hashtable是将节点插入到链表的头部<br>🌂HashMap 采用了数组+链表+红黑树，而Hashtable采用数组+链表</p><p><strong>相同点：</strong></p><p>🌂HashMap 和 Hashtable 都实现了Map接口<br>🌂HashMap 和 Hashtable 的负载因子默认都是0.75<br>🌂都是采用链地址法即拉链法处理哈希冲突<br>🌂相同哈希地址可能分配到不同的链表，同一个链表内节点的哈希地址不一定相同：因为HashMap和Hashtable都会扩容，扩容后相同的哈希地址取到的数组下标也就不一样。</p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基本操作汇总</title>
      <link href="/2020/05/01/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
      <url>/2020/05/01/mysql%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="一、对数据库的操作"><a href="#一、对数据库的操作" class="headerlink" title="一、对数据库的操作"></a>一、对数据库的操作</h2><h3 id="1-创建一个库"><a href="#1-创建一个库" class="headerlink" title="1. 创建一个库"></a>1. 创建一个库</h3><p>create database 库名；</p><p>创建带有编码的：create database 库名 character set 编码；</p><p>查看编码：show create database 库名；</p><h3 id="2-删除一个库"><a href="#2-删除一个库" class="headerlink" title="2. 删除一个库"></a>2. 删除一个库</h3><p>drop database 库名；</p><h3 id="3-使用库"><a href="#3-使用库" class="headerlink" title="3. 使用库"></a>3. 使用库</h3><p>use 库名；</p><h3 id="4-查看当前正在操作的库"><a href="#4-查看当前正在操作的库" class="headerlink" title="4.查看当前正在操作的库"></a>4.查看当前正在操作的库</h3><p>select database();</p><h2 id="二、对数据库表的操作"><a href="#二、对数据库表的操作" class="headerlink" title="二、对数据库表的操作"></a>二、对数据库表的操作</h2><h3 id="1-创建一张表"><a href="#1-创建一张表" class="headerlink" title="1.创建一张表"></a>1.创建一张表</h3><p>create table 表名(</p><p>字段名 类型(长度) [约束],</p><p>字段名 类型(长度) [约束],</p><p>字段名 类型(长度) [约束]</p><p>);</p><h3 id="2-查看数据库表"><a href="#2-查看数据库表" class="headerlink" title="2.查看数据库表"></a>2.查看数据库表</h3><p>创建完成后，我们可以查看数据库表</p><p>show tables;</p><p><strong>查看表的结构</strong>：desc 表名</p><h3 id="3-删除一张表"><a href="#3-删除一张表" class="headerlink" title="3.删除一张表"></a>3.删除一张表</h3><p>drop table 表名</p><h3 id="4-修改表"><a href="#4-修改表" class="headerlink" title="4.修改表"></a>4.修改表</h3><h4 id="4-1-添加一列"><a href="#4-1-添加一列" class="headerlink" title="4.1 添加一列"></a>4.1 添加一列</h4><p>alter table 表名 add 字段名 类型(长度) [约束]</p><h4 id="4-2-修改列的类型-长度、约束"><a href="#4-2-修改列的类型-长度、约束" class="headerlink" title="4.2 修改列的类型(长度、约束)"></a>4.2 修改列的类型(长度、约束)</h4><p>alter table 表名 modify 要修改的字段名 类型(长度) [约束]</p><h4 id="4-3-修改列的列名"><a href="#4-3-修改列的列名" class="headerlink" title="4.3 修改列的列名"></a>4.3 修改列的列名</h4><p>alter table 表名 change 旧列名 新列名 类型(长度) [约束]</p><h4 id="4-4-删除表的列"><a href="#4-4-删除表的列" class="headerlink" title="4.4 删除表的列"></a>4.4 删除表的列</h4><p>alter table 表名 drop 列名</p><h4 id="4-5-修改表名"><a href="#4-5-修改表名" class="headerlink" title="4.5 修改表名"></a>4.5 修改表名</h4><p>rename table 表名 to 新表名</p><h4 id="4-6-修改表的字符集"><a href="#4-6-修改表的字符集" class="headerlink" title="4.6 修改表的字符集"></a>4.6 修改表的字符集</h4><p>alter table 表名 character set 编码</p><h4 id="4-7查看当前表的编码"><a href="#4-7查看当前表的编码" class="headerlink" title="4.7查看当前表的编码"></a>4.7查看当前表的编码</h4><p>show create table 表名</p><h2 id="三、对数据库表记录进行操作-重点"><a href="#三、对数据库表记录进行操作-重点" class="headerlink" title="三、对数据库表记录进行操作(重点)"></a>三、对数据库表记录进行操作(重点)</h2><h3 id="1-插入记录"><a href="#1-插入记录" class="headerlink" title="1.插入记录"></a>1.插入记录</h3><p>insert into 表名(列名1,列名2,列名3……) values(值1,值2,值3……)</p><p>insert into 表名 values(值1,值2,值3……)</p><h3 id="2-修改表记录"><a href="#2-修改表记录" class="headerlink" title="2.修改表记录"></a>2.修改表记录</h3><h4 id="2-1-不带条件的"><a href="#2-1-不带条件的" class="headerlink" title="2.1 不带条件的"></a>2.1 不带条件的</h4><p>update 表名 set 字段名&#x3D;值, 字段名&#x3D;值, 字段名&#x3D;值……(它会将该列的所有记录都更改)</p><h4 id="2-2-带条件的"><a href="#2-2-带条件的" class="headerlink" title="2.2 带条件的"></a>2.2 带条件的</h4><p>update 表名 set字段名&#x3D;值, 字段名&#x3D;值, 字段名&#x3D;值…… where 条件</p><h3 id="3-删除表记录"><a href="#3-删除表记录" class="headerlink" title="3.删除表记录"></a>3.删除表记录</h3><h4 id="3-1带条件的"><a href="#3-1带条件的" class="headerlink" title="3.1带条件的"></a>3.1带条件的</h4><p>delete from 表名 where 条件</p><h4 id="3-2-不带条件的"><a href="#3-2-不带条件的" class="headerlink" title="3.2.不带条件的"></a>3.2.不带条件的</h4><p>先准备数据</p><p>delete from 表名;</p><h4 id="3-3-面试题"><a href="#3-3-面试题" class="headerlink" title="3.3 *面试题*"></a><strong>3.3 *<em>面试题*</em></strong></h4><p>说说delete与truncate的区别？</p><p>delete删除的时候是一条一条的删除记录，它配合事务，可以将删除的数据找回。</p><p>truncate删除，它是将整个表摧毁，然后再创建一张一模一样的表。它删除的数据无法找回。</p><h2 id="4-查询操作"><a href="#4-查询操作" class="headerlink" title="4.查询操作"></a>4.查询操作</h2><p>语法：</p><p>select [distinct] *| 列名，列名 from 表名 [where条件]</p><h4 id="4-1-简单查询-以下表为例"><a href="#4-1-简单查询-以下表为例" class="headerlink" title="4.1 简单查询(以下表为例)"></a>4.1 简单查询(以下表为例)</h4><p><strong>product表：</strong></p><table><thead><tr><th>pid</th><th>pname</th><th>price</th><th>pdata</th></tr></thead><tbody><tr><td>1</td><td>关羽</td><td>10</td><td>2020</td></tr><tr><td>2</td><td>张飞</td><td>99</td><td>2021</td></tr><tr><td>3</td><td>刘备</td><td>56</td><td>2023</td></tr></tbody></table><h5 id="1-查询所有商品"><a href="#1-查询所有商品" class="headerlink" title="1.查询所有商品"></a>1.查询所有商品</h5><p>select * from product；</p><ol start="2"><li><h5 id="查询商品名和商品价格"><a href="#查询商品名和商品价格" class="headerlink" title="查询商品名和商品价格"></a>查询商品名和商品价格</h5></li></ol><p>select pname,price from product;</p><h5 id="3-查询所有商品信息使用表别名"><a href="#3-查询所有商品信息使用表别名" class="headerlink" title="3.查询所有商品信息使用表别名"></a>3.查询所有商品信息使用表别名</h5><p>select * from product as p;      (其中这个as可以省略)</p><h5 id="4-查询商品名，使用列别名"><a href="#4-查询商品名，使用列别名" class="headerlink" title="4.查询商品名，使用列别名"></a>4.查询商品名，使用列别名</h5><p>select pname as p from product</p><h5 id="5-去掉重复值-按照价格"><a href="#5-去掉重复值-按照价格" class="headerlink" title="5.去掉重复值(按照价格)"></a>5.去掉重复值(按照价格)</h5><p>select <strong>distinct</strong>(price) from product</p><h5 id="6-将所有的商品的价格-10进行显示"><a href="#6-将所有的商品的价格-10进行显示" class="headerlink" title="6.将所有的商品的价格+10进行显示"></a>6.将所有的商品的价格+10进行显示</h5><p>select pname,price+10 from product;</p><h4 id="4-2-条件查询"><a href="#4-2-条件查询" class="headerlink" title="4.2 条件查询"></a>4.2 条件查询</h4><h5 id="1-查询商品名称为”张飞”的商品信息"><a href="#1-查询商品名称为”张飞”的商品信息" class="headerlink" title="1.查询商品名称为”张飞”的商品信息"></a>1.查询商品名称为”张飞”的商品信息</h5><p>select * from product where pname&#x3D;’张飞’;</p><h5 id="2-查询价格-60元的所有商品信息"><a href="#2-查询价格-60元的所有商品信息" class="headerlink" title="2.查询价格&gt;60元的所有商品信息"></a>2.查询价格&gt;60元的所有商品信息</h5><p>select * from product where price&gt;60;</p><h5 id="3-查询商品名称含有”羽”字的商品信息"><a href="#3-查询商品名称含有”羽”字的商品信息" class="headerlink" title="3.查询商品名称含有”羽”字的商品信息"></a>3.查询商品名称含有”羽”字的商品信息</h5><p>select* from product where pname like‘%羽%’；</p><h5 id="4-查询商品id在-1，2，5-范围内的所有商品信息"><a href="#4-查询商品id在-1，2，5-范围内的所有商品信息" class="headerlink" title="4.查询商品id在(1，2，5)范围内的所有商品信息"></a>4.查询商品id在(1，2，5)范围内的所有商品信息</h5><p>select* from product where pid in（1，2，5）；</p><h5 id="5-查询商品名称含有”羽”字并且id为2的商品信息"><a href="#5-查询商品名称含有”羽”字并且id为2的商品信息" class="headerlink" title="5.查询商品名称含有”羽”字并且id为2的商品信息"></a>5.查询商品名称含有”羽”字并且id为2的商品信息</h5><p>select* from product where pname like‘%羽%’and pid&#x3D;2；</p><h5 id="6-查询id为2或者6的商品信息"><a href="#6-查询id为2或者6的商品信息" class="headerlink" title="6.查询id为2或者6的商品信息"></a>6.查询id为2或者6的商品信息</h5><p>select* from product where pname like‘%羽%’or pid&#x3D;2；</p><h4 id="4-3-排序"><a href="#4-3-排序" class="headerlink" title="4.3 排序"></a>4.3 排序</h4><h5 id="1-查询所有的商品，按价格进行排序-升序、降序"><a href="#1-查询所有的商品，按价格进行排序-升序、降序" class="headerlink" title="1.查询所有的商品，按价格进行排序(升序、降序)"></a>1.查询所有的商品，按价格进行排序(升序、降序)</h5><p><strong>升序:</strong> select* from product  order by price asc;</p><p>**降序:*<em>elect</em> from product  order by price desc;</p><h5 id="2-查询名称有”羽”的商品信息并且按照价格降序排序"><a href="#2-查询名称有”羽”的商品信息并且按照价格降序排序" class="headerlink" title="2.查询名称有”羽”的商品信息并且按照价格降序排序"></a>2.查询名称有”羽”的商品信息并且按照价格降序排序</h5><p>select* from product where pname like‘%羽%’order by price desc;</p><h4 id="4-4-聚合函数"><a href="#4-4-聚合函数" class="headerlink" title="4.4 聚合函数"></a>4.4 聚合函数</h4><h5 id="1-获得所有商品的价格的总和"><a href="#1-获得所有商品的价格的总和" class="headerlink" title="1.获得所有商品的价格的总和"></a>1.获得所有商品的<strong>价格</strong>的总和</h5><p>select sum(price) from product;</p><h5 id="2-获得所有商品的平均价格"><a href="#2-获得所有商品的平均价格" class="headerlink" title="2.获得所有商品的平均价格"></a>2.获得所有商品的平均价格</h5><p>select avg(price) from product;</p><h5 id="3-获得所有商品的个数"><a href="#3-获得所有商品的个数" class="headerlink" title="3.获得所有商品的个数"></a>3.获得所有商品的个数</h5><p>select count(*) from product;</p><h4 id="4-5-分组操作"><a href="#4-5-分组操作" class="headerlink" title="4.5 分组操作"></a>4.5 分组操作</h4><h5 id="1-添加分类id"><a href="#1-添加分类id" class="headerlink" title="1.添加分类id"></a>1.添加分类id</h5><p>alter table product add cid varchar(32);</p><h5 id="2-初始化数据"><a href="#2-初始化数据" class="headerlink" title="2.初始化数据"></a>2.初始化数据</h5><p>update product set cid&#x3D;’1’;</p><p>update product set cid&#x3D;’2’ where  pid in (5,6,7);</p><p>1.根据cid字段分组，分组后统计商品的个数。</p><p>Select cid,count(*) from product group by cid;</p><p>2.根据cid分组，分组统计每组商品的平均价格，并且平均价格大于20000元。</p><p>select cid,avg(price) from product group by cid having avg(price)&gt;&gt;20000;</p><p>4.6 查询总结</p><p>select  一般在的后面的内容都是要查询的字段</p><p>from  要查询到表</p><p>where</p><p>group by</p><p>having  分组后带有条件只能使用having</p><p>order by 它必须放到最后面</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQ建表</title>
      <link href="/2020/04/20/MySQ%E5%BB%BA%E8%A1%A8/"/>
      <url>/2020/04/20/MySQ%E5%BB%BA%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>首先纵观数据库原理及应用书上主要围绕几张表格进行的。比如学生表呀………这里就首先统一建立起来方便后面应用！</p><h2 id="一·建立数据库"><a href="#一·建立数据库" class="headerlink" title="一·建立数据库"></a>一·建立数据库</h2><p><strong>命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p>这里建立书上第一个需要用到的数据库命名为shangji1(名字随意)</p><h2 id="二·建立表格"><a href="#二·建立表格" class="headerlink" title="二·建立表格"></a>二·建立表格</h2><p><strong>注意：</strong>建表之前一定记得选定表明（use 表名；)这里建立本学期常用的表格及附上代码，以便后期复习。</p><p><strong>Student：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Student</span><br><span class="line">(Sno CHAR(9)PRIMARY KEY,</span><br><span class="line"> Sname CHAR(20) UNIQUE,</span><br><span class="line"> Sex CHAR(2),</span><br><span class="line"> Sage SMALLINT,</span><br><span class="line"> Sdept CHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Course：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Course</span><br><span class="line">(Cno CHAR(4)PRIMARY KEY,</span><br><span class="line"> Cname CHAR(40)NOT NULL,</span><br><span class="line"> Cpno CHAR(4),</span><br><span class="line"> Ccredit SMALLINT,</span><br><span class="line"> FOREIGN KEY(Cpno)REFERENCES Course(Cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>SC：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE SC </span><br><span class="line">(Sno CHAR(9),</span><br><span class="line"> Cno CHAR(4),</span><br><span class="line"> Grade SMALLINT,</span><br><span class="line"> PRIMARY KEY(Sno,Cno),</span><br><span class="line"> FOREIGN KEY(Sno)REFERENCES Student(Sno),</span><br><span class="line"> FOREIGN KEY(Cno)REFERENCES Course(Cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>S:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE S</span><br><span class="line"> (SNO CHAR(20)PRIMARY KEY,</span><br><span class="line">  SNAME CHAR(20),</span><br><span class="line">  STATUS CHAR(20),</span><br><span class="line">  CITY CHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>p:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE P</span><br><span class="line"> (PNO CHAR(20)PRIMARY KEY,</span><br><span class="line">  PNAME CHAR(20),</span><br><span class="line">  COLOR CHAR(20),</span><br><span class="line">  WEIGHT CHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>J:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS P</span><br><span class="line"> (PNO CHAR(20)PRIMARY KEY,</span><br><span class="line">  PNAME CHAR(20),</span><br><span class="line">  COLOR CHAR(20),</span><br><span class="line">  WEIGHT CHAR(20)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>SPJ:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create table spj(</span><br><span class="line">sno char(5),</span><br><span class="line">pno char(5),</span><br><span class="line">jno char(5),</span><br><span class="line">qty int,</span><br><span class="line">primary key(sno,pno,jno),</span><br><span class="line">foreign key(sno) references s(sno),</span><br><span class="line">foreign key(pno) references p(pno),</span><br><span class="line">foreign key(jno) references j(jno)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 常用命令整理</title>
      <link href="/2020/04/20/mysql%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2020/04/20/mysql%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​         大二下终于开始学习数据库这门课程了，然而特别有意思的是竟然是在家上网课 ，哎，，，，，，这也是没办法呀，为国家做贡献嘛，本着好好学习，天天向上的态度，自己补一补上机的内容，毕竟这也没办法上机实践，于是乎开始学习基本的mysql常用命令，毕竟磨刀不误砍柴工，开干…………………</p><h2 id="一、连接"><a href="#一、连接" class="headerlink" title="一、连接"></a>一、连接</h2><p>因为还没尝试过远程，所以这里就用本地做实验，在已安装数据库的情况下有两种方法进入并且连接数据库。</p><p>(1)在cmd下直接运行 mysql -uroot -p    然后输入数据库密码就行</p><p>(2)直接打开MySQL输入密码即可</p><p>最后连接成功如下图：</p><p><img src="https://s1.ax1x.com/2020/04/20/JliLXq.png"></p><h2 id="二、退出命令"><a href="#二、退出命令" class="headerlink" title="二、退出命令"></a>二、退出命令</h2><p>格式：exit 或 quit</p><p>ps:英语基础稍微好点儿的都知道这两个单词都是退出的意思！</p><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//需要连接后使用，mysql&gt;下执行</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="三、数据库操作命令"><a href="#三、数据库操作命令" class="headerlink" title="三、数据库操作命令"></a>三、数据库操作命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//查看数据库</span><br><span class="line">show databases</span><br><span class="line">//使用默认字符集和排序规则创建数据库</span><br><span class="line">create database db_name; </span><br><span class="line">//创建数据库并指定字符集编码</span><br><span class="line">create database if not exists db_name default character set = &#x27;utf8&#x27;;</span><br><span class="line">//创建数据库并指定字符集编码和排序规则</span><br><span class="line">create database db_name DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;</span><br><span class="line">//删除数据库</span><br><span class="line">drop database db_name</span><br><span class="line">//指定当前数据库</span><br><span class="line">USE db1;</span><br></pre></td></tr></table></figure><h2 id="四、数据表操作命令"><a href="#四、数据表操作命令" class="headerlink" title="四、数据表操作命令"></a>四、数据表操作命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//指定当前数据库</span><br><span class="line">USE db1;</span><br><span class="line">//查询表</span><br><span class="line">show tables</span><br><span class="line">//显示表结构</span><br><span class="line">desc tb_name；</span><br><span class="line">//创建表</span><br><span class="line">create table Student(</span><br><span class="line"> Sno varchar(10) primary key,</span><br><span class="line"> Sname varchar(20) unique,</span><br><span class="line"> Ssex varchar(2),</span><br><span class="line"> Sage int,</span><br><span class="line"> Sclass varchar(20)</span><br><span class="line">)；</span><br><span class="line">//删除表</span><br><span class="line"> drop table tb_name;</span><br></pre></td></tr></table></figure><h2 id="五、增删改查表数据"><a href="#五、增删改查表数据" class="headerlink" title="五、增删改查表数据"></a>五、增删改查表数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//插入数据</span><br><span class="line">insert into Student values (&#x27;20180001&#x27;,&#x27;小明&#x27;,&#x27;男&#x27;,20,&#x27;一班&#x27;);</span><br><span class="line">//按字段插入数据</span><br><span class="line">insert into Student (Sno,Sname,Ssex,Sage,Sclass) values (&#x27;20180003&#x27;,&#x27;小红&#x27;,&#x27;男&#x27;,18,&#x27;二班&#x27;);</span><br><span class="line">//删除记录</span><br><span class="line">delete from Student where Sno=&#x27;20180001&#x27;</span><br><span class="line">//删除所有</span><br><span class="line">delete * from Student</span><br><span class="line">//更新</span><br><span class="line">update Student set Sclass = &#x27;一班&#x27; where Sname=&#x27;小红&#x27;</span><br><span class="line">//查询</span><br><span class="line">select * from Student; </span><br></pre></td></tr></table></figure><h2 id="六、用户和权限管理"><a href="#六、用户和权限管理" class="headerlink" title="六、用户和权限管理"></a>六、用户和权限管理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">//指定数据库</span><br><span class="line">Use mysql;</span><br><span class="line">//查询所有用户</span><br><span class="line">Select user,host from user;</span><br><span class="line">//创建本地访问用户</span><br><span class="line">create user admin@&#x27;localhost&#x27; identified by &#x27;密码&#x27;;</span><br><span class="line">//创建允许远程访问用户</span><br><span class="line">create user admin@&#x27;%&#x27; identified by &#x27;密码&#x27;;</span><br><span class="line">//授权所有权限</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO admin@&quot;localhost&quot;;</span><br><span class="line">//授权所有权限</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO admin@&quot;%&quot;;</span><br><span class="line">//修改密码 mysql 5.7-8.0</span><br><span class="line">ALTER USER &#x27;admin&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br><span class="line">//修改密码 mysql 5.6</span><br><span class="line">update user set password=password(&quot;你的新密码&quot;) where user=&quot;admin&quot;;</span><br><span class="line">//修改密码 mysql 5.5</span><br><span class="line">use mysql;</span><br><span class="line">set password for admin@localhost = password(&#x27;密码&#x27;);</span><br><span class="line">//刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line">//删除用户</span><br><span class="line">drop user admin@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h2 id="七、查看mysql常用参数"><a href="#七、查看mysql常用参数" class="headerlink" title="七、查看mysql常用参数"></a>七、查看mysql常用参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//查询mysql版本</span><br><span class="line">select @@version;</span><br><span class="line">select version();</span><br><span class="line">//查询进程列表</span><br><span class="line"> show processlist;</span><br><span class="line">//查看进程列表完整信息</span><br><span class="line">show full processlist;</span><br><span class="line">//查看线程数</span><br><span class="line">show status like &#x27;Threads%&#x27;; </span><br><span class="line">//查看连接数</span><br><span class="line">show variables like &#x27;%max_connections%&#x27;; </span><br><span class="line">//查看数据默认字符集</span><br><span class="line">show variables like &#x27;%character%&#x27;;</span><br><span class="line">//查看数据库默认排序规则</span><br><span class="line">show variables like &#x27;collation%&#x27;;</span><br><span class="line">//查看支持字符集</span><br><span class="line">show charset;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统概论篇一（理论)</title>
      <link href="/2020/04/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E7%AF%87%E4%B8%80%EF%BC%88%E7%90%86%E8%AE%BA)/"/>
      <url>/2020/04/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA%E7%AF%87%E4%B8%80%EF%BC%88%E7%90%86%E8%AE%BA)/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>​              这注定是一个不平凡的专业课，2020年，竟然tad在家上网课，也是醉的不要不要的啦，关键是还没有课本，这个你说说谁受的了，笔者好不容易拿到一个pdf的书，本着计算机传统的囫囵吞枣的读起来，这不学完了第一篇在这儿记录一下，没事儿的时候拿来巩固一下，加强记忆！</p><p><img src="https://s1.ax1x.com/2020/04/19/JKAvsP.png"></p><h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h3 id="1-1-数据库系统概述"><a href="#1-1-数据库系统概述" class="headerlink" title="1.1 数据库系统概述"></a>1.1 数据库系统概述</h3><h4 id="1、数据库系统的四个基本概念"><a href="#1、数据库系统的四个基本概念" class="headerlink" title="1、数据库系统的四个基本概念"></a>1、数据库系统的四个基本概念</h4><p><strong>数据（Data）：</strong>描述事物的符号记录称为数据，数据是数据库存储的基本对象。</p><p><strong>数据库（DB）：</strong>长期存储在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按照一定的数据模型组织、描述和存储，具有较小的冗余度、较高的数据独立性和易扩展性，并可为各种用户共享。概括地讲，数据库数据具有<em><strong>永久储存</strong></em>、<em><strong>有组织</strong></em>和<em><strong>可共享</strong></em>三个基本特点。</p><p><strong>数据库管理系统（DBMS）：</strong>位于用户和操作系统之间的一层数据管理软件。主要功能包括提供数据定义语言（DDL）、数据的组织存储和管理、提供数据操纵语言（DML）、事务管理和运行管理、创建和维护等。</p><p><strong>数据库系统（DBS）：</strong>数据库系统是由数据库、数据库管理系统、应用程序和数据库管理员（DBA）组成的存储、管理和维护数据的系统。<strong>DBS&#x3D;DB+DBMS+APP+DBA</strong>。</p><h4 id="2、数据管理技术的产生和发展"><a href="#2、数据管理技术的产生和发展" class="headerlink" title="2、数据管理技术的产生和发展"></a>2、数据管理技术的产生和发展</h4><p>数据管理的三个阶段：<strong>人工管理</strong>、<strong>文件管理</strong>、<strong>数据库管理系统</strong></p><p><strong>文件系统与数据库管理系统的区别</strong></p><table><thead><tr><th></th><th>人工管理阶段</th><th>文件系统阶段</th><th>数据库系统阶段</th></tr></thead><tbody><tr><td>数据的管理者</td><td>用户（程序员）</td><td>文件系统</td><td>数据库管理系统</td></tr><tr><td>数据面向的对象</td><td>某一应用程序</td><td>某一应用</td><td>现实世界（法人、社团）</td></tr><tr><td>数据的共享程度</td><td>无共享，冗余性极大</td><td>共享性差，冗余度大</td><td>共享性高，冗余度小</td></tr><tr><td>数据的独立性</td><td>不独立，完全依赖于程序</td><td>独立性差</td><td>具有高度的物理独立性和一定的逻辑独立性</td></tr><tr><td>数据的结构性</td><td>无结构</td><td>记录内有结构、整体无结构</td><td>整体结构化，用数据模型描述</td></tr><tr><td>数据控制能力</td><td>应用程序自己控制</td><td>应用程序自己控制</td><td>由数据库管理系统提供数据安全性、完整性、并发控制和恢复能力</td></tr></tbody></table><h4 id="3、数据库系统的特点"><a href="#3、数据库系统的特点" class="headerlink" title="3、数据库系统的特点"></a>3、数据库系统的特点</h4><p>数据结构化；数据的共享性高、冗余性低且易扩充；数据独立性高；数据由数据库管理系统统一管理和控制。</p><h3 id="1-2-数据模型"><a href="#1-2-数据模型" class="headerlink" title="1.2 数据模型"></a>1.2 数据模型</h3><p>数据模型：对现实世界数据特征的抽象，用来描述数据、组织数据和操作数据，是数据库系统的核心和基础。</p><h4 id="1、两类数据模型："><a href="#1、两类数据模型：" class="headerlink" title="1、两类数据模型："></a>1、两类数据模型：</h4><p>①概念模型     ②逻辑模型和物理模型</p><p>🌂<strong>概念模型</strong>：按照用户的观点对数据和信息建模，主要用于数据库设计。<br>🌂<strong>逻辑模型：</strong>按照计算机系统的观点对数据建模，主要用于数据库管理系统的实现。<br>🌂<strong>物理模型：</strong>对数据最底层的抽象，描述数据在系统内部或存储介质上的表示方式和存取方法。<br>🌂<strong>构建数据模型的方法：</strong>将现实世界抽象为信息世界，得到概念模型；将信息世界转换为机器世界，得到DBMS支持的数据模型。</p><h4 id="2、概念模型："><a href="#2、概念模型：" class="headerlink" title="2、概念模型："></a>2、概念模型：</h4><p><strong>信息世界中的基本概念：</strong><br>（1）实体：客观存在并可相互区别的事物。<br>（2）属性：实体的特性称为属性。<br>（3）码：唯一标识实体的属性集称为码。<br>（4）实体型：用实体名及其属性名集合来抽象和刻画同类实体，称为实体型。<br>（5）实体集：同一类型的实体的集合称为实体集。<br>（6）联系：实体内部的联系指组成实体的属性之间的联系，实体之间的联系指不同实体集之间的联系。实体之间的联系有一对一、一对多和多对多等多种类型。</p><p><strong>概念模型的表示方法：</strong>实体-联系（<em><strong>E-R</strong></em>）方法，该方法使用E-R图描述概念模型。</p><h4 id="3、数据模型的组成要素"><a href="#3、数据模型的组成要素" class="headerlink" title="3、数据模型的组成要素"></a>3、数据模型的组成要素</h4><p>数据模型通常由<strong>数据结构</strong>、<strong>数据操作</strong>和<strong>完整性约束条件</strong>三部分组成。数据结构描述数据库组成对象和对象之间的联系；数据操作指对数据库中各种对象（型）的实例（值）允许执行操作的集合；数据的完整性约束条件是一组完整性规则，包括实体完整性、参照完整性和用户定义的完整性。</p><h4 id="4、常用的数据模型"><a href="#4、常用的数据模型" class="headerlink" title="4、常用的数据模型"></a>4、常用的数据模型</h4><p>层次模型、网状模型、关系模型、面向对象数据模型、对象关系数据模型、半结构化数据模型等。</p><h4 id="5、层次模型（用的少）"><a href="#5、层次模型（用的少）" class="headerlink" title="5、层次模型（用的少）"></a>5、层次模型（用的少）</h4><p><strong>优点：</strong></p><p>🌂数据结构简单清晰。</p><p>🌂因为记录之间的联系用有向边表示，这种联系在DBMS中通常使用指针实现，查询效率高。层次模型数据库性能优于关系数据库，不低于网状数据库。</p><p>🌂提供了良好的完整性支持。进行插入操作时，如果没有对应的双亲结点就不能插入它的子女结点值。进行删除操作时，如果删除双亲结点，则相应的子女结点值也将被同时删除。</p><p><strong>缺点：</strong></p><p>🌂现实世界中的很多联系是非层次性的。如果结点之间具有多对多联系，不再适合使用层次模型表示。如果一个子女结点确实具有多个双亲结点，使用层次结构模型表示的时候就会出现大量的冗余，且操作复杂。</p><p>🌂查询子女结点必须通过双亲结点。</p><p>🌂由于结构严密，层次命令趋于程序化。</p><h4 id="6、网状模型（用的少）"><a href="#6、网状模型（用的少）" class="headerlink" title="6、网状模型（用的少）"></a>6、网状模型（用的少）</h4><p><strong>优点：</strong></p><p>🌂能够更为直接地表示现实世界。</p><p>🌂具有良好的性能，存取效率高。<br><strong>缺点：</strong></p><p>🌂结构复杂，伴随应用环境的扩大，数据结构变得越来越复杂，不利于最终用户掌握。</p><p>🌂网状模型的数据定义语言和数据管理语言复杂。</p><p>🌂由于记录之间的联系通过存取路径实现，应用程序在访问数据的时候必须选择恰当的存取路径，因此用户必须了解系统结构的细节，导致加重了编写应用程序的负担。</p><h4 id="7、关系模型"><a href="#7、关系模型" class="headerlink" title="7、关系模型"></a>7、关系模型</h4><p><strong>优点：</strong></p><p>🌂关系模型建立在严格的数学概念的基础之上。</p><p>🌂关系模型概念单一。无论是实体还是实体之间的联系都用关系来表示。对数据的检索和更新结果也是基于关系（表）的。所以，数据结构简单清晰，用户易懂易用。</p><p>🌂关系模型的存取路径对用户透明，从而具有较高的数据独立性，更好的安全保密性，也简化了程序员的工作和数据库开发建立的工作。</p><p><strong>缺点：</strong></p><p>🌂由于存取路径对用户是透明的，查询效率往往不如格式化数据模型。</p><p>🌂为了提高系统性能，数据库管理系统必须对用户的查询请求进行优化。</p><p><strong>关系模型的数据结构：</strong><br>（1）关系：一个关系对应通常所说的一张表。<br>（2）元组：表中的一行即为一个元组。<br>（3）属性：表中的一列即为一个属性。<br>（4）码&#x2F;键：唯一确定一个元组的属性集。<br>（5）域：一组具有相同数据类型的值的集合。属性的取值范围来自某个域。<br>（6）分量：元组中的一个属性值。<br>（7）关系模式：对关系的描述，一般表示为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关系名（属性<span class="number">1</span>，属性<span class="number">2</span>，…，属性n）</span><br><span class="line">关系模型的数据操作：增删改查</span><br></pre></td></tr></table></figure><p><strong>【必考】</strong>关系的完整性约束：实体完整性、参照完整性、用户定义的完整性<br>关系模型的评价：严格数学定义、概念单一、存储路径对用户透明、查询效率稍稍逊于格式化数据模型。</p><h3 id="1-3-数据库系统的结构"><a href="#1-3-数据库系统的结构" class="headerlink" title="1.3 数据库系统的结构"></a>1.3 数据库系统的结构</h3><h4 id="1、数据库系统模式的概念"><a href="#1、数据库系统模式的概念" class="headerlink" title="1、数据库系统模式的概念"></a>1、数据库系统模式的概念</h4><p><strong>“型”</strong>和<strong>“值”</strong>：型是指对某一类<strong>数据的结构和属性的说明</strong>，值是型的一个<strong>具体赋值</strong>。<br><strong>模式：</strong>数据库中全体数据的逻辑结构和特征的描述，仅仅涉及型的描述，不涉及具体的值。模式的一个具体值称为模式的一个实例。模式是相对稳定的，实例是相对变动的。</p><h4 id="2、数据库系统的三层模式结构"><a href="#2、数据库系统的三层模式结构" class="headerlink" title="2、数据库系统的三层模式结构"></a>2、数据库系统的三层模式结构</h4><p><img src="https://s1.ax1x.com/2020/04/19/JKkt6x.jpg"></p><p><strong>模式：</strong>也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共视图。在数据库系统模式结构中处于中间层，与硬件平台和应用程序无关。一个数据库只有一个模式。</p><p><strong>外模式：</strong>也称子模式和用户模式，它是数据库用户（应用程序员与最终用户）能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。外模式通常是模式的子集，一个数据库可以有很多外模式。</p><p><strong>内模式：</strong>也称存储模式，一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式。例如，记录的存储方式是堆存储、升序&#x2F;降序存储还是聚簇存储；B+树索引还是哈希索引；是否压缩存储，是否加密；数据存储记录结构是定长结构还是边长结构；等等。</p><h4 id="3、数据库的而二级映像功能与数据独立性"><a href="#3、数据库的而二级映像功能与数据独立性" class="headerlink" title="3、数据库的而二级映像功能与数据独立性"></a>3、数据库的而二级映像功能与数据独立性</h4><p>数据库的<strong>二级映像</strong>功能：外模式&#x2F;模式映像、模式&#x2F;内模式映像。</p><p><strong>外模式&#x2F;模式映像</strong>针对于每一个外模式，定义了外模式与模式的对应关系；模式&#x2F;内模式映像是唯一的，定义了数据全局逻辑结构与存储结构之间的对应关系。</p><p><strong>数据的逻辑独立性：</strong>当模式改变时，由DBA对各个外模式&#x2F;模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据逻辑独立性。</p><p><strong>数据的物理独立性：</strong>当数据库的存储结构改变时，由DBA对模式&#x2F;内模式映像作出相应改变，可以使模式保持不变，从而应用程序也不必改变，保证了数据与程序的物理独立性，简称数据物理独立性。</p><h3 id="1-4-数据库系统的组成"><a href="#1-4-数据库系统的组成" class="headerlink" title="1.4 数据库系统的组成"></a>1.4 数据库系统的组成</h3><p>数据库系统&#x3D;数据库+数据库管理系统+应用程序+数据库管理员<br><strong>数据库管理员（DBA）的职责：</strong><br>（1）决定数据库中的信息内容和结构；<br>（2）决定数据库的存储结构和存取策略；<br>（3）定义数据的安全性要求和完整性约束条件；<br>（4）监控数据库的使用与运行；<br>（5）数据库的改进、重组和重构</p><h2 id="第二章-关系数据库"><a href="#第二章-关系数据库" class="headerlink" title="第二章 关系数据库"></a>第二章 关系数据库</h2><h3 id="2-1-关系数据结构及形式化定义"><a href="#2-1-关系数据结构及形式化定义" class="headerlink" title="2.1 关系数据结构及形式化定义"></a>2.1 关系数据结构及形式化定义</h3><p>关系模型三要素：关系数据结构、关系操作集合、关系完整性约束</p><h4 id="1、关系"><a href="#1、关系" class="headerlink" title="1、关系"></a>1、关系</h4><p>关系：描述现实世界的实体以及实体之间的各种联系的单一结构类型就是关系，站在用户的视角，关系就是一张<strong>二维表</strong>。</p><h5 id="（1）域："><a href="#（1）域：" class="headerlink" title="（1）域："></a>（1）域：</h5><p>域是一组具有相同数据类型的集合。</p><h5 id="（2）笛卡尔积："><a href="#（2）笛卡尔积：" class="headerlink" title="（2）笛卡尔积："></a>（2）笛卡尔积：</h5><p>给定的一组域D1，D2，…，Dn，允许其中某些域是相同的，它们的笛卡尔积定义为</p><p>其中每一个元素(d1，d2，…，dn)叫做一个n元组，或简称元组，元组中的每一个分量di叫做一个分量。一个域允许的不同取值个数称为这个域的基数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D1×D2×…×Dn<span class="operator">=</span>&#123;(d1，d2，…，dn)<span class="operator">|</span>di∈Di，i<span class="operator">=</span><span class="number">1</span>，<span class="number">2</span>，…，n&#125;</span><br></pre></td></tr></table></figure><p>其中每一个元素(d1，d2，…，dn)叫做一个n元组，或简称元组，元组中的每一个分量di叫做一个分量。一个域允许的不同取值个数称为这个域的基数。</p><h5 id="（3）关系："><a href="#（3）关系：" class="headerlink" title="（3）关系："></a>（3）关系：</h5><p>D1×D2×…×Dn的子集叫做在域D1，D2，…，Dn上的关系，表示为R(D1，D2，…，Dn)，R表示关系的名字，n是关系的目或度。关系中的每个元素是关系中的元组，用t表示。</p><p>关系是笛卡尔积的有限子集，所以关系也是一张二维表，表的每一行表示一个元组，表的每一列对应一个域，区分域的列名就是属性名。</p><p>🌂候选码：某一属性组的的值能够唯一地标识一个元组，但是它的任何一个真子集不能，则称该属性组为候选码<br>🌂主码：若一个关系有多个候选码，则选定其中一个为主码。<br>🌂主属性：候选码的诸属性为主属性，不包含在任何候选码中的属性称为非主属性。<br>🌂全码：关系模式的所有属性构成这个关系模式的候选码，称为全码。<br>🌂关系类型：基本关系（基本表或基表）、查询表和视图表。基本表是实表；查询表是查询结果对应的表；视图表是导出表，是虚表。<br>🌂关系的补充限定：禁止无限关系，附加属性名来消除关系属性的有序性<br>🌂基本关系的6条性质：列同质、异列可同域、行列无序性、候选码唯一性、分量原子性</p><h4 id="2、关系模式"><a href="#2、关系模式" class="headerlink" title="2、关系模式"></a>2、关系模式</h4><p>关系模式：关系的描述称为模式，它的形式化表达为R(U,D,DOM,F)，其中R为关系名，U为属性名集合，D为属性域，DOM为属性向域的映像集合，F为属性间数据的依赖关系集合。</p><h4 id="3、关系数据库（略）"><a href="#3、关系数据库（略）" class="headerlink" title="3、关系数据库（略）"></a>3、关系数据库（略）</h4><h4 id="4、关系模型的存储结构（略）"><a href="#4、关系模型的存储结构（略）" class="headerlink" title="4、关系模型的存储结构（略）"></a>4、关系模型的存储结构（略）</h4><h3 id="2-2-关系操作"><a href="#2-2-关系操作" class="headerlink" title="2.2 关系操作"></a>2.2 关系操作</h3><h4 id="1、基本的关系操作：增删改查"><a href="#1、基本的关系操作：增删改查" class="headerlink" title="1、基本的关系操作：增删改查"></a>1、基本的关系操作：增删改查</h4><p>查询操作：选择、投影、连接、除、并、差、交、笛卡尔积</p><h4 id="2、关系数据语言的分类：关系代数和关系演算"><a href="#2、关系数据语言的分类：关系代数和关系演算" class="headerlink" title="2、关系数据语言的分类：关系代数和关系演算"></a>2、关系数据语言的分类：关系代数和关系演算</h4><p>结构化查询语言SQL：DQL、DDL、DML、DCL</p><h3 id="2-3-关系的完整性"><a href="#2-3-关系的完整性" class="headerlink" title="2.3 关系的完整性"></a>2.3 关系的完整性</h3><p><strong>【必考】</strong>关系模型三类完整性约束：实体完整性、参照完整性、用户定义完整性</p><h4 id="1、实体完整性："><a href="#1、实体完整性：" class="headerlink" title="1、实体完整性："></a>1、实体完整性：</h4><p>主码不可重复且不为空</p><h4 id="2、参照完整性："><a href="#2、参照完整性：" class="headerlink" title="2、参照完整性："></a>2、参照完整性：</h4><p>若属性&#x2F;属性组F是基本关系R的外码，它与基本关系S的主码Ks相对应（R与S可以是同一关系），则对于R中每个元组在F上的值必须取空值或S中某个元组的主码值。</p><p><strong>外码：</strong>设F是基本关系R的属性&#x2F;属性集，但不是关系R的码，Ks是基本关系S的主码，如果F与Ks相对应，则称F是R的外码，并称R为参照关系，S为被参照关系或目标关系，R与S可以是同一关系。</p><h4 id="3、用户定义的完整性"><a href="#3、用户定义的完整性" class="headerlink" title="3、用户定义的完整性"></a>3、用户定义的完整性</h4><h3 id="2-4-关系代数"><a href="#2-4-关系代数" class="headerlink" title="2.4 关系代数"></a>2.4 关系代数</h3><h4 id="1、传统的集合运算："><a href="#1、传统的集合运算：" class="headerlink" title="1、传统的集合运算："></a>1、传统的集合运算：</h4><p>并、差、交、笛卡尔积</p><h4 id="2、专门的关系运算："><a href="#2、专门的关系运算：" class="headerlink" title="2、专门的关系运算："></a>2、专门的关系运算：</h4><p>选择、投影、连接、除<br>🌂（1）选择：σF(R)，F是选择条件<br>🌂（2）投影：ΠA(R)，A是属性列<br>🌂（3）连接：从两个关系的笛卡尔积中选取属性间满足条件AθB的元组。<br><strong>等值连接：</strong>θ为“&#x3D;”的连接运算。<br><strong>自然连接：</strong>特殊的等值连接，要求比较的分量必须是同名的属性组，并在结果中去掉重复的列。<br><strong>悬浮元组：</strong>自然连接中，关系R中某些元组有可能在S中不存在公共属性上值相等的元组，因此被舍弃，这些元组称为悬浮元组。<br><strong>外连接：</strong>进行自然连接时，保留悬浮元组，而在其他属性列上填空值。分为左外连接和右外连接，分别表示保留哪一边关系的悬浮元组。<br>🌂（4）除运算：给定关系R(X,Y)和S(Y,Z),X,Y,Z为属性组。R中的Y和S中的Y可以有不同的属性名但必须有相同的域集。R与S的除运算得到一个新的关系P(X)，P是R中满足以下条件的元组在X属性列上的投影：元组在X上的分量x的象集Yx包含S在Y上的投影的集合。记作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">R÷S<span class="operator">=</span>&#123;tr[X]<span class="operator">|</span>tr∈R∧ΠY(S)⊆Yx&#125;</span><br><span class="line">其中Yx为x在R中的象集，x<span class="operator">=</span>tr[X]。</span><br></pre></td></tr></table></figure><p>象集Yx：给定一个关系R(X,Y)，X和Y为属性组。当t[X]&#x3D;x时，x在R中的象集定义为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yx<span class="operator">=</span>&#123;t[Y]<span class="operator">|</span>t∈R,t[X]<span class="operator">=</span>x&#125;</span><br></pre></td></tr></table></figure><p>如何理解除运算：R÷S，将R中属性分为公共属性和非公共属性，对于同一个非公共属性值，如果公共属性值在S中的元组中都出现过，那么把非公共属性值加入结果中。除运算一般用于解决“至少”问题。</p><h3 id="2-5-关系演算（略）"><a href="#2-5-关系演算（略）" class="headerlink" title="2.5 关系演算（略）"></a>2.5 关系演算（略）</h3><h2 id="第3章-关系数据库标准语言SQL"><a href="#第3章-关系数据库标准语言SQL" class="headerlink" title="第3章 关系数据库标准语言SQL"></a>第3章 关系数据库标准语言SQL</h2><h3 id="3-1-SQL概述"><a href="#3-1-SQL概述" class="headerlink" title="3.1 SQL概述"></a>3.1 SQL概述</h3><h4 id="1、SQL的产生与发展"><a href="#1、SQL的产生与发展" class="headerlink" title="1、SQL的产生与发展"></a>1、SQL的产生与发展</h4><h4 id="2、SQL语言的特点："><a href="#2、SQL语言的特点：" class="headerlink" title="2、SQL语言的特点："></a>2、SQL语言的特点：</h4><p>（1）综合统一，集DDL、DML、DCL、DQL于一身。<br>（2）高度非过程化。<br>（3）面向集合的操作方式。<br>（4）以同一种语法结构提供多种使用方式。<br>（5）语言简介，易学易用。</p><h4 id="3、SQL的基本概念"><a href="#3、SQL的基本概念" class="headerlink" title="3、SQL的基本概念"></a>3、SQL的基本概念</h4><p>外模式——视图，模式——基本表，内模式——存储文件</p><h3 id="3-2-学生-课程数据库（略）"><a href="#3-2-学生-课程数据库（略）" class="headerlink" title="3.2 学生-课程数据库（略）"></a>3.2 学生-课程数据库（略）</h3><p>之后几节全部是重点，不考察exists谓词</p><h3 id="3-3-数据定义"><a href="#3-3-数据定义" class="headerlink" title="3.3 数据定义"></a>3.3 数据定义</h3><h4 id="1、模式的定义与删除"><a href="#1、模式的定义与删除" class="headerlink" title="1、模式的定义与删除"></a>1、模式的定义与删除</h4><p><strong>定义模式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SCHEMA 模式名 <span class="keyword">AUTHORIZATION</span> 用户名;</span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA 模式名 <span class="keyword">AUTHORIZATION</span> 用户名 [表定义子句<span class="operator">|</span>视图定义子句<span class="operator">|</span>授权定义子句]</span><br></pre></td></tr></table></figure><p><strong>删除模式：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> SCHEMA 模式名 [CASCADE<span class="operator">|</span>RESTRICT]</span><br></pre></td></tr></table></figure><h4 id="2、基本表的定义、删除与修改"><a href="#2、基本表的定义、删除与修改" class="headerlink" title="2、基本表的定义、删除与修改"></a>2、基本表的定义、删除与修改</h4><p><strong>定义基本表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sq<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (</span><br><span class="line">列名 数据类型 [列级完整性约束条件], </span><br><span class="line">[列名 数据类型 [列级完整性约束条件]] </span><br><span class="line">... </span><br><span class="line">[, 表级完整性约束条件]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>参照完整性约束条件：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FOREIGN</span> KEY(Sno) <span class="keyword">REFERENCES</span> Student(Sno)</span><br></pre></td></tr></table></figure><p><strong>数据类型：</strong>定长与变长字符串，大对象，整型，定点数，浮点数，布尔型，时间类型</p><p><strong>修改基本表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 </span><br><span class="line">[<span class="keyword">ADD</span> [<span class="keyword">COLUMN</span>] 新列名 数据类型 [完整性约束]] </span><br><span class="line">[<span class="keyword">ADD</span> 表级完整性约束]</span><br><span class="line">[<span class="keyword">DROP</span> [<span class="keyword">COLUMN</span>] 列名 [CASCADE<span class="operator">|</span>RESTRICT]]</span><br><span class="line">[<span class="keyword">DROP</span> [<span class="keyword">CONSTRAINT</span>] 完整性约束名 [RESTRICT<span class="operator">|</span>CASCADE]]</span><br><span class="line">[<span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> 列名 数据类型];</span><br></pre></td></tr></table></figure><p><strong>删除基本表：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名 [RESTRICT<span class="operator">|</span>CASCADE];</span><br></pre></td></tr></table></figure><h4 id="3、索引的建立与删除"><a href="#3、索引的建立与删除" class="headerlink" title="3、索引的建立与删除"></a>3、索引的建立与删除</h4><p>索引类型：顺序文件上的索引、B+树索引、散列索引、位图索引<br><strong>建立索引：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">UNIQUE</span><span class="operator">|</span>CLUSTER] INDEX 索引名 <span class="keyword">ON</span> 表名(列名 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>] [, 列名 [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]] ... );</span><br></pre></td></tr></table></figure><p><strong>修改索引：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX 旧索引名 RENAME <span class="keyword">TO</span> 新索引名;</span><br></pre></td></tr></table></figure><p><strong>删除索引：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX 索引名;</span><br></pre></td></tr></table></figure><h4 id="4、数据字典："><a href="#4、数据字典：" class="headerlink" title="4、数据字典："></a>4、数据字典：</h4><p>记录数据库中所有定义信息，包括关系模式定义、视图定义、索引定义、完整性约束定义、权限定义、统计信息，的一组系统表。</p><h3 id="3-4-数据查询"><a href="#3-4-数据查询" class="headerlink" title="3.4 数据查询"></a>3.4 数据查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] 目标列表达式[, 目标列表达式] ... </span><br><span class="line"><span class="keyword">FROM</span> 表名<span class="operator">|</span>视图名[, 表名<span class="operator">|</span>视图名] <span class="operator">|</span> (<span class="keyword">SELECT</span>语句) [<span class="keyword">AS</span>] 别名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件表达式]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> 列名<span class="number">1</span> [<span class="keyword">HAVING</span> 条件表达式]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名<span class="number">2</span> [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]];</span><br></pre></td></tr></table></figure><h4 id="1、单表查询"><a href="#1、单表查询" class="headerlink" title="1、单表查询"></a>1、单表查询</h4><p><strong>常用的查询条件</strong></p><table><thead><tr><th>查询条件</th><th>谓词</th></tr></thead><tbody><tr><td>比较</td><td>关系运算符，NOT</td></tr><tr><td>确定范围</td><td>BETWEEN AND，NOT BETWEEN AND</td></tr><tr><td>确定集合</td><td>IN，NOT IN</td></tr><tr><td>字符匹配</td><td>LIKE，NOT LIKE</td></tr><tr><td>空值</td><td>IS NULL，IS NOT NULL</td></tr><tr><td>多重条件</td><td>AND，OR，NOT</td></tr></tbody></table><p><strong>聚集函数</strong></p><table><thead><tr><th>聚集函数</th><th>功能</th></tr></thead><tbody><tr><td>COUNT(*)</td><td>统计元组个数</td></tr><tr><td>COUNT([DISTINCT ALL] 列名)</td><td>统计一列中值的个数</td></tr><tr><td>SUM([DISTINCT ALL] 列名)</td><td>计算一列值的总和</td></tr><tr><td>AVG([DISTINCT ALL] 列名)</td><td>计算一列值的平均值</td></tr><tr><td>MAX([DISTINCT ALL] 列名)</td><td>求一列值中的最大值</td></tr><tr><td>MIN([DISTINCT ALL] 列名)</td><td>求一列值中的最小值</td></tr></tbody></table><p><strong>GROUP BY子句：</strong>将查询结果按照<strong>某一列</strong>或<strong>多列的值<em>分组</em></strong>，值相等的为一组。分组后聚集函数将作用于每一组，即每一组都有一个函数值。HAVING子句与WHERE子句的区别在于HAVING子句作用于组，可以使用聚集函数，但WHERE子句中不可以。<br><strong>具体使用：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname <span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student;</span><br><span class="line"><span class="keyword">SELECT</span> Sname,<span class="string">&#x27;Year of Birth&#x27;</span>,<span class="number">2014</span><span class="operator">-</span>Sage BIRTHDAY,<span class="built_in">LOWER</span>(Sdept);<span class="comment">/*目标列表达式可以是属性列，常量，函数，也可以是表达式，通过指定别名可以改变列标题*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno <span class="keyword">FROM</span> SC;<span class="comment">/*去重*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;cs&#x27;</span>;<span class="comment">/*比较大小*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sdept,Sage <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sage <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">23</span>;<span class="comment">/*确定范围*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Ssex <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept <span class="keyword">IN</span> (<span class="string">&#x27;cs&#x27;</span>,<span class="string">&#x27;ma&#x27;</span>,<span class="string">&#x27;is&#x27;</span>);<span class="comment">/*确定集合*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sname <span class="keyword">LIKE</span> <span class="string">&#x27;刘%&#x27;</span>;<span class="comment">/*字符匹配*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> SC <span class="keyword">WHERE</span> GRADE <span class="keyword">IS</span> <span class="keyword">NULL</span>;<span class="comment">/*空值查询*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Student <span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;cs&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;<span class="comment">/*多重条件查询*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Student;<span class="comment">/*使用聚集函数*/</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span>;<span class="comment">/*使用GROUP BY子句*/</span></span><br></pre></td></tr></table></figure><h4 id="2、连接查询"><a href="#2、连接查询" class="headerlink" title="2、连接查询"></a>2、连接查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 等值连接</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.<span class="operator">*</span>,SC.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student,SC</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno;</span><br><span class="line"><span class="comment">-- 自身连接</span></span><br><span class="line"><span class="keyword">SELECT</span> FIRST.Cno,SECOND.Cpno</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">FIRST</span>,Course <span class="keyword">SECOND</span></span><br><span class="line"><span class="keyword">WHERE</span> FIRST.Cpno<span class="operator">=</span>SECOND.Cno;</span><br><span class="line"><span class="comment">-- 外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Ssex,Sage,Sdept,Cno,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span>(Student.Sno<span class="operator">=</span>SC.Sno);</span><br><span class="line"><span class="comment">-- 多表连接</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno,Sname,Cname,Grade</span><br><span class="line"><span class="keyword">FROM</span> Student,SC,Course</span><br><span class="line"><span class="keyword">WHERE</span> Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span> SC.Sno<span class="operator">=</span>Course.Cno;</span><br></pre></td></tr></table></figure><p>嵌套循环连接算法：R与S等值连接，先在R找到第一个元组，扫描S表查找符合等值条件的S表元组，合并后形成结果表中第一个元组，然后再在R找第二个元组，重复以上步骤，直到遍历完整个R表。使用索引可以提高查找的效率。</p><h4 id="3、嵌套查询"><a href="#3、嵌套查询" class="headerlink" title="3、嵌套查询"></a>3、嵌套查询</h4><p><strong>嵌套查询：</strong>一个SELECT-FROM-WHERE语句称为一个查询块，将一个查询块嵌套在另一个查询块的WHERE子句或HAVING短语的条件中的查询称为嵌套查询。需要特别指出的是子查询的SELECT语句中不能使用ORDER BY子句，ORDER BY子句只能对最终查询结果排序。</p><p><strong>不相关子查询：</strong>子查询的查询条件不依赖于父查询。</p><p><strong>相关子查询：</strong>子查询的查询条件依赖于父查询。相关子查询的一种执行过程为，从外层查询中取出一个元组，将它的属性值传给内层查询，执行内层查询得到一个值，用该值代替内层查询，得到外层查询，执行外层查询。</p><h5 id="（1）带有IN谓词的子查询"><a href="#（1）带有IN谓词的子查询" class="headerlink" title="（1）带有IN谓词的子查询"></a>（1）带有IN谓词的子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname </span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sno <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> Sno </span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Cno<span class="operator">=</span><span class="string">&#x27;2&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="（2）带有比较运算符的子查询"><a href="#（2）带有比较运算符的子查询" class="headerlink" title="（2）带有比较运算符的子查询"></a>（2）带有比较运算符的子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,Sname,Sdept</span><br><span class="line"><span class="keyword">FROM</span> SC x</span><br><span class="line"><span class="keyword">WHERE</span> Grade<span class="operator">&gt;=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC y</span><br><span class="line"><span class="keyword">WHERE</span> y.Sno<span class="operator">=</span>x.Sno</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="（3）带有ANY（SOME）或ALL谓词的子查询"><a href="#（3）带有ANY（SOME）或ALL谓词的子查询" class="headerlink" title="（3）带有ANY（SOME）或ALL谓词的子查询"></a>（3）带有ANY（SOME）或ALL谓词的子查询</h5><p>op ANY表示对于子查询中某一个值条件成立则为真，op是关系运算符<br>op ALL表示对于子查询中所有值条件都成立才为真，op是关系运算符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄至少小于一个计科学生的非计科的学生的姓名和年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="keyword">ANY</span>(</span><br><span class="line"><span class="keyword">SELECT</span> Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;cs&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;cs&#x27;</span>;</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Sage)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;cs&#x27;</span></span><br><span class="line">) <span class="keyword">AND</span> Sdept <span class="operator">&lt;&gt;</span> <span class="string">&#x27;cs&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="（4）带有EXISTS谓词的子查询"><a href="#（4）带有EXISTS谓词的子查询" class="headerlink" title="（4）带有EXISTS谓词的子查询"></a>（4）带有EXISTS谓词的子查询</h5><p>带有EXISTS谓词的子查询不返回任何数据，只产生逻辑真或假。内层查询不为空则为真，内层查询为空则为假。可以使用NOT运算符对逻辑值结果取反。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询选修了1号课程的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> Sname</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> Sno<span class="operator">=</span>Student.Sno <span class="keyword">AND</span> Cno<span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/*使用了相关子查询，对于每一个Student，将Sno属性值传入子查询中，执行子查询，</span></span><br><span class="line"><span class="comment">根据结果是否为空得到一个布尔值，为真时就将这个学生的姓名放在结果中。*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 变态版子查询</span></span><br><span class="line"><span class="comment">-- 查询至少选修了学生201215122选修的全部课程的学生号码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">p:“学生201215122选修了课程y”</span></span><br><span class="line"><span class="comment">q:“学生x也选修了课程y”</span></span><br><span class="line"><span class="comment">查询：(∀y)p-&gt;q</span></span><br><span class="line"><span class="comment">转换：(∀y)p-&gt;q ≡ ┐(∃y(┐(p-&gt;q))) ≡ ┐(∃y(┐(┐p∨q))) ≡ ┐∃y(p∧┐q)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Sno</span><br><span class="line"><span class="keyword">FROM</span> SC SCX <span class="comment">-- 表示学生x</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( <span class="comment">-- 再次取反，表示x没有选修课程y的这种情况不出现</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC SCY <span class="comment">-- 表示学生201215122</span></span><br><span class="line"><span class="keyword">WHERE</span> SCY.Sno<span class="operator">=</span><span class="string">&#x27;201215122&#x27;</span> <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>( <span class="comment">-- 取反，也就是x没有选修课程y</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC SCZ</span><br><span class="line"><span class="keyword">WHERE</span> SCZ.Sno<span class="operator">=</span>SCX.Sno <span class="keyword">AND</span> SCZ.Cno<span class="operator">=</span>SCY.Cno <span class="comment">-- 表示x也选修了课程y</span></span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="4、集合查询"><a href="#4、集合查询" class="headerlink" title="4、集合查询"></a>4、集合查询</h4><p>集合操作主要包括并操作（UNION）、交操作（INTERSECT）、差操作（EXCEPT），将两个SELECT语句通过集合操作运算符连接即可。</p><h4 id="5、基于派生表的查询"><a href="#5、基于派生表的查询" class="headerlink" title="5、基于派生表的查询"></a>5、基于派生表的查询</h4><p>子查询出现在FROM子句中。</p><h3 id="3-5-数据更新"><a href="#3-5-数据更新" class="headerlink" title="3.5 数据更新"></a>3.5 数据更新</h3><h4 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入元组</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 [(属性列<span class="number">1</span>, 属性列<span class="number">2</span> ...)]</span><br><span class="line"><span class="keyword">VALUES</span>(常量<span class="number">1</span>, 常量<span class="number">2</span> ...),[(常量<span class="number">1</span>, 常量<span class="number">2</span> ...) ...];</span><br><span class="line"><span class="comment">-- 插入子查询结果</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 [(属性列<span class="number">1</span>, 属性列<span class="number">2</span> ...)]</span><br><span class="line">子查询;</span><br></pre></td></tr></table></figure><h4 id="2、修改数据"><a href="#2、修改数据" class="headerlink" title="2、修改数据"></a>2、修改数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"><span class="keyword">SET</span> 列名<span class="operator">=</span>表达式[, 列名<span class="operator">=</span>表达式 ...]</span><br><span class="line">[<span class="keyword">WHERE</span> 条件];</span><br><span class="line"><span class="comment">-- 子查询也可以出现在UPDATE语句的where子句中</span></span><br></pre></td></tr></table></figure><h4 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line">[<span class="keyword">WHERE</span> 条件];</span><br><span class="line"><span class="comment">-- 子查询也可以出现在DELETE语句的where子句中</span></span><br></pre></td></tr></table></figure><h3 id="3-6-空值的处理"><a href="#3-6-空值的处理" class="headerlink" title="3.6 空值的处理"></a>3.6 空值的处理</h3><p>空值的<strong>产生</strong>：插入仅给部分属性赋值的元组、外连接、空值的关系运算<br>空值的<strong>判断</strong>：IS NULL、IS NOT NULL<br>空值的<strong>约束条件</strong>：NOT NULL、UNIQUE、码属性不能为空<br>空值的<strong>算术运算</strong>、<strong>比较运算</strong>和<strong>逻辑运算</strong>：空值的算术运算结果为空值，空值的比较运算结果为UNKNOWN，UNKNOWN的逻辑运算结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NOT U = U, U AND U = U U AND T = U, U AND F = F，U OR U = U, U OR T = T, U OR F = U</span><br></pre></td></tr></table></figure><h3 id="3-7-视图"><a href="#3-7-视图" class="headerlink" title="3.7 视图"></a>3.7 视图</h3><h4 id="1、定义视图"><a href="#1、定义视图" class="headerlink" title="1、定义视图"></a>1、定义视图</h4><h5 id="（1）建立视图"><a href="#（1）建立视图" class="headerlink" title="（1）建立视图"></a>（1）建立视图</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名 [(列名[, 列名]...)]</span><br><span class="line"><span class="keyword">AS</span> 子查询</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION];</span><br><span class="line"><span class="comment">/*WITH CHECK OPTION表示对视图进行UPDATE、INSERT、DELETE操作时</span></span><br><span class="line"><span class="comment">要保证执行操作的行满足视图定义中的谓词条件（即子查询中的条件表达式）*/</span></span><br></pre></td></tr></table></figure><p>组成视图的所有列名全部省略或全部指定，必须指定列名的情况：</p><p>🌂某个目标列不是单纯的属性名，而是聚集函数或列表达式；<br>🌂多表连接时选出了几个同名列作为视图的字段<br>🌂需要在视图中为某个列启用新的更合适的名字</p><p>🌂<strong>CREATE VIEW语句并不执行子查询，而是在查询视图时才执行子查询</strong>。</p><p><strong>行列子集视图</strong>：从单个基本表导出的，并且只是去掉了基本表的某些行和某些列，但保留了主码，则称这类视图为行列子集视图。</p><p>🌂<strong>视图可以建立在基本表、视图、基本表和视图的组合之上。</strong></p><p><strong>虚拟列</strong>：由基本表经过计算导出的属性列称为虚拟列，带虚拟列的视图也称为带表达式的视图。</p><p><strong>分组视图</strong>：用带有聚集函数和GROUP BY子句的查询定义的视图称为分组视图。</p><h5 id="（2）删除视图"><a href="#（2）删除视图" class="headerlink" title="（2）删除视图"></a>（2）删除视图</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名 [CASCADE];</span><br></pre></td></tr></table></figure><h4 id="2、查询视图"><a href="#2、查询视图" class="headerlink" title="2、查询视图"></a>2、查询视图</h4><p><strong>查询视图的方法与查询表的方法一样。</strong><br><strong>视图消解：</strong>从数据字典中取出数据的定义，把定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询，然后再执行修正了的查询。这一转换过程称为视图消解。目前多数关系型数据库能够对行列子集视图的查询均能进行正确转换，但对非行列子集视图的查询就不一定能够转换，这类查询应当直接对基本表进行。</p><p><strong>视图查询与派生表查询的区别：</strong>视图定义将永久保存在数据字典中，派生表是临时定义，执行后即被删除。</p><h4 id="3、更新视图"><a href="#3、更新视图" class="headerlink" title="3、更新视图"></a>3、更新视图</h4><p>视图是<strong>虚表</strong>，对视图的更新将转换为对基本表的更新。<br>使用WITH CHECK OPTION定义视图可以防止对非视图基本表数据进行操作。<br>视图并不总是可以更新的，一般地，行列子集视图是可更新的。</p><h4 id="4、视图的作用"><a href="#4、视图的作用" class="headerlink" title="4、视图的作用"></a>4、视图的作用</h4><p>简化操作、多角度看待数据、为重构数据库提供一定程度逻辑独立性、安全性控制、更清晰的表达</p><h2 id="第4章-数据库安全性"><a href="#第4章-数据库安全性" class="headerlink" title="第4章 数据库安全性"></a>第4章 数据库安全性</h2><h4 id="4-1-数据库安全性概述"><a href="#4-1-数据库安全性概述" class="headerlink" title="4.1 数据库安全性概述"></a>4.1 数据库安全性概述</h4><p>数据库安全性：保护数据库以防止不合法使用所造成的数据泄露、更改或破坏。</p><h5 id="1、数据库的不安全因素："><a href="#1、数据库的不安全因素：" class="headerlink" title="1、数据库的不安全因素："></a>1、数据库的不安全因素：</h5><p>非法入侵、数据泄露、安全环境的脆弱性</p><h5 id="2、安全标准简介："><a href="#2、安全标准简介：" class="headerlink" title="2、安全标准简介："></a>2、安全标准简介：</h5><p>TCSEC、CC</p><h3 id="4-2-数据库安全性控制"><a href="#4-2-数据库安全性控制" class="headerlink" title="4.2 数据库安全性控制"></a>4.2 数据库安全性控制</h3><p>数据库安全性控制：身份鉴别、多层存取控制、审计、视图和数据加密</p><h4 id="1、用户身份鉴别（略）"><a href="#1、用户身份鉴别（略）" class="headerlink" title="1、用户身份鉴别（略）"></a>1、用户身份鉴别（略）</h4><h4 id="2、存取控制"><a href="#2、存取控制" class="headerlink" title="2、存取控制"></a>2、存取控制</h4><p>🌂存取控制机制：</p><p>定义用户权限，并将用户权限登记到数据字典中<br>合法权限检查</p><p>🌂存取控制方法：</p><p>自主存取控制：采用授权方式实现存取控制，比较灵活。<br>强制存取控制：采用密级标定数据库对象，比较严格。</p><h4 id="3、自主存取控制方法"><a href="#3、自主存取控制方法" class="headerlink" title="3、自主存取控制方法"></a>3、自主存取控制方法</h4><p>用户权限二要素：<strong>数据库对象</strong>、<strong>操作类型</strong><br><strong>授权：</strong>定义存取权限。<br>在关系型数据库系统中，存取控制的对象不仅有数据本身，还有数据库模式（数据库、基本表、视图和索引的创建）。</p><h4 id="4、授权：授予与收回"><a href="#4、授权：授予与收回" class="headerlink" title="4、授权：授予与收回"></a>4、授权：授予与收回</h4><h5 id="（1）GRANT"><a href="#（1）GRANT" class="headerlink" title="（1）GRANT"></a>（1）GRANT</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限[, 权限]...</span><br><span class="line"><span class="keyword">ON</span> 对象类型 对象名[, 对象类型 对象名]...</span><br><span class="line"><span class="keyword">TO</span> 用户[, 用户]...</span><br><span class="line">[<span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION];<span class="comment">-- 允许权限传播</span></span><br></pre></td></tr></table></figure><p><strong>eg：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student <span class="keyword">TO</span> U1;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student,Course <span class="keyword">TO</span> U2,U3; <span class="comment">-- mysql中不允许写多个用户和多个表</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> SC <span class="keyword">TO</span> PUBLIC; <span class="comment">-- mysql中没有PUBLIC</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">UPDATE</span>(Sno),<span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student <span class="keyword">TO</span> U4;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> SC <span class="keyword">TO</span> U5 <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br></pre></td></tr></table></figure><h5 id="（2）REVOKE"><a href="#（2）REVOKE" class="headerlink" title="（2）REVOKE"></a>（2）REVOKE</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限[, 权限]...</span><br><span class="line"><span class="keyword">ON</span> 对象类型 对象名[, 对象类型 对象名]...</span><br><span class="line"><span class="keyword">FROM</span> 用户[, 用户]...</span><br><span class="line">[CASCADE<span class="operator">|</span>RESTRICT]</span><br></pre></td></tr></table></figure><p><strong>eg：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">UPDATE</span>(Sno) <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student <span class="keyword">FROM</span> U4;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> SC <span class="keyword">FROM</span> PUBLIC;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> <span class="keyword">TABLE</span> SC <span class="keyword">FROM</span> U5 CASCADE;</span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> PRIVILEGES,<span class="keyword">GRANT</span> OPTION <span class="keyword">ON</span> <span class="keyword">TABLE</span> Student <span class="keyword">FROM</span> U4;<span class="comment">-- 收回一切权限</span></span><br></pre></td></tr></table></figure><p><strong>自主控制控制：</strong>用户可以“自主”地决定将数据的存取权限授予何人、决定是否也将“授权”的权限授予别人。因此称这样的存取控制是自主存取控制。</p><h5 id="（3）创建数据库模式的权限"><a href="#（3）创建数据库模式的权限" class="headerlink" title="（3）创建数据库模式的权限"></a>（3）创建数据库模式的权限</h5><p><strong>创建用户：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> 用户名 [<span class="keyword">WITH</span> DBA<span class="operator">|</span>RESOURCE<span class="operator">|</span><span class="keyword">CONNECT</span>];</span><br></pre></td></tr></table></figure><p>🌂只有系统的超级用户才有权创建一个新的数据库用户<br>🌂新创建的数据库用户有三种权限：CONNECT、RESOURCE和DBA<br>🌂新用户默认的权限为CONNECT，拥有CONNECT权限的用户只能登录数据库<br>🌂拥有RESOURCE权限的用户能创建基本表和视图，成为所创建对象的属主，但不能创建模式，也不可以新建用户。数据库对象的属主可以把该对象上的权限授权给其他用户。<br>🌂拥有DBA权限的用户具有最高权限。<br><strong>【注意】</strong>CREATE USER语句不是SQL标准</p><h4 id="5、数据库角色"><a href="#5、数据库角色" class="headerlink" title="5、数据库角色"></a>5、数据库角色</h4><p>数据库角色：被命名的一组与数据库操作相关的权限，角色是权限的集合。使用角色管理数据库权限可以简化授权的过程。<br><strong>角色的创建：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ROLE 角色名</span><br></pre></td></tr></table></figure><p><strong>给角色授权：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限[, 权限]...</span><br><span class="line"><span class="keyword">ON</span> 对象类型 对象名</span><br><span class="line"><span class="keyword">TO</span> 角色[, 角色]...</span><br></pre></td></tr></table></figure><p><strong>将一个角色授予其他用户或角色：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 角色[, 角色]...</span><br><span class="line"><span class="keyword">TO</span> 角色<span class="operator">|</span>用户[,角色<span class="operator">|</span>用户]...</span><br><span class="line">[<span class="keyword">WITH</span> ADMIN OPTION];<span class="comment">-- mysql不支持WITH ADMIN OPTION</span></span><br></pre></td></tr></table></figure><p><strong>角色权限的收回：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限[, 权限]...</span><br><span class="line"><span class="keyword">ON</span> 对象类型 对象名</span><br><span class="line"><span class="keyword">FROM</span> 角色[, 角色]...</span><br></pre></td></tr></table></figure><h4 id="6、强制存取控制方法-MAC"><a href="#6、强制存取控制方法-MAC" class="headerlink" title="6、强制存取控制方法(MAC)"></a>6、强制存取控制方法(MAC)</h4><p><strong>基本思想：</strong>对系统控制下的所有主客体实施<strong>强制存取控</strong>制策略。在强制存取控制中，数据库管理系统所管理的全部实体被分为主体和客体两部分，主体包括用户和外部进程，客体包括数据库对象如文件、表、索引、视图。数据库系统为每个主体和客体指派敏感度标记，主体敏感度标记称为许可证级别，客体敏感度标记称为密级。同等或高许可证级别用户可以读取相应客体（规则Ⅰ），同等或低许可证级别用户可以写相应客体（规则Ⅱ），规则Ⅱ防止密级从高流向低从而泄密。MAC对数据进行密级标记，无论数据如何复制，标记与数据都是不可分割的整体，只有符合密级要求的用户才能访问，从而提供更高级别的安全性。</p><h4 id="4-3-视图机制（略）"><a href="#4-3-视图机制（略）" class="headerlink" title="4.3 视图机制（略）"></a>4.3 视图机制（略）</h4><h4 id="4-4-审计"><a href="#4-4-审计" class="headerlink" title="4.4 审计"></a>4.4 审计</h4><p>审计：建立审计日志记录数据库操作</p><h4 id="4-5-数据加密（略）"><a href="#4-5-数据加密（略）" class="headerlink" title="4.5 数据加密（略）"></a>4.5 数据加密（略）</h4><h4 id="4-6-其他安全性保护（略）"><a href="#4-6-其他安全性保护（略）" class="headerlink" title="4.6 其他安全性保护（略）"></a>4.6 其他安全性保护（略）</h4><h2 id="第5章-数据库完整性"><a href="#第5章-数据库完整性" class="headerlink" title="第5章 数据库完整性"></a>第5章 数据库完整性</h2><p>数据库的完整性：正确性+相容性<br>数据库完整性要求：定义完整性约束性机制+完整性检查+违约处理</p><h3 id="5-1-实体完整性"><a href="#5-1-实体完整性" class="headerlink" title="5.1 实体完整性"></a>5.1 实体完整性</h3><h4 id="1、实体完整性定义"><a href="#1、实体完整性定义" class="headerlink" title="1、实体完整性定义"></a>1、实体完整性定义</h4><p>两种约束条件说明方法：<strong>列级约束条件</strong>、<strong>表级约束条件</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY, <span class="comment">-- 列级约束条件</span></span><br><span class="line">Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">Sage <span class="type">SMALLINT</span>,</span><br><span class="line">Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Sname <span class="type">CHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">Sage <span class="type">SMALLINT</span>,</span><br><span class="line">Sdept <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(Sno) <span class="comment">-- 表级约束条件</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2、实体完整性检查和违约处理"><a href="#2、实体完整性检查和违约处理" class="headerlink" title="2、实体完整性检查和违约处理"></a>2、实体完整性检查和违约处理</h4><p>唯一性检查+空值检查</p><h3 id="5-2-参照完整性"><a href="#5-2-参照完整性" class="headerlink" title="5.2 参照完整性"></a>5.2 参照完整性</h3><h4 id="1、定义参照性完整性"><a href="#1、定义参照性完整性" class="headerlink" title="1、定义参照性完整性"></a>1、定义参照性完整性</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Cno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Grade <span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(Sno,Cno), <span class="comment">-- 只能用表级实体完整性约束</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(Sno) <span class="keyword">REFERENCES</span> Student(Sno), <span class="comment">-- 表级完整性约束</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(Cno) <span class="keyword">REFERENCES</span> Course(Cno) <span class="comment">-- 表级完整性约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="2、参照完整性检查和违约处理"><a href="#2、参照完整性检查和违约处理" class="headerlink" title="2、参照完整性检查和违约处理"></a>2、参照完整性检查和违约处理</h4><p><strong>可能破坏参照完整性的情况及违约处理</strong></p><table><thead><tr><th>被参照表（如Student）</th><th>参照表（如SC）</th><th>违约处理</th></tr></thead><tbody><tr><td>可能破坏参照完整性</td><td>插入元组</td><td>NO ACTION</td></tr><tr><td>可能破坏参照完整性</td><td>修改外码值</td><td>NO ACTION</td></tr><tr><td>删除元组</td><td>可能破坏参照完整性</td><td>NO ACTION&#x2F;CASCADE DELETE&#x2F;NULL</td></tr><tr><td>修改主码值</td><td>可能破坏参照完整性</td><td>NO ACTION&#x2F;CASCADE UPDATE&#x2F;NULL</td></tr></tbody></table><p><strong>显式说明参照完整性约束：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Cno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">Grade <span class="type">SMALLINT</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(Sno,Cno), <span class="comment">-- 只能用表级实体完整性约束</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(Sno) <span class="keyword">REFERENCES</span> Student(Sno)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> CASCADE</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE, <span class="comment">-- 表级完整性约束</span></span><br><span class="line"><span class="keyword">FOREIGN</span> KEY(Cno) <span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">NO</span> ACTION</span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">UPDATE</span> CASCADE<span class="comment">-- 表级完整性约束</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="5-3-用户定义的完整性"><a href="#5-3-用户定义的完整性" class="headerlink" title="5.3 用户定义的完整性"></a>5.3 用户定义的完整性</h3><h4 id="1、属性上的约束条件"><a href="#1、属性上的约束条件" class="headerlink" title="1、属性上的约束条件"></a>1、属性上的约束条件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列值非空</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">/* 列值非空 */</span></span><br><span class="line">Cno <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">/* 列值非空 */</span></span><br><span class="line">Grade <span class="type">SMALLINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">/* 列值非空 */</span></span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(Sno,Cno),</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 列值唯一</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> DEPT(</span><br><span class="line">Dno <span class="type">NUMERIC</span>(<span class="number">2</span>),</span><br><span class="line">Dname <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">UNIQUE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>, <span class="comment">/* 列值唯一，非空 */</span></span><br><span class="line">Location <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(Dno)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- CHECK短语</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">Sno <span class="type">CHAR</span>(<span class="number">9</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">Sname <span class="type">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Ssex <span class="type">CHAR</span>(<span class="number">2</span>) <span class="keyword">CHECK</span>(Ssex <span class="keyword">IN</span> (<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)),</span><br><span class="line">Sage <span class="type">SMALLINT</span>,</span><br><span class="line">Sdept <span class="type">CHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 注意在MySQL8.0.16之前的版本不支持CHECK短语</span></span><br></pre></td></tr></table></figure><h4 id="2、元组上的约束条件"><a href="#2、元组上的约束条件" class="headerlink" title="2、元组上的约束条件"></a>2、元组上的约束条件</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">Sno <span class="type">CHAR</span>(<span class="number">9</span>),</span><br><span class="line">Sname <span class="type">CHAR</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">Ssex <span class="type">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">Sage <span class="type">SMALLINT</span>,</span><br><span class="line">Sdept <span class="type">CHAR</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(Sno),</span><br><span class="line"><span class="keyword">CHECK</span>(Ssex<span class="operator">=</span><span class="string">&#x27;女&#x27;</span> <span class="keyword">OR</span> Sname <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;Ms.%&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="5-4-完整性约束命名子句"><a href="#5-4-完整性约束命名子句" class="headerlink" title="5.4 完整性约束命名子句"></a>5.4 完整性约束命名子句</h3><h4 id="1、完整性约束命名子句"><a href="#1、完整性约束命名子句" class="headerlink" title="1、完整性约束命名子句"></a>1、完整性约束命名子句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CONSTRAINT</span> 完整性约束条件名 完整性约束条件</span><br><span class="line"><span class="comment">-- 完整性约束条件包括NOT NULL、UNIQUE、PRIMARY KEY、FOREIGN KEY、CHECK短语</span></span><br><span class="line"><span class="comment">-- 完整性约束条件可以作为列级约束条件或表级约束条件出现</span></span><br></pre></td></tr></table></figure><h4 id="2、修改表中的完整性约束"><a href="#2、修改表中的完整性约束" class="headerlink" title="2、修改表中的完整性约束"></a>2、修改表中的完整性约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 完整性约束条件子句</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> 完整性约束条件名</span><br></pre></td></tr></table></figure><h3 id="5-5-域中的完整性限制（略）"><a href="#5-5-域中的完整性限制（略）" class="headerlink" title="5.5 域中的完整性限制（略）"></a>5.5 域中的完整性限制（略）</h3><h3 id="5-6-断言（略）"><a href="#5-6-断言（略）" class="headerlink" title="5.6 断言（略）"></a>5.6 断言（略）</h3><h3 id="5-7-触发器"><a href="#5-7-触发器" class="headerlink" title="5.7 触发器"></a>5.7 触发器</h3><p>不同数据库触发器实现方式差异较大，其中MYSQL不支持语句级触发器。</p><h4 id="1、定义触发器"><a href="#1、定义触发器" class="headerlink" title="1、定义触发器"></a>1、定义触发器</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SQL标准触发器定义</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名 <span class="comment">-- 只有表的拥有者才有权创建触发器</span></span><br><span class="line">BEFORE<span class="operator">|</span>AFTER 触发事件 <span class="keyword">ON</span> 表名 <span class="comment">-- 触发器只能定义在基本表上，触发事件可以是INSERT、DELETE、UPDATE</span></span><br><span class="line"><span class="keyword">REFERENCING</span> <span class="keyword">NEW</span><span class="operator">|</span><span class="keyword">OLD</span> <span class="type">ROW</span> <span class="keyword">AS</span> 变量</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span><span class="operator">|</span>STATEMENT <span class="comment">-- 触发器类型可以是行级触发器和语句级触发器</span></span><br><span class="line">[<span class="keyword">WHEN</span> 触发条件] 触发动作体</span><br><span class="line"><span class="comment">-- MySQL触发器定义</span></span><br><span class="line"><span class="keyword">CREATE</span> [DEFINER <span class="operator">=</span> 用户名] <span class="keyword">TRIGGER</span> 触发器名</span><br><span class="line">BEFORE<span class="operator">|</span>AFTER 触发事件</span><br><span class="line"><span class="keyword">ON</span> tbl_name <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line">[FOLLOWS<span class="operator">|</span><span class="keyword">PRECEDES</span> 其他触发器名]</span><br><span class="line">触发动作体</span><br><span class="line"><span class="comment">/*触发动作体既可以是一个匿名PL/SQL过程块，也可以是对过程的调用。</span></span><br><span class="line"><span class="comment">如果是行级触发器，用户可以在过程体中使用NEW/OLD引用触发事件发生</span></span><br><span class="line"><span class="comment">之前的旧值和之后的新值*/</span></span><br></pre></td></tr></table></figure><p><strong>书上例题的MySQL写法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 习题5.21</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> `lifang`.`sc_AFTER_UPDATE`;</span><br><span class="line">DELIMITER $$</span><br><span class="line">USE `lifang`$$</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> <span class="built_in">CURRENT_USER</span> <span class="keyword">TRIGGER</span> `lifang`.`sc_AFTER_UPDATE` AFTER <span class="keyword">UPDATE</span> <span class="keyword">ON</span> `sc` <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">if new.grade <span class="operator">&gt;=</span> <span class="number">1.1</span> <span class="operator">*</span> old.grade</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sc_u <span class="keyword">values</span>(new.sno,new.cno,old.grade,new.grade);</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br><span class="line"><span class="comment">-- 习题5.23</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `lifang`.`insert_log` (</span><br><span class="line">  `numbers` <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> `lifang`.`worker_BEFORE_UPDATE`;</span><br><span class="line">DELIMITER $$</span><br><span class="line">USE `lifang`$$</span><br><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> <span class="built_in">CURRENT_USER</span> <span class="keyword">TRIGGER</span> `lifang`.`worker_BEFORE_UPDATE` BEFORE <span class="keyword">INSERT</span> <span class="keyword">ON</span> `worker` <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">if(new.wpos<span class="operator">=</span>&quot;经理&quot; <span class="keyword">and</span> new.wwage<span class="operator">&lt;</span><span class="number">4000</span>) <span class="keyword">then</span></span><br><span class="line"><span class="keyword">set</span> new.wwage<span class="operator">=</span><span class="number">4000</span>;</span><br><span class="line">    <span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><h4 id="2、激活触发器的顺序："><a href="#2、激活触发器的顺序：" class="headerlink" title="2、激活触发器的顺序："></a>2、激活触发器的顺序：</h4><p>BEFORE触发器-&gt;触发事件-&gt;AFTER触发器</p><h4 id="3、删除触发器"><a href="#3、删除触发器" class="headerlink" title="3、删除触发器"></a>3、删除触发器</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> 触发器名 <span class="keyword">ON</span> 表名；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库理论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（二十）：TreeMap 源码解析</title>
      <link href="/2020/04/16/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9ATreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/04/16/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9ATreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、TreeMap-简介"><a href="#1、TreeMap-简介" class="headerlink" title="1、TreeMap 简介"></a>1、TreeMap 简介</h2><p>TreeMap 使用红黑树存储元素，可以保证元素按key值的大小进行遍历。TreeMap底层是基于<strong>红黑树</strong>（Red-Black tree）实现，所以在学习TreeMap之前我们我们有必要先了解一下红黑树。</p><p>由于 TreeMap 底层采用一棵“红黑树”来保存集合中的 Entry，这意味 TreeMap 添加元素、取出元素的效率都比 HashMap <strong>低</strong>：<br>🌂当向 TreeMap 添加元素时，需要通过循环找到新增 Entry 的插入位置。<br>🌂当从 TreeMap 中取出元素时，需要通过循环才能找到合适的 Entry。</p><p>但 TreeMap、TreeSet 相较于 HashMap、HashSet 的<strong>优势</strong>在于：<br>TreeMap 中的所有 Entry 总是按 key 根据指定排序规则保持有序状态，TreeSet 中所有元素总是根据指定排序规则保持有序状态。</p><h3 id="1-1、红黑树（Red-Black-Tree）简述"><a href="#1-1、红黑树（Red-Black-Tree）简述" class="headerlink" title="1.1、红黑树（Red Black Tree）简述"></a>1.1、红黑树（Red Black Tree）简述</h3><p><strong>红黑树</strong>是一种<strong>自平衡二叉查找树</strong>，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它是在1972年由鲁道夫·贝尔发明的，他称之为“对称二叉B树”，它现代的名字是在 Leo J. Guibas 和 Robert Sedgewick 于1978年写的一篇论文中获得的。它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的：它可以在O(log n)时间内做查找，插入和删除，这里的n是树中元素的数目。</p><p>红黑树中每个节点的值，都<strong>大于或等于</strong>在它的<strong>左</strong>子树中的所有节点的值，并且<strong>小于或等于</strong>在它的<strong>右</strong>子树中的所有节点的值，这确保红黑树运行时可以快速地在树中查找和定位的所需节点。</p><h4 id="1-1-1、二叉查找树（BST）"><a href="#1-1-1、二叉查找树（BST）" class="headerlink" title="1.1.1、二叉查找树（BST）"></a>1.1.1、二叉查找树（BST）</h4><p>为了更好的理解 红黑树，必须先理解<strong>二叉查找树</strong>（BST）。其中红黑树又是一种特殊的<strong>排序二叉树</strong>。</p><p>二叉查找树（BST）是一种特殊结构的二叉树，可以非常方便地对树中所有节点进行<strong>排序</strong>和<strong>检索</strong>。</p><h5 id="1-1-1-1、二叉查找树性质"><a href="#1-1-1-1、二叉查找树性质" class="headerlink" title="1.1.1.1、二叉查找树性质"></a>1.1.1.1、二叉查找树性质</h5><p>二叉查找树（BST）要么是一棵空二叉树，要么是具有下列<strong>性质</strong>的二叉树：</p><p>🌂若它的左子树不空，则左子树上所有节点的值均小于它的根节点的值；<br>🌂若它的右子树不空，则右子树上所有节点的值均大于它的根节点的值；<br>🌂它的左、右子树也分别为排序二叉树。</p><p><img src="https://s1.ax1x.com/2020/04/16/JFMe3V.png"></p><p>对排序二叉树，若按<strong>中序遍历</strong>就可以得到由小到大的有序序列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">2</span>，<span class="number">3</span>，<span class="number">4</span>，<span class="number">8</span>，<span class="number">9</span>，<span class="number">9</span>，<span class="number">10</span>，<span class="number">13</span>，<span class="number">18</span>，<span class="number">21</span>&#125;</span><br></pre></td></tr></table></figure><p>创建排序二叉树的步骤，也就是不断地向排序二叉树添加节点的过程，向排序二叉树添加节点的<strong>步骤</strong>如下：</p><p>🌂以根节点当前节点开始搜索。<br>🌂新节点的值和当前节点的值比较。<br>🌂如果新节点的值更大，则以当前节点的右子节点作为新的当前节点；如果新节点的值更小，则以当前节点的左子节点作为新的当前节点。<br>🌂重复 2、3 两个步骤，直到搜索到合适的叶子节点为止。<br>🌂将新节点添加为第 4 步找到的叶子节点的子节点；如果新节点更大，则添加为右子节点；否则添加为左子节点。</p><h4 id="1-1-2、红黑树（Red-Black-Tree）"><a href="#1-1-2、红黑树（Red-Black-Tree）" class="headerlink" title="1.1.2、红黑树（Red Black Tree）"></a>1.1.2、红黑树（Red Black Tree）</h4><p>红黑树（Red Black Tree）是一种自平衡的二叉查找树。除了符合二叉查找树的的特性外，它还具有以下<strong>特性</strong>。</p><h5 id="1-1-2-1、红黑树性质"><a href="#1-1-2-1、红黑树性质" class="headerlink" title="1.1.2.1、红黑树性质"></a>1.1.2.1、红黑树性质</h5><p><img src="https://s1.ax1x.com/2020/04/16/JFMmcT.png"></p><p>🌂节点是红色或黑色。<br>🌂根节点是黑色。<br>🌂每个叶子节点都是黑色的空节点（NIL节点）。<br>🌂每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)<br>🌂从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</p><h2 id="2、TreeMap-源码分析"><a href="#2、TreeMap-源码分析" class="headerlink" title="2、TreeMap 源码分析"></a>2、TreeMap 源码分析</h2><h3 id="2-1、TreeMap-的定义"><a href="#2-1、TreeMap-的定义" class="headerlink" title="2.1、TreeMap 的定义"></a>2.1、TreeMap 的定义</h3><p>TreeMap 基于红黑树（Red-Black tree）实现。该映射根据其键的<strong>自然顺序</strong>进行排序，或者根据创建映射时提供的 Comparator 进行排序，具体取决于使用的构造方法。</p><p>TreeMap 的基本操作 <strong>containsKey</strong>、<strong>get</strong>、<strong>put</strong> 和 <strong>remove</strong> 的<strong>时间复杂度</strong>是 <strong>log(n)</strong> 。</p><p>TreeMap 是<strong>非同步</strong>的。 它的iterator 方法返回的迭代器是fail-fast的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">NavigableMap</span>&lt;K,V&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/16/JFMEhq.png"></p><p>🌂TreeMap <strong>继承</strong>于AbstractMap，所以它是一个Map，即一个key-value集合。<br>🌂TreeMap <strong>实现</strong>了NavigableMap接口，意味着它支持一系列的导航方法。比如返回有序的key集合。<br>🌂TreeMap** 实现<strong>了Cloneable接口，意味着它能被克隆。<br>🌂TreeMap <strong>实现</strong>了java.io.Serializable接口，意味着它支持序列化。<br>🌂NavigableMap</strong> 又<strong>接口</strong>继承**了 SortedMap 接口，SortedMap 接口规定了元素可以按key的大小来遍历，并且定义了一些返回部分map的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SortedMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">// key的比较器</span></span><br><span class="line">    Comparator&lt;? <span class="built_in">super</span> K&gt; comparator();</span><br><span class="line">    <span class="comment">// 返回fromKey（包含）到toKey（不包含）之间的元素组成的子map</span></span><br><span class="line">    SortedMap&lt;K,V&gt; <span class="title function_">subMap</span><span class="params">(K fromKey, K toKey)</span>;</span><br><span class="line">    <span class="comment">// 返回小于toKey（不包含）的子map</span></span><br><span class="line">    SortedMap&lt;K,V&gt; <span class="title function_">headMap</span><span class="params">(K toKey)</span>;</span><br><span class="line">    <span class="comment">// 返回大于等于fromKey（包含）的子map</span></span><br><span class="line">    SortedMap&lt;K,V&gt; <span class="title function_">tailMap</span><span class="params">(K fromKey)</span>;</span><br><span class="line">    <span class="comment">// 返回最小的key</span></span><br><span class="line">    K <span class="title function_">firstKey</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回最大的key</span></span><br><span class="line">    K <span class="title function_">lastKey</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回key集合</span></span><br><span class="line">    Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回value集合</span></span><br><span class="line">    Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回节点集合</span></span><br><span class="line">    Set&lt;Map.Entry&lt;K, V&gt;&gt; entrySet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NavigableMap 是对 SortedMap 的增强，定义了一些返回离目标key<strong>最近</strong>的元素的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NavigableMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">SortedMap</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">// 小于给定key的最大节点</span></span><br><span class="line">    Map.Entry&lt;K,V&gt; <span class="title function_">lowerEntry</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// 小于给定key的最大key</span></span><br><span class="line">    K <span class="title function_">lowerKey</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// 小于等于给定key的最大节点</span></span><br><span class="line">    Map.Entry&lt;K,V&gt; <span class="title function_">floorEntry</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// 小于等于给定key的最大key</span></span><br><span class="line">    K <span class="title function_">floorKey</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// 大于等于给定key的最小节点</span></span><br><span class="line">    Map.Entry&lt;K,V&gt; <span class="title function_">ceilingEntry</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// 大于等于给定key的最小key</span></span><br><span class="line">    K <span class="title function_">ceilingKey</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// 大于给定key的最小节点</span></span><br><span class="line">    Map.Entry&lt;K,V&gt; <span class="title function_">higherEntry</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// 大于给定key的最小key</span></span><br><span class="line">    K <span class="title function_">higherKey</span><span class="params">(K key)</span>;</span><br><span class="line">    <span class="comment">// 最小的节点</span></span><br><span class="line">    Map.Entry&lt;K,V&gt; <span class="title function_">firstEntry</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 最大的节点</span></span><br><span class="line">    Map.Entry&lt;K,V&gt; <span class="title function_">lastEntry</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 弹出最小的节点</span></span><br><span class="line">    Map.Entry&lt;K,V&gt; <span class="title function_">pollFirstEntry</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 弹出最大的节点</span></span><br><span class="line">    Map.Entry&lt;K,V&gt; <span class="title function_">pollLastEntry</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回倒序的map</span></span><br><span class="line">    NavigableMap&lt;K,V&gt; <span class="title function_">descendingMap</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回有序的key集合</span></span><br><span class="line">    NavigableSet&lt;K&gt; <span class="title function_">navigableKeySet</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回倒序的key集合</span></span><br><span class="line">    NavigableSet&lt;K&gt; <span class="title function_">descendingKeySet</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 返回从fromKey到toKey的子map，是否包含起止元素可以自己决定</span></span><br><span class="line">    NavigableMap&lt;K,V&gt; <span class="title function_">subMap</span><span class="params">(K fromKey, <span class="type">boolean</span> fromInclusive,</span></span><br><span class="line"><span class="params">                             K toKey,   <span class="type">boolean</span> toInclusive)</span>;</span><br><span class="line">    <span class="comment">// 返回小于toKey的子map，是否包含toKey自己决定</span></span><br><span class="line">    NavigableMap&lt;K,V&gt; <span class="title function_">headMap</span><span class="params">(K toKey, <span class="type">boolean</span> inclusive)</span>;</span><br><span class="line">    <span class="comment">// 返回大于fromKey的子map，是否包含fromKey自己决定</span></span><br><span class="line">    NavigableMap&lt;K,V&gt; <span class="title function_">tailMap</span><span class="params">(K fromKey, <span class="type">boolean</span> inclusive)</span>;</span><br><span class="line">    <span class="comment">// 等价于subMap(fromKey, true, toKey, false)</span></span><br><span class="line">    SortedMap&lt;K,V&gt; <span class="title function_">subMap</span><span class="params">(K fromKey, K toKey)</span>;</span><br><span class="line">    <span class="comment">// 等价于headMap(toKey, false)</span></span><br><span class="line">    SortedMap&lt;K,V&gt; <span class="title function_">headMap</span><span class="params">(K toKey)</span>;</span><br><span class="line">    <span class="comment">// 等价于tailMap(fromKey, true)</span></span><br><span class="line">    SortedMap&lt;K,V&gt; <span class="title function_">tailMap</span><span class="params">(K fromKey)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2、TreeMap-属性"><a href="#2-2、TreeMap-属性" class="headerlink" title="2.2、TreeMap 属性"></a>2.2、TreeMap 属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较器，如果没传则key要实现Comparable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="built_in">super</span> K&gt; comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红黑树根节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; root;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &quot;fail-fast&quot;集合修改次数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">int</span> <span class="variable">modCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>TreeMap的本质是R-B Tree(红黑树)，它包含几个重要的成员变量： root, size, comparator。</p><p>🌂root 是红黑数的根节点。它是Entry类型，Entry是红黑数的节点，它包含了红黑数的6个基本组成成分：key(键)、value(值)、left(左孩子)、right(右孩子)、parent(父节点)、color(颜色)。Entry节点根据key进行排序，Entry节点包含的内容为value。<br>🌂红黑数排序时，根据Entry中的key进行排序；<br>🌂Entry 中的key比较大小是根据比较器comparator来进行判断的。<br>🌂size是红黑数中节点的个数。</p><p><strong>Entry 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Red-black mechanics</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">RED</span>   <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">BLACK</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 红黑树中的节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        K key;</span><br><span class="line">        V value;</span><br><span class="line">        <span class="comment">// 左子节点</span></span><br><span class="line">        Entry&lt;K,V&gt; left;</span><br><span class="line">        <span class="comment">// 右子节点</span></span><br><span class="line">        Entry&lt;K,V&gt; right;</span><br><span class="line">        <span class="comment">// 父节点</span></span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// 当前节点颜色  </span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">color</span> <span class="operator">=</span> BLACK;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 用key，value和父节点构造一个Entry，默认为黑色</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Entry(K key, V value, Entry&lt;K,V&gt; parent) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the key.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> K <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Returns the value associated with the key.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the value associated with the key</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Replaces the value currently associated with the key with the given</span></span><br><span class="line"><span class="comment">         * value.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> the value associated with the key before this method was</span></span><br><span class="line"><span class="comment">         *         called</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">setValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> <span class="built_in">this</span>.value;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> valEquals(key,e.getKey()) &amp;&amp; valEquals(value,e.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">keyHash</span> <span class="operator">=</span> (key==<span class="literal">null</span> ? <span class="number">0</span> : key.hashCode());</span><br><span class="line">            <span class="type">int</span> <span class="variable">valueHash</span> <span class="operator">=</span> (value==<span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">            <span class="keyword">return</span> keyHash ^ valueHash;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Entry 类主要定义了树的节点和父节点引用，和红黑颜色属性，并对equals和hashCode进行重写，以利于<strong>比较是否相等</strong>。</p><h3 id="2-3、TreeMap-构造函数"><a href="#2-3、TreeMap-构造函数" class="headerlink" title="2.3、TreeMap 构造函数"></a>2.3、TreeMap 构造函数</h3><p>2.3.1、TreeMap()</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认构造函数，利用自然排序构造一个空的 TreeMap</span></span><br><span class="line"><span class="comment">     * 所有的key，必须实现Comparable接口</span></span><br><span class="line"><span class="comment">     * key 必须具备可比性，&#123;<span class="doctag">@code</span> k1.compareTo(k2)&#125;不能抛出&#123;<span class="doctag">@code</span> ClassCastException&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">()</span> &#123;</span><br><span class="line">        comparator = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2、TreeMap-Comparator-comparator"><a href="#2-3-2、TreeMap-Comparator-comparator" class="headerlink" title="2.3.2、TreeMap(Comparator&lt;? super K&gt; comparator)"></a>2.3.2、TreeMap(Comparator&lt;? super K&gt; comparator)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据指定的比较器构造一个空的 TreeMap</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3、TreeMap-Map-m"><a href="#2-3-3、TreeMap-Map-m" class="headerlink" title="2.3.3、TreeMap(Map&lt;? extends K,? extends V&gt; m)"></a>2.3.3、TreeMap(Map&lt;? extends K,? extends V&gt; m)</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据给定的Map，构造一个包含与给定映射相同映射的新TreeMap，根据键的自然顺序排序。 插入新映射的所有键都必须实现Comparable接口。</span></span><br><span class="line"><span class="comment">   * 此外，所有的keykey必须具备可比性，k1.compareTo(k2) 不能抛出 ClassCastException </span></span><br><span class="line"><span class="comment">   * 该方法的时间复杂度为n*log(n)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">      comparator = <span class="literal">null</span>;</span><br><span class="line">      putAll(m);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>该构造方法调用putAll方法将Map中的所有元素加入到TreeMap中</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将指定映射（map）中的所有映射复制到当前映射（TreeMap）。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; map)</span> &#123;</span><br><span class="line">       <span class="comment">//获取map的大小</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">mapSize</span> <span class="operator">=</span> map.size();</span><br><span class="line">       <span class="comment">// 如果TreeMap的大小是0,且map的大小不是0,且map是 SortedMap 类型的键值对    </span></span><br><span class="line">       <span class="keyword">if</span> (size==<span class="number">0</span> &amp;&amp; mapSize!=<span class="number">0</span> &amp;&amp; map <span class="keyword">instanceof</span> SortedMap) &#123;</span><br><span class="line">           Comparator&lt;?&gt; c = ((SortedMap&lt;?,?&gt;)map).comparator();</span><br><span class="line">           <span class="comment">// 如果TreeMap和map的比较器相等，则将map的元素全部拷贝到TreeMap中</span></span><br><span class="line">           <span class="keyword">if</span> (c == comparator || (c != <span class="literal">null</span> &amp;&amp; c.equals(comparator))) &#123;</span><br><span class="line">               ++modCount;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   buildFromSorted(mapSize, map.entrySet().iterator(),</span><br><span class="line">                                   <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">               &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 调用AbstractMap中的putAll(); AbstractMap中的putAll()又会调用 TreeMap的put() </span></span><br><span class="line">       <span class="built_in">super</span>.putAll(map);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>如果Map里的元素是<strong>有序</strong>的，就调用 <strong>buildFromSorted</strong> 方法来拷贝Map中的元素，如果Map中的元素<strong>不是有序</strong>的，就调用**AbstractMap的putAll(map)**方法，该方法源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; e : m.entrySet())</span><br><span class="line">            put(e.getKey(), e.getValue());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>AbstractMap的putAll(map)方法，是将Map中的元素一个个put（<strong>插入</strong>）到TreeMap中的，主要因为<strong>Map</strong>中的元素是<strong>无序</strong>的，因此要一个个插入到红黑树中，使其<strong>有序存放</strong>，并<strong>满足红黑树的性质</strong>。</p><h4 id="2-3-4、TreeMap-SortedMap-m"><a href="#2-3-4、TreeMap-SortedMap-m" class="headerlink" title="2.3.4、TreeMap(SortedMap&lt;K,? extends V&gt; m)"></a>2.3.4、TreeMap(SortedMap&lt;K,? extends V&gt; m)</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定是sortedMap，利用相同的排序方式构造一个新的treemap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(SortedMap&lt;K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">        <span class="comment">//获取sortedmap的comparator</span></span><br><span class="line">        comparator = m.comparator();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buildFromSorted(m.size(), m.entrySet().iterator(), <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException cannotHappen) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException cannotHappen) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先获取给定的SortedMap的比较器，然后调用 buildFromSorted 方法，将 SortedMap 中的元素插入到TreeMap中。由于SortedMap中的元素是有序的，将SortedMap中的元素直接添加到TreeMap中即可。</p><h4 id="2-4、put-K-key-V-value-插入元素"><a href="#2-4、put-K-key-V-value-插入元素" class="headerlink" title="2.4、put(K key, V value) 插入元素"></a>2.4、put(K key, V value) 插入元素</h4><p>TreeMap 添加元素实际上是向红黑树中添加节点，插入到指定位置后，再做调整，使其保持红黑树的特性。TreeMap 中使用 Entry 内部类代表节点，TreeMap 集合的 put(K key, V value) 方法实现了将 Entry 放入排序二叉树中，下面我们看一下源码的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定的值与此映射中的指定键相关联。 如果映射先前包含键的映射，则替换旧值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 与指定值关联的键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 与指定键关联的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 与key关联的旧值，如果没有key的映射，则返回null。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassCastException 如果指定的key无法与当前TreeMap中key进行比较</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">// 根节点</span></span><br><span class="line">        Entry&lt;K,V&gt; t = root;</span><br><span class="line">        <span class="comment">// 若红黑树为空，则直接创建一个根节点</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"></span><br><span class="line">            root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">            size = <span class="number">1</span>;</span><br><span class="line">            modCount++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 记录比较结果</span></span><br><span class="line">        <span class="type">int</span> cmp;</span><br><span class="line">        Entry&lt;K,V&gt; parent;</span><br><span class="line">        <span class="comment">// split comparator and comparable paths</span></span><br><span class="line">        <span class="comment">// 当前使用的比较器</span></span><br><span class="line">        Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">        <span class="comment">// 如果比较器不为空，就是用指定的比较器来维护TreeMap的元素顺序</span></span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// do while循环，查找key要插入的位置</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">               <span class="comment">// 记录上次循环的节点t</span></span><br><span class="line">                parent = t;</span><br><span class="line">                <span class="comment">// 比较当前节点的key和新插入的key的大小</span></span><br><span class="line">                cmp = cpr.compare(key, t.key);</span><br><span class="line">                <span class="comment">// 新插入的key小的话，则以当前节点的左子节点为新的比较节点</span></span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="comment">// 新插入的key大的话，则以当前节点的右子节点为新的比较节点</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="comment">// 如果当前节点的key和新插入的key相等，则覆盖原有的value</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            <span class="comment">// 只有当t为null，没有要比较节点的时，代表已经找到新节点要插入的位置</span></span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这里要求key不能为空，并且必须实现Comparable接口</span></span><br><span class="line">            <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">            <span class="comment">// 查找新节点要插入的位置</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                parent = t;</span><br><span class="line">                cmp = k.compareTo(t.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    t = t.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    t = t.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> t.setValue(value);</span><br><span class="line">            &#125; <span class="keyword">while</span> (t != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到新节点的父节点后，创建节点对象</span></span><br><span class="line">        Entry&lt;K,V&gt; e = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, parent);</span><br><span class="line">        <span class="comment">// 如果新节点key的值小于父节点key的值，则插在父节点的左侧</span></span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">            parent.left = e;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 如果新节点key的值大于等于父节点key的值，则插在父节点的右侧</span></span><br><span class="line">            parent.right = e;</span><br><span class="line">        <span class="comment">// 插入新的节点后，为了保持红黑树平衡，对红黑树进行调整</span></span><br><span class="line">        fixAfterInsertion(e);</span><br><span class="line">        <span class="comment">// map元素个数+1</span></span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>每当添加新节点时，总是从树的根节点开始比较，将根节点当成当前节点：</strong></p><p>🌂如果新增节点大于当前节点、并且当前节点的右子节点存在，则以右子节点作为当前节点；<br>🌂如果新增节点小于当前节点、并且当前节点的左子节点存在，则以左子节点作为当前节点；<br>🌂如果新增节点等于当前节点，则用新增节点覆盖当前节点，并结束循环<br>🌂重复以上几点，直到找到某个节点的左、右子节点不存在，将新节点添加该节点的子节点<br>🌂如果新节点比该节点大，则添加为右子节点；如果新节点比该节点小，则添加为左子节点。</p><h4 id="2-4-1、插入修正操作"><a href="#2-4-1、插入修正操作" class="headerlink" title="2.4.1、插入修正操作"></a>2.4.1、插入修正操作</h4><p>红黑树执行插入操作之后，要执行“<strong>插入修正操作</strong>”。<br>目的是：确保红黑树在插入节点之后，仍然是一颗红黑树，fixAfterInsertion 是新节点插入后对树进行调整的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** From CLR */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixAfterInsertion</span><span class="params">(Entry&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">       <span class="comment">//新节点都为红色</span></span><br><span class="line">       x.color = RED;</span><br><span class="line">       <span class="comment">//x存在且c不是根节点且x的父节点为红色</span></span><br><span class="line">       <span class="keyword">while</span> (x != <span class="literal">null</span> &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line">           <span class="comment">//如果x的父节点是祖父节点的左子树的话</span></span><br><span class="line">           <span class="keyword">if</span> (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">               <span class="comment">//取出祖父节点的右子树</span></span><br><span class="line">               Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">               <span class="comment">//如果祖父节点右子树是红色</span></span><br><span class="line">               <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                  <span class="comment">//将父节点变成黑色</span></span><br><span class="line">                   setColor(parentOf(x), BLACK);</span><br><span class="line">                   <span class="comment">//祖父节点的右子树变成黑色</span></span><br><span class="line">                   setColor(y, BLACK);</span><br><span class="line">                   <span class="comment">//祖父节点变成红色</span></span><br><span class="line">                   setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                   <span class="comment">//将x的引用指向祖父节点</span></span><br><span class="line">                   x = parentOf(parentOf(x));</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">//如果祖父节点右子树是黑色</span></span><br><span class="line">                   <span class="comment">//如果x节点是父节点的右子树</span></span><br><span class="line">                   <span class="keyword">if</span> (x == rightOf(parentOf(x))) &#123;</span><br><span class="line">                       <span class="comment">//x引用指向父节点</span></span><br><span class="line">                       x = parentOf(x);</span><br><span class="line">                       <span class="comment">//左旋</span></span><br><span class="line">                       rotateLeft(x);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//将x的父节点变成黑色</span></span><br><span class="line">                   setColor(parentOf(x), BLACK);</span><br><span class="line">                   <span class="comment">//x的祖父节点变成红色</span></span><br><span class="line">                   setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                   <span class="comment">//右旋</span></span><br><span class="line">                   rotateRight(parentOf(parentOf(x)));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//如果x的父节点是祖父节点的右子树</span></span><br><span class="line">               <span class="comment">//取出祖父节点的左子树</span></span><br><span class="line">               Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">               <span class="comment">//如果祖父节点左子树为红色</span></span><br><span class="line">               <span class="keyword">if</span> (colorOf(y) == RED) &#123;</span><br><span class="line">                   setColor(parentOf(x), BLACK);</span><br><span class="line">                   setColor(y, BLACK);</span><br><span class="line">                   setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                   x = parentOf(parentOf(x));</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//祖父节点左子树为黑色</span></span><br><span class="line">                   <span class="comment">//如果x是父节点的左子树</span></span><br><span class="line">                   <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                       <span class="comment">//x引用指向父节点</span></span><br><span class="line">                       x = parentOf(x);</span><br><span class="line">                       <span class="comment">//右旋</span></span><br><span class="line">                       rotateRight(x);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">//将x的父节点变成黑色</span></span><br><span class="line">                   setColor(parentOf(x), BLACK);</span><br><span class="line">                   <span class="comment">//将x的祖父节点变成红色</span></span><br><span class="line">                   setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                   <span class="comment">//左旋</span></span><br><span class="line">                   rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       root.color = BLACK;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="2-5、remove-Object-key-删除元素"><a href="#2-5、remove-Object-key-删除元素" class="headerlink" title="2.5、remove(Object key) 删除元素"></a>2.5、remove(Object key) 删除元素</h3><p>删除节点的时候调用的是deleteEntry(Entry&lt;K,V&gt; p)方法，这个方法主要是<strong>删除</strong>节点<strong>并且平衡</strong>红黑树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果存在的话，根据指定的key从treemap中移除指定的键值对</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  key 要移除的键值对的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 与key关联的旧值，如果没有key的映射，则返回null。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据key查找到对应的节点对象</span></span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 取出 key 对应的value，返回使用</span></span><br><span class="line">        <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> p.value;</span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line">        deleteEntry(p);</span><br><span class="line">        <span class="comment">// 返回 key对应的value</span></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>deleteEntry 方法只需按照二叉排序树的操作步骤实现即可，删除指定节点后，再对树进行调整。</p><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点p，然后重新平衡树。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteEntry</span><span class="params">(Entry&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">        <span class="comment">// 修改次数加一</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">// map 元素个数减一</span></span><br><span class="line">        size--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果被删除的节点p的左右子节点都不为空，则查找其替代节点（要删除的节点有两个子节点）</span></span><br><span class="line">        <span class="keyword">if</span> (p.left != <span class="literal">null</span> &amp;&amp; p.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 查找p的替代节点</span></span><br><span class="line">            Entry&lt;K,V&gt; s = successor(p);</span><br><span class="line">            p.key = s.key;</span><br><span class="line">            p.value = s.value;</span><br><span class="line">            <span class="comment">// 将p指向替代节点</span></span><br><span class="line">            p = s;</span><br><span class="line">        &#125; <span class="comment">// p has 2 children</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// replacement 为替代节点p的继承者，p的左节点存在则用p的左节点替代，否则用p的右节点</span></span><br><span class="line">        Entry&lt;K,V&gt; replacement = (p.left != <span class="literal">null</span> ? p.left : p.right);</span><br><span class="line">        <span class="comment">//要删除的节点只有一个子节点</span></span><br><span class="line">        <span class="keyword">if</span> (replacement != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将p的父节点赋给替代节点</span></span><br><span class="line">            replacement.parent = p.parent;</span><br><span class="line">            <span class="comment">// 如果替代节点p的父节点为空，则p为根节点，将replacement设置为根节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.parent == <span class="literal">null</span>)</span><br><span class="line">                root = replacement;</span><br><span class="line">            <span class="comment">// 如果替代节点p是其父节点的左节点，则将replacement设置为其父节点的左节点</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.left)</span><br><span class="line">                p.parent.left  = replacement;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 如果替代节点p是其父节点的右节点，则将replacement设置为其父节点的右节点</span></span><br><span class="line">                p.parent.right = replacement;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// Null out links so they are OK to use by fixAfterDeletion.</span></span><br><span class="line">            <span class="comment">// 将替代节点p的left、right、parent的指针都指向空，解除前后引用关系</span></span><br><span class="line">            p.left = p.right = p.parent = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 如果替代节点p的颜色是黑色，则需要调整红黑树以保持其平衡</span></span><br><span class="line">            <span class="keyword">if</span> (p.color == BLACK)</span><br><span class="line">                fixAfterDeletion(replacement);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.parent == <span class="literal">null</span>) &#123; <span class="comment">// return if we are the only node.</span></span><br><span class="line">            <span class="comment">// 如果要替代节点p没有父节点，代表p为根节点，直接删除即可</span></span><br><span class="line">            root = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//  No children. Use self as phantom replacement and unlink.</span></span><br><span class="line">            <span class="comment">// 如果p的颜色是黑色，则调整红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (p.color == BLACK)</span><br><span class="line">                fixAfterDeletion(p);</span><br><span class="line">            <span class="comment">// 删除替代节点p</span></span><br><span class="line">            <span class="keyword">if</span> (p.parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (p == p.parent.left)</span><br><span class="line">                    p.parent.left = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (p == p.parent.right)</span><br><span class="line">                    p.parent.right = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 解除p对p父节点的引用</span></span><br><span class="line">                p.parent = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre><h3 id="2-5-1、successor-获取后继节点"><a href="#2-5-1、successor-获取后继节点" class="headerlink" title="2.5.1、successor 获取后继节点"></a>2.5.1、successor 获取后继节点</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 返回指定Entry的后继者，如果不存在，则返回null。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> &lt;K,V&gt; TreeMap.Entry&lt;K,V&gt; <span class="title function_">successor</span><span class="params">(Entry&lt;K,V&gt; t)</span> &#123;</span><br><span class="line">       <span class="comment">//t为null，则直接返回null</span></span><br><span class="line">       <span class="keyword">if</span> (t == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="comment">// 查找右子树的最左子树</span></span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//获取右子树</span></span><br><span class="line">           Entry&lt;K,V&gt; p = t.right;</span><br><span class="line">           <span class="comment">//循环遍历左子树，获取最后一个</span></span><br><span class="line">           <span class="keyword">while</span> (p.left != <span class="literal">null</span>)</span><br><span class="line">               p = p.left;</span><br><span class="line">           <span class="keyword">return</span> p;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 查找左子树的最右子树</span></span><br><span class="line">           <span class="comment">//获取父节点</span></span><br><span class="line">           Entry&lt;K,V&gt; p = t.parent;</span><br><span class="line">           <span class="comment">//ch 指向 t</span></span><br><span class="line">           Entry&lt;K,V&gt; ch = t;</span><br><span class="line">           </span><br><span class="line">           <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; ch == p.right) &#123;</span><br><span class="line">               ch = p;</span><br><span class="line">               p = p.parent;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> p;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>当从二叉搜索树中删除一个节点之后，为了让它依然保持为二叉搜索树，程序必须对该二叉搜索树进行维护。维护可分为如下几种情况：</p><p><img src="https://s1.ax1x.com/2020/04/16/JFMnjU.png"></p><p>🌂被删除的节点是叶子节点，则只需将它从其父节点中删除即可。</p><p>🌂被删除节点 p 只有左子树，将 p 的左子树 pL 添加成 p 的父节点的左子树即可；被删除节点 p 只有右子树，将 p 的右子树 pR 添加成 p 的父节点的右子树即可。</p><p>🌂若被删除节点 p 的左、右子树均非空，有两种做法：</p><p>1.将 pL 设为 p 的父节点 q 的左或右子节点（取决于 p 是其父节点 q 的左、右子节点），将 pR 设为 p 节点的中序前趋节点 s 的右子节点（s 是 pL 最右下的节点，也就是 pL 子树中最大的节点）。</p><p>2.以 p 节点的中序前趋或后继替代 p 所指节点，然后再从原排序二叉树中删去中序前趋或后继节点即可。（也就是用大于 p 的最小节点或小于 p 的最大节点代替 p 节点即可）。</p><h4 id="2-5-2、删除后修正操作"><a href="#2-5-2、删除后修正操作" class="headerlink" title="2.5.2、删除后修正操作"></a>2.5.2、删除后修正操作</h4><p>红黑树的删除遇到的主要问题就是被删除路径上的黑色节点减少，于是需要进行一系列旋转和着色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** From CLR */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fixAfterDeletion</span><span class="params">(Entry&lt;K,V&gt; x)</span> &#123;</span><br><span class="line">        <span class="comment">// while循环，保证要删除节点x不是根节点，并且是黑色（根节点和红色不需要调整）</span></span><br><span class="line">        <span class="keyword">while</span> (x != root &amp;&amp; colorOf(x) == BLACK) &#123;</span><br><span class="line">            <span class="comment">// 如果要删除节点x是其父节点的左子树</span></span><br><span class="line">            <span class="keyword">if</span> (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                <span class="comment">// 取出要删除节点x的兄弟节点</span></span><br><span class="line">                Entry&lt;K,V&gt; sib = rightOf(parentOf(x));</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果删除节点x的兄弟节点是红色</span></span><br><span class="line">                <span class="keyword">if</span> (colorOf(sib) == RED) &#123;</span><br><span class="line">                    <span class="comment">// 将x的兄弟节点颜色设置为黑色</span></span><br><span class="line">                    setColor(sib, BLACK);</span><br><span class="line">                    <span class="comment">// 将x的父节点颜色设置为红色</span></span><br><span class="line">                    setColor(parentOf (x), RED);</span><br><span class="line">                    <span class="comment">// 左旋x的父节点</span></span><br><span class="line">                    rotateLeft( parentOf(x));</span><br><span class="line">                    <span class="comment">// 将sib重新指向旋转后x的兄弟节点 </span></span><br><span class="line">                    sib = rightOf(parentOf (x));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果x的兄弟节点的两个子节点都是黑色</span></span><br><span class="line">                <span class="keyword">if</span> (colorOf(leftOf(sib))  == BLACK &amp;&amp;</span><br><span class="line">                    colorOf(rightOf (sib)) == BLACK) &#123;</span><br><span class="line">                    <span class="comment">// 将兄弟节点的颜色设置为红色</span></span><br><span class="line">                    setColor(sib, RED);</span><br><span class="line">                    <span class="comment">// 将x的父节点指向x</span></span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 如果x的兄弟节点右子节点是黑色，左子节点是红色</span></span><br><span class="line">                    <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK) &#123;</span><br><span class="line">                        <span class="comment">// 将x的兄弟节点的左子节点设置为黑色</span></span><br><span class="line">                        setColor(leftOf (sib), BLACK);</span><br><span class="line">                        <span class="comment">// 将x的兄弟节点设置为红色</span></span><br><span class="line">                        setColor(sib, RED);</span><br><span class="line">                        <span class="comment">// 右旋x的兄弟节点</span></span><br><span class="line">                        rotateRight(sib);</span><br><span class="line">                        <span class="comment">// 将sib重新指向旋转后x的兄弟节点</span></span><br><span class="line">                        sib = rightOf(parentOf (x));</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 如果x的兄弟节点右子节点是红色</span></span><br><span class="line">                    setColor(sib, colorOf (parentOf(x)));</span><br><span class="line">                    <span class="comment">// 将x的父节点设置为黑色</span></span><br><span class="line">                    setColor(parentOf (x), BLACK);</span><br><span class="line">                    <span class="comment">// 将x的兄弟节点的右子节点设置为黑色</span></span><br><span class="line">                    setColor(rightOf (sib), BLACK);</span><br><span class="line">                    <span class="comment">// 左旋x的父节点</span></span><br><span class="line">                    rotateLeft( parentOf(x));</span><br><span class="line">                    <span class="comment">// 达到平衡，将x指向root，退出循环</span></span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// symmetric</span></span><br><span class="line">                <span class="comment">// 如果要删除节点x是其父亲的右孩子，同上逻辑</span></span><br><span class="line">                Entry&lt;K,V&gt; sib = leftOf(parentOf(x));</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (colorOf(sib) == RED) &#123;</span><br><span class="line">                    setColor(sib, BLACK);</span><br><span class="line">                    setColor(parentOf(x), RED);</span><br><span class="line">                    rotateRight(parentOf(x));</span><br><span class="line">                    sib = leftOf(parentOf(x));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (colorOf(rightOf(sib)) == BLACK &amp;&amp;</span><br><span class="line">                    colorOf(leftOf(sib)) == BLACK) &#123;</span><br><span class="line">                    setColor(sib, RED);</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (colorOf(leftOf(sib)) == BLACK) &#123;</span><br><span class="line">                        setColor(rightOf(sib), BLACK);</span><br><span class="line">                        setColor(sib, RED);</span><br><span class="line">                        rotateLeft(sib);</span><br><span class="line">                        sib = leftOf(parentOf(x));</span><br><span class="line">                    &#125;</span><br><span class="line">                    setColor(sib, colorOf(parentOf(x)));</span><br><span class="line">                    setColor(parentOf(x), BLACK);</span><br><span class="line">                    setColor(leftOf(sib), BLACK);</span><br><span class="line">                    rotateRight(parentOf(x));</span><br><span class="line">                    x = root;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setColor(x, BLACK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-6、get-Object-key-获取元素"><a href="#2-6、get-Object-key-获取元素" class="headerlink" title="2.6、get(Object key) 获取元素"></a>2.6、get(Object key) 获取元素</h3><p>相对于新增和删除元素来说，获取元素是如此的简单，按照二叉树的遍历查找即可。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定键映射到的值，如果此映射不包含键的映射，则返回null。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 返回值null不一定表示映射不包含键的映射; 集合中也可能将键明确映射为null。 containsKey操作可用于区分这两种情况。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Entry&lt;K,V&gt; p = getEntry(key);</span><br><span class="line">        <span class="keyword">return</span> (p==<span class="literal">null</span> ? <span class="literal">null</span> : p.value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据给定给定key，返回元素，如果不存在，则返回null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">getEntry</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// Offload comparator-based version for sake of performance</span></span><br><span class="line">        <span class="comment">// 如果存在 comparator，调用 getEntryUsingComparator</span></span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getEntryUsingComparator(key);</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Comparable&lt;? <span class="built_in">super</span> K&gt; k = (Comparable&lt;? <span class="built_in">super</span> K&gt;) key;</span><br><span class="line">        Entry&lt;K,V&gt; p = root;</span><br><span class="line">        <span class="comment">//利用二叉树性质，进行循环搜索</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> k.compareTo(p.key);</span><br><span class="line">            <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                p = p.left;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                p = p.right;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用比较器的getEntry版本。 从getEntry分离以获得性能。 (对于大多数方法来说，这是不值得做的，这些方法较少依赖于比较器性能，但在这里是值得的。)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">getEntryUsingComparator</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> (K) key;</span><br><span class="line">        Comparator&lt;? <span class="built_in">super</span> K&gt; cpr = comparator;</span><br><span class="line">        <span class="keyword">if</span> (cpr != <span class="literal">null</span>) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; p = root;</span><br><span class="line">            <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> cpr.compare(k, p.key);</span><br><span class="line">                <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>)</span><br><span class="line">                    p = p.left;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>)</span><br><span class="line">                    p = p.right;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十九）：LinkedHashMap 源码分析</title>
      <link href="/2020/04/16/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9ALinkedHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/16/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9ALinkedHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、LinkedHashMap-简介"><a href="#1、LinkedHashMap-简介" class="headerlink" title="1、LinkedHashMap 简介"></a>1、LinkedHashMap 简介</h2><p><strong>HashMap <strong>是</strong>无序</strong>的，HashMap 在 put 的时候是根据 key 的 hashcode 进行 hash 然后放入对应的位置。所以在按照一定顺序 put 进 HashMap 中后，再次遍历出 HashMap 的顺序跟 put 的顺序不同（除非在 put 的时候 key 已经按照 hashcode 排好序了）。</p><p>JAVA 在 JDK1.4 以后提供了 LinkedHashMap 来帮助我们实现了有序的 HashMap。</p><p>LinkedHashMap** 继承<strong>自 HashMap，是Map接口的哈希表和链接列表实现，具有</strong>可预知的迭代顺序**。此实现提供所有可选的映射操作，并允许使用 <strong>null</strong> 值和 <strong>null</strong> 键。</p><p>LinkedHashMap 实现与 HashMap 的不同之处在于，LinkedHashMap 在 HashMap 基础上，维护了一条<strong>双向链表</strong>。此链接列表定义了迭代顺序，该迭代顺序可以是插入顺序或者是访问顺序。</p><p>除此之外，LinkedHashMap 对访问顺序也提供了相关支持。在一些场景下，该特性很有用，比如<strong>缓存</strong>。</p><p><strong>注意</strong>，此<strong>实现不是同步</strong>的。如果多个线程同时访问链接的哈希映射，而其中至少一个线程从结构上修改了该映射，则它必须保持外部同步。</p><p>根据链表中元素的顺序可以分为：按插入顺序的链表，和按访问顺序(调用 get 方法)的链表。默认是按插入顺序排序，如果指定按访问顺序排序，那么调用get方法后，会将这次访问的元素移至链表尾部，不断访问可以形成按访问顺序排序的链表。</p><p>在实现上，LinkedHashMap 它继承自 **HashMap(public class LinkedHashMap&lt;K,V&gt; extends HashMap&lt;K,V&gt; implements Map&lt;K,V&gt;)**、底层使用哈希表与双向链表来保存所有元素。其基本操作与父类 HashMap 相似，它通过重写父类相关的方法，来实现自己的链接列表特性。</p><p>所以，在学习 LinkedHashMap 的源码之前，很有必要先看懂 HashMap 的源码。关于 HashMap 的源码分析，大家可以参考笔者之前的一篇文章<a href="http://ur868q.coding-pages.com/2020/04/12/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9AHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十八）：HashMap 源码分析</strong></a></p><h2 id="2、LinkedHashMap-数据结构"><a href="#2、LinkedHashMap-数据结构" class="headerlink" title="2、LinkedHashMap 数据结构"></a>2、LinkedHashMap 数据结构</h2><p><img src="https://s1.ax1x.com/2020/04/16/JFeoZR.png"><br>图片来自网络</p><p>LinkedHashMap 和 HashMap 的区别在于它们的基本数据结构上，LinkedHashMap 中采用的链表是双向循环链表，也就是Entry，这种数据结构，最关键的是保证在增加节点、删除节点时不断链。</p><h3 id="2-1、Entry-的继承体系"><a href="#2-1、Entry-的继承体系" class="headerlink" title="2.1、Entry 的继承体系"></a>2.1、Entry 的继承体系</h3><p><img src="https://s1.ax1x.com/2020/04/16/JFe4sJ.png"></p><p>LinkedHashMap 内部类 Entry 继承自 HashMap 内部类 Node，并新增了两个引用，分别是 before 和 after。这两个引用的用途就是用于维护双向链表。</p><p>TreeNode 继承 LinkedHashMap 的内部类 Entry 后，就具备了和其他 Entry 一起组成链表的能力。</p><p>但是这里需要大家考虑一个问题。当我们使用 HashMap 时，TreeNode 并不需要具备组成链表能力。如果继承 LinkedHashMap 内部类 Entry ，TreeNode 就多了两个用不到的引用，这样做不是会浪费空间吗？</p><p>首先这么做确实会浪费空间，但与 TreeNode 通过继承获取的组成链表的能力相比，这点浪费是值得的。在 HashMap 的设计思路注释中，有这样一段话，大致意思如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Because TreeNodes are about twice the size of regular nodes, we</span><br><span class="line">use them only when bins contain enough nodes to warrant <span class="title function_">use</span></span><br><span class="line"><span class="params">(see TREEIFY_THRESHOLD)</span>. And when they become too <span class="title function_">small</span> <span class="params">(due to</span></span><br><span class="line"><span class="params">removal or resizing)</span> they are converted back to plain bins. In</span><br><span class="line">usages with well-distributed user hashCodes, tree bins are</span><br><span class="line">rarely used.</span><br></pre></td></tr></table></figure><p>TreeNode 对象的大小约是普通 Node 对象的2倍，我们仅在桶（bin）中包含足够多的节点时再使用。当桶中的节点数量变少时（取决于删除和扩容），TreeNode 会被转成 Node。当用户实现的 hashCode 方法具有良好分布性时，树类型的桶将会很少被使用。</p><p>一般情况下，只要 hashCode 的实现够合理，Node 组成的链表很少会被转成由 TreeNode 组成的红黑树。也就是说 TreeNode 使用的并不多，浪费那点空间是可接受的。假如 TreeNode 的机制继承自 Node 类，那么它要想具备组成链表的能力，就需要 Node 去继承 LinkedHashMap 的内部类 Entry。这样就得不偿失了，浪费很多空间去获取不一定用得到的能力。</p><h2 id="3、LinkedHashMap-源码分析"><a href="#3、LinkedHashMap-源码分析" class="headerlink" title="3、LinkedHashMap 源码分析"></a>3、LinkedHashMap 源码分析</h2><h3 id="3-1、LinkedHashMap-类图"><a href="#3-1、LinkedHashMap-类图" class="headerlink" title="3.1、LinkedHashMap 类图"></a>3.1、LinkedHashMap 类图</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashMap</span>&lt;K,V&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/16/JFe5L9.png"></p><h3 id="3-2、LinkedHashMap-构造函数"><a href="#3-2、LinkedHashMap-构造函数" class="headerlink" title="3.2、LinkedHashMap 构造函数"></a>3.2、LinkedHashMap 构造函数</h3><p>LinkedHashMap有5个构造方法，从构造方法中可以看出，默认都采用插入顺序对key进行排序来维持取出键值对的顺序。所有构造方法都是通过调用父类的构造方法来创建对象的。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 排序模式，true-访问顺序，false-插入顺序</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">boolean</span> accessOrder;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用指定的初始容量，加载因子和排序模式构造一个空的LinkedHashMap实例。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  initialCapacity 初始容量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  loadFactor      加载因子</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException 如果初始容量为负或负载因子是非正的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">       <span class="comment">//按插入顺序对key排序</span></span><br><span class="line">       accessOrder = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用指定的初始容量和默认加载因子（0.75）构造一个空的按插入顺序排序的LinkedHashMap实例。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  初始容量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException 如果初始容量为负</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(initialCapacity);</span><br><span class="line">       <span class="comment">//按插入顺序对key排序</span></span><br><span class="line">       accessOrder = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用默认初始容量（16）和加载因子（0.75）构造一个空的按插入顺序排序的 LinkedHashMap 实例。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>();</span><br><span class="line">       <span class="comment">//按插入顺序对key排序</span></span><br><span class="line">       accessOrder = <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用与指定映射相同的映射构造一个按插入顺序排序的LinkedHashMap实例。 LinkedHashMap 实例使用默认加载因子（0.75）和足以保存指定映射中的映射的初始容量创建。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  m 映射的映射将放置在此映射中</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException 如果给定的 map 为null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>();</span><br><span class="line">       <span class="comment">//按插入顺序对key排序</span></span><br><span class="line">       accessOrder = <span class="literal">false</span>;</span><br><span class="line">       putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用指定的初始容量，加载因子和排序模式构造一个空的LinkedHashMap实例。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  initialCapacity 初始容量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  loadFactor      加载因子</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  accessOrder     排序模式</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException 如果初始容量为负或负载因子是非正的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">LinkedHashMap</span><span class="params">(<span class="type">int</span> initialCapacity,</span></span><br><span class="line"><span class="params">                        <span class="type">float</span> loadFactor,</span></span><br><span class="line"><span class="params">                        <span class="type">boolean</span> accessOrder)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(initialCapacity, loadFactor);</span><br><span class="line">       <span class="built_in">this</span>.accessOrder = accessOrder;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、LinkedHashMap-成员变量"><a href="#3-3、LinkedHashMap-成员变量" class="headerlink" title="3.3、LinkedHashMap 成员变量"></a>3.3、LinkedHashMap 成员变量</h3><p>LinkedHashMap 采用的 hash 算法和 HashMap 相同，但是它重新定义了数组中保存的元素 Entry，该 Entry 除了保存当前对象的引用外，还保存了其上一个元素 before 和下一个元素 after 的引用，从而在哈希表的基础上又构成了双向链接列表。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表的表头元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 双向链表的表尾元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果为true，则按照访问顺序；如果为false，则按照插入顺序。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> accessOrder;</span><br></pre></td></tr></table></figure><h2 id="4、常用方法源码分析"><a href="#4、常用方法源码分析" class="headerlink" title="4、常用方法源码分析"></a>4、常用方法源码分析</h2><h3 id="4-1、containsValue-Object-value"><a href="#4-1、containsValue-Object-value" class="headerlink" title="4.1、containsValue( Object value)"></a>4.1、containsValue( Object value)</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 如果此Map存在与指定值匹配的一个或多个键，则返回true。</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> value 参数value</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 如果linkedHashMap中的键值对存在与指定值匹配的一个或多个键，返回true</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">      <span class="comment">//遍历双向循环链表</span></span><br><span class="line">      <span class="keyword">for</span> (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != <span class="literal">null</span>; e = e.after) &#123;</span><br><span class="line">          <span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> e.value;</span><br><span class="line">          <span class="keyword">if</span> (v == value || (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//否则返回false</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、get-Object-key"><a href="#4-2、get-Object-key" class="headerlink" title="4.2、get( Object key)"></a>4.2、get( Object key)</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 返回指定键映射到的值，或者如果此映射不包含键的映射，则返回null。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 返回值null不一定表示不包含键的映射，也可能该键的映射值null。 containsKey操作可用于区分这两种情况。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">if</span> (accessOrder)</span><br><span class="line">           afterNodeAccess(e);</span><br><span class="line">       <span class="keyword">return</span> e.value;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、getOrDefault-Object-key-V-defaultValue"><a href="#4-3、getOrDefault-Object-key-V-defaultValue" class="headerlink" title="4.3、getOrDefault( Object key, V defaultValue)"></a>4.3、getOrDefault( Object key, V defaultValue)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回指定键映射到的值，如果不包含键的映射，则返回defaultValue。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> V <span class="title function_">getOrDefault</span><span class="params">(Object key, V defaultValue)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> defaultValue;</span><br><span class="line">    <span class="keyword">if</span> (accessOrder)</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4、clear"><a href="#4-4、clear" class="headerlink" title="4.4、clear()"></a>4.4、clear()</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 清空linkedHashMap</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//清空哈希表</span></span><br><span class="line">      <span class="built_in">super</span>.clear();</span><br><span class="line">      <span class="comment">//清空双向循环链表</span></span><br><span class="line">      head = tail = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-5、removeEldestEntry-Map-Entry-eldest"><a href="#4-5、removeEldestEntry-Map-Entry-eldest" class="headerlink" title="4.5、removeEldestEntry( Map.Entry&lt;K,V&gt; eldest)"></a>4.5、removeEldestEntry( Map.Entry&lt;K,V&gt; eldest)</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果此映射应该删除最旧条目，则返回true。</span></span><br><span class="line"><span class="comment">     * 在将新条目插入后，put和putAll将调用此方法。 它为实现者提供了在每次添加新条目时删除最旧条目的机会。</span></span><br><span class="line"><span class="comment">     * 如果应用于缓存，这将非常有用：它允许映射通过删除过时条目来减少内存消耗。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 示例：此方法允许LinkedHashMap 存储100个条目，然后在每次添加新条目时删除最旧的条目，始终保持100个条目的稳定状态。</span></span><br><span class="line"><span class="comment">     *  private static final int MAX_ENTRIES = 100;</span></span><br><span class="line"><span class="comment">     *  protected boolean removeEldestEntry(Map.Entry eldest) &#123;</span></span><br><span class="line"><span class="comment">     *   return size() &gt; MAX_ENTRIES;</span></span><br><span class="line"><span class="comment">     *  &#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *  这个方法一般不会直接修改map，而是通过返回true或者false来控制是否修改map。</span></span><br><span class="line"><span class="comment">     *  这个方法仅仅返回false，这样头节点就永远都不会被删除了。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>    eldest 头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>   如果map应该删除头节点就返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-6、keySet"><a href="#4-6、keySet" class="headerlink" title="4.6、keySet()"></a>4.6、keySet()</h3>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 linkedHashMap中所有key的集合</span></span><br><span class="line"><span class="comment">     * 改变linkedHashMap会影响到set，反之亦然。</span></span><br><span class="line"><span class="comment">     * 如果当迭代器迭代set时，linkedHashMap被修改(除非是迭代器自己的remove()方法)，迭代器的结果是不确定的。</span></span><br><span class="line"><span class="comment">     * set支持元素的删除，通过Iterator.remove、Set.remove、removeAll、retainAll、clear操作删除hashMap中对应的键值对。不支持add和addAll方法。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回linkedHashMap中所有key的set视图</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;K&gt; ks = keySet;</span><br><span class="line">        <span class="keyword">if</span> (ks == <span class="literal">null</span>) &#123;</span><br><span class="line">            ks = <span class="keyword">new</span> <span class="title class_">LinkedKeySet</span>();</span><br><span class="line">            keySet = ks;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ks;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LinkedKeySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;K&gt; &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; LinkedHashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinkedKeyIterator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> containsKey(o); &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>) != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;K&gt; <span class="title function_">spliterator</span><span class="params">()</span>  &#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterators.spliterator(<span class="built_in">this</span>, Spliterator.SIZED |</span><br><span class="line">                                            Spliterator.ORDERED |</span><br><span class="line">                                            Spliterator.DISTINCT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> K&gt; action)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">mc</span> <span class="operator">=</span> modCount;</span><br><span class="line">            <span class="keyword">for</span> (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != <span class="literal">null</span>; e = e.after)</span><br><span class="line">                action.accept(e.key);</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4-7、values"><a href="#4-7、values" class="headerlink" title="4.7、values()"></a>4.7、values()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回linkedHashMap中所有value的collection集合</span></span><br><span class="line"><span class="comment">   * 改变linkedHashMap会改变collection，反之亦然。</span></span><br><span class="line"><span class="comment">   * 如果当迭代器迭代collection时，linkedHashMap被修改（除非是迭代器自己的remove()方法），迭代器的结果是不确定的。</span></span><br><span class="line"><span class="comment">   * collection支持元素的删除，通过Iterator.remove、Collection.remove、removeAll、retainAll、clear操作删除linkedHashMap中对应的键值对。不支持add和addAll方法。</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回linkedHashMap中所有value的collection集合</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">      Collection&lt;V&gt; vs = values;</span><br><span class="line">      <span class="keyword">if</span> (vs == <span class="literal">null</span>) &#123;</span><br><span class="line">          vs = <span class="keyword">new</span> <span class="title class_">LinkedValues</span>();</span><br><span class="line">          values = vs;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> vs;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LinkedValues</span> <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;V&gt; &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; LinkedHashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;V&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinkedValueIterator</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> containsValue(o); &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;V&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> Spliterators.spliterator(<span class="built_in">this</span>, Spliterator.SIZED |</span><br><span class="line">                                          Spliterator.ORDERED);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> V&gt; action)</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">          <span class="type">int</span> <span class="variable">mc</span> <span class="operator">=</span> modCount;</span><br><span class="line">          <span class="keyword">for</span> (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != <span class="literal">null</span>; e = e.after)</span><br><span class="line">              action.accept(e.value);</span><br><span class="line">          <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="4-8、entrySet"><a href="#4-8、entrySet" class="headerlink" title="4.8、entrySet()"></a>4.8、entrySet()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 返回此映射中包含的映射（Entry）的Set视图。 当修改映射时会影响Set视图，反之亦然。</span></span><br><span class="line"><span class="comment">    * 如果在对集合进行迭代时修改了映射（除非通过迭代器自己的remove操作，或者通过迭代器返回的映射条目上的set* Value操作），迭代的结果是未定义的。</span></span><br><span class="line"><span class="comment">    * 该集支持元素删除，它通过Iterator.remove，Set.remove，removeAll，retainAll和clear操作从映射中删除相应的映射。 它不支持add或addAll操作。 它的Spliterator通常提供更快的顺序性能，但并行性能比HashMap差。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;</span><br><span class="line">       Set&lt;Map.Entry&lt;K,V&gt;&gt; es;</span><br><span class="line">       <span class="keyword">return</span> (es = entrySet) == <span class="literal">null</span> ? (entrySet = <span class="keyword">new</span> <span class="title class_">LinkedEntrySet</span>()) : es;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">LinkedEntrySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; LinkedHashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinkedEntryIterator</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">           <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">           Node&lt;K,V&gt; candidate = getNode(hash(key), key);</span><br><span class="line">           <span class="keyword">return</span> candidate != <span class="literal">null</span> &amp;&amp; candidate.equals(e);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">               Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o;</span><br><span class="line">               <span class="type">Object</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">               <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">               <span class="keyword">return</span> removeNode(hash(key), key, value, <span class="literal">true</span>, <span class="literal">true</span>) != <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() &#123;</span><br><span class="line">           <span class="keyword">return</span> Spliterators.spliterator(<span class="built_in">this</span>, Spliterator.SIZED |</span><br><span class="line">                                           Spliterator.ORDERED |</span><br><span class="line">                                           Spliterator.DISTINCT);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> Map.Entry&lt;K,V&gt;&gt; action)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">           <span class="type">int</span> <span class="variable">mc</span> <span class="operator">=</span> modCount;</span><br><span class="line">           <span class="keyword">for</span> (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != <span class="literal">null</span>; e = e.after)</span><br><span class="line">               action.accept(e);</span><br><span class="line">           <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-9、链表节点的创建"><a href="#4-9、链表节点的创建" class="headerlink" title="4.9、链表节点的创建"></a>4.9、链表节点的创建</h3><p>链表的创建过程是在插入键值对节点时开始的，初始情况下，让 LinkedHashMap 的 head 和 tail 引用同时指向新节点，链表就算建立起来了。随后不断有新节点插入，通过将新节点接在 tail 引用指向节点的后面，即可实现链表的更新。</p><p>Map 类型的集合类是通过 put(K,V) 方法插入键值对，LinkedHashMap 本身并没有覆写父类的 put 方法，而是直接使用了父类的实现。但在 HashMap 中，put 方法插入的是 HashMap 内部类 Node 类型的节点，该类型的节点并不具备与 LinkedHashMap 内部类 Entry 及其子类型节点组成链表的能力。</p><p>在 HashMap 的 putval 方法里面创建新节点是使用 newNode 方法的，自然 LinkedHashMap 只需要重写下 newNode 方法即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;...&#125;</span><br><span class="line">    <span class="comment">// 通过节点 hash 定位节点所在的桶位置，并检测桶中是否包含节点引用</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) &#123;...&#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历链表，并统计链表长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 未在单链表中找到要插入的节点，将新节点接在单链表的后面</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) &#123;...&#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 插入的节点已经存在于单链表中</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>) &#123;...&#125;</span><br><span class="line">            afterNodeAccess(e);    <span class="comment">// 回调方法</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold) &#123;...&#125;</span><br><span class="line">    afterNodeInsertion(evict);    <span class="comment">// 回调方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line">Node&lt;K,V&gt; <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(hash, key, value, next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// LinkedHashMap 中覆写</span></span><br><span class="line">Node&lt;K,V&gt; <span class="title function_">newNode</span><span class="params">(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> &#123;</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt;(hash, key, value, e);</span><br><span class="line">    <span class="comment">// 将 Entry 接在双向链表的尾部</span></span><br><span class="line">    linkNodeLast(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链表节点创建，主要分为<strong>三步</strong>：<br>🌂创建 p 节点<br>🌂关联节点<br>🌂返回节点</p><p>创建 p 节点没什么复杂的操作，和 HashMap 里面的一样，主要的操作在关联节点 linkNodeLast 中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LinkedHashMap 中实现，把节点关联到链表尾部</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkNodeLast</span><span class="params">(LinkedHashMapEntry&lt;K,V&gt; p)</span> &#123;</span><br><span class="line">    <span class="comment">// 拿到尾节点赋值给临时变量 last</span></span><br><span class="line">    LinkedHashMapEntry&lt;K,V&gt; last = tail;</span><br><span class="line">    <span class="comment">// 把创建的节点赋值给尾节点。</span></span><br><span class="line">    tail = p;</span><br><span class="line">    <span class="comment">// 如果之前的尾节点为空，说明链表为空，头节点也赋值为 p</span></span><br><span class="line">    <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">        head = p;</span><br><span class="line">    <span class="comment">// 不为空，说明有值，新节点的 before 指向以前的尾节点</span></span><br><span class="line">    <span class="comment">// 以前的尾节点的 after 指向新节点</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        p.before = last;</span><br><span class="line">        last.after = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在 linkNodeLast() 函数的内部给节点的 before 和 after属性赋值，也就把节点给串联了起来。<br>所以 LinkedHashMap 保证插入顺序的关键就是在 newNode 方法里面。</p><p>在 HashMap 的 putVal 方法里面发现了这个方法 afterNodeInsertion：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里的 afterNodeInsertion 在 HashMap 里面是空方法，专门为 LinkedHashMap 准备的，与之类似的还有两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在新增、替换、查找的时候，如果 accessOrder 为 true 会执行。</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; p)</span> &#123; &#125;</span><br><span class="line"><span class="comment">// 新增元素后会在 LinkedHashMap 中调用</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123; &#125;</span><br><span class="line"><span class="comment">// 删除元素后会在 LinkedHashMap 中调用</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; p)</span> &#123; &#125;</span><br></pre></td></tr></table></figure><h4 id="4-9-1、afterNodeInsertion-方法"><a href="#4-9-1、afterNodeInsertion-方法" class="headerlink" title="4.9.1、afterNodeInsertion 方法"></a>4.9.1、afterNodeInsertion 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeInsertion</span><span class="params">(<span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    LinkedHashMapEntry&lt;K,V&gt; first;</span><br><span class="line">    <span class="comment">//如果头节点不为 null，根据removeEldestEntry返回值判断是否移除最近最少被访问的节点</span></span><br><span class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="literal">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> first.key;</span><br><span class="line">        <span class="comment">//HashMap 中的方法</span></span><br><span class="line">        removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除最近最少被访问条件之一，通过覆盖此方法可实现不同策略的缓存</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-10、链表节点的删除"><a href="#4-10、链表节点的删除" class="headerlink" title="4.10、链表节点的删除"></a>4.10、链表节点的删除</h3><p>与插入操作一样，LinkedHashMap 删除操作相关的代码也是直接用父类的实现。在删除节点时，父类的删除逻辑并不会修复 LinkedHashMap 所维护的双向链表，这不是它的职责。那么删除节点后，被删除的节点该如何从双链表中移除呢？上文最后提到 HashMap 中三个回调方法运行 LinkedHashMap 对一些操作做出响应。所以，在删除及节点后，回调方法 afterNodeRemoval 会被调用。LinkedHashMap 覆写该方法，并在该方法中完成了移除被删除节点的操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ?</span><br><span class="line">        <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashMap 中实现</span></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) &#123;...&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 遍历单链表，寻找要删除的节点，并赋值给 node 变量</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode) &#123;...&#125;</span><br><span class="line">            <span class="comment">// 将要删除的节点从单链表中移除</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);    <span class="comment">// 调用删除回调方法进行后续操作</span></span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-10-1、afterNodeRemoval-方法"><a href="#4-10-1、afterNodeRemoval-方法" class="headerlink" title="4.10.1、afterNodeRemoval 方法"></a>4.10.1、afterNodeRemoval 方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LinkedHashMap 中覆写，HashMap 的 remove 方法中调用，传入删除的节点</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// unlink</span></span><br><span class="line">    <span class="comment">// 把删除节点 e 赋值给 p </span></span><br><span class="line">    <span class="comment">// b 删除节点的前置节点</span></span><br><span class="line">    <span class="comment">// a 删除节点的后置节点</span></span><br><span class="line">    LinkedHashMapEntry&lt;K,V&gt; p =</span><br><span class="line">        (LinkedHashMapEntry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">    <span class="comment">// 首先将删除节点的引用置为 null</span></span><br><span class="line">    p.before = p.after = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 如果删除节点前置节点是空，说明是头节点，删除后后置节点设置为头节点</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">        head = a;</span><br><span class="line">    <span class="comment">// 如果删除节点前置节点不是空，将删除节点的前置节点的 after 指向 删除节点的后置节点    </span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        b.after = a;</span><br><span class="line">    <span class="comment">// 如果是尾节点，则将删除节点的前一个指向节点置为 尾节点</span></span><br><span class="line">    <span class="keyword">if</span> (a == <span class="literal">null</span>)</span><br><span class="line">        tail = b;</span><br><span class="line">    <span class="comment">// 如果是尾节点，将删除节点的后置节点的前指向节点指向 删除节点的前置节点</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        a.before = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除的过程并不复杂，主要分为<strong>三步</strong>：</p><p>🌂根据 hash 定位到桶位置<br>🌂遍历链表或调用红黑树相关的删除方法<br>🌂从 LinkedHashMap 维护的双链表中移除要删除的节点</p><h3 id="4-11、获取数据"><a href="#4-11、获取数据" class="headerlink" title="4.11、获取数据"></a>4.11、获取数据</h3><p>LinkedHashMap 重写了 get 方法，首先通过 getNode 查找节点，但是在 LinkedHashMap 方法中并没有这个 getNode 方法，是调用的 HashMap 的 getNode 方法。<br>需要注意的是，在调用 getNode 方法以后，如果 accessOrder 为 true ，会接着调用 afterNodeAccess 方法，这个方法是在 HashMap 中定义，在 LinkedHashMap 中实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LinkedHashMap 中覆写</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 如果 accessOrder 为 true，则调用 afterNodeAccess 将被访问节点移动到链表最后</span></span><br><span class="line">    <span class="keyword">if</span> (accessOrder)</span><br><span class="line">        afterNodeAccess(e);</span><br><span class="line">    <span class="keyword">return</span> e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-11-1、afterNodeAccess-方法"><a href="#4-11-1、afterNodeAccess-方法" class="headerlink" title="4.11.1、afterNodeAccess 方法"></a>4.11.1、afterNodeAccess 方法</h4><p>把当前操作的节点移到最后，作为尾节点。<br>这样的话，就会改变我们插入时候的元素的顺序，也就实现了按照访问和插入实现元素的排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> &#123; <span class="comment">// move node to last</span></span><br><span class="line">    <span class="comment">// 最后一个节点</span></span><br><span class="line">    LinkedHashMapEntry&lt;K,V&gt; last;</span><br><span class="line">    <span class="comment">// 如果 accessOrder 为 true，并且 尾节点不是 e，进入 if 代码块</span></span><br><span class="line">    <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</span><br><span class="line">        <span class="comment">// 把删除节点 e 赋值给 p </span></span><br><span class="line">        <span class="comment">// b 删除节点的前置节点</span></span><br><span class="line">        <span class="comment">// a 删除节点的后置节点</span></span><br><span class="line">        LinkedHashMapEntry&lt;K,V&gt; p =</span><br><span class="line">            (LinkedHashMapEntry&lt;K,V&gt;)e, b = p.before, a = p.after;</span><br><span class="line">        <span class="comment">// 将当前节点的后置节点引用置为 null，因为要把 当前节点作为尾节点，尾节点的后置节点为 null</span></span><br><span class="line">        p.after = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 如果当前节点是头节点，将 a 作为头节点。</span></span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>)</span><br><span class="line">            head = a;</span><br><span class="line">        <span class="comment">// 将当前节点的前置和后置节点关联</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            b.after = a;</span><br><span class="line">        <span class="comment">// 如果 当前节点的后置节点不为尾节点，将当前节点的后置节点和前置节点关联   </span></span><br><span class="line">        <span class="keyword">if</span> (a != <span class="literal">null</span>)</span><br><span class="line">            a.before = b;</span><br><span class="line">        <span class="comment">//当前节点是尾节点 ，将 b 作为尾节点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            last = b;</span><br><span class="line">        <span class="comment">// 如果尾节点为 null，头节点也设置为当前节点 ，因为链表就一个节点   </span></span><br><span class="line">        <span class="keyword">if</span> (last == <span class="literal">null</span>)</span><br><span class="line">            head = p;</span><br><span class="line">        <span class="comment">//否则 更新当前节点p的前置节点为 原尾节点last， last的后置节点是p</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            p.before = last;</span><br><span class="line">            last.after = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将当前节点设置为尾节点，</span></span><br><span class="line">        tail = p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-12、访问顺序的维护-afterNodeAccess-方法"><a href="#4-12、访问顺序的维护-afterNodeAccess-方法" class="headerlink" title="4.12、访问顺序的维护(afterNodeAccess 方法)"></a>4.12、访问顺序的维护(afterNodeAccess 方法)</h3><p>默认情况下，LinkedHashMap 是按插入顺序维护链表。不过我们可以在初始化 LinkedHashMap，指定 accessOrder 参数为 true，即可让它按访问顺序维护链表。访问顺序的原理并不复杂，当我们调用get&#x2F;getOrDefault&#x2F;replace等方法时，只需要将这些方法访问的节点移动到链表的尾部即可。</p><h2 id="5、LinkedHashMap-总结"><a href="#5、LinkedHashMap-总结" class="headerlink" title="5、LinkedHashMap 总结"></a>5、LinkedHashMap 总结</h2><p>🌂LinkedHashMap 允许key 为 null ，value 为 null<br>🌂LinkedHashMap key 不可以重复，value 可以重复<br>🌂LinkedHashMap 内部是以数组+双向链表实现的，JDK8 以后加入了红黑树<br>🌂LinkedHashMap 内部键值对的存储是有序的（需要注意初始化的时候 accessOrder 属性的设置）。<br>🌂LinkedHashMap accessOrder 为 true，那么内部元素的顺序会根据最近访问方式排序，如果为<br>🌂false，就会按照元素插入的顺序排序<br>🌂LinkedHashMap 初始容量为 16，负载因子为 0.75，也就是当容量达到 容量*负载因子 的时候会扩容，一次扩容增加一倍。<br>🌂LinkedHashMap 内部的键值对要重写 key 对象重写 hashCode 方法、equals 方法。<br>🌂LinkedHashMap 线程不安全的，如果想要线程安全，使用SynchronizedMap 使用 Map&lt;String, String&gt; map &#x3D; Collections.synchronizedMap(new LinkedHashMap&lt;String, String&gt;(16,0.75f,true)); 来获得一个线程安全的 LinkedHashMap。SynchronizedMap 内部也是使用的 Synchronized 实现线程安全的</p><h2 id="6、怎样利用LinkedHashMap实现LRU缓存？"><a href="#6、怎样利用LinkedHashMap实现LRU缓存？" class="headerlink" title="6、怎样利用LinkedHashMap实现LRU缓存？"></a>6、怎样利用LinkedHashMap实现LRU缓存？</h2><p>我们只要把accessOrder设置为true，重写 removeEldestEntry(eldest) 即可。我们在 removeEldestEntry(eldest) 指定 map里面的元素数量超过指定的大小，开始删除最近最少使用的元素，为后续新增的元素准备空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span>&lt;K, V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> maxElements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> maxSize)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(maxSize, <span class="number">0.75F</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.maxElements = maxSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断节点数是否超出限制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> eldest 头节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 超限返回 true，否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size() &gt; <span class="built_in">this</span>.maxElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">save</span><span class="params">(K key, V val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> put(key, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">getOne</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> containsKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       LRUCache&lt;Integer, Integer&gt; cache = <span class="keyword">new</span> <span class="title class_">LRUCache</span>&lt;&gt;(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           cache.save(i, i * i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;插入5个键值对后，缓存内容：&quot;</span>);</span><br><span class="line">       System.out.println(cache + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;访问键值为2的节点后，缓存内容：&quot;</span>);</span><br><span class="line">       cache.getOne(<span class="number">7</span>);</span><br><span class="line">       System.out.println(cache + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;插入键值为8的键值对后，缓存内容：&quot;</span>);</span><br><span class="line">       cache.save(<span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">       System.out.println(cache);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>输出：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">插入<span class="number">5</span>个键值对后，缓存内容：</span><br><span class="line">&#123;<span class="number">2</span>=<span class="number">4</span>, <span class="number">3</span>=<span class="number">9</span>, <span class="number">4</span>=<span class="number">16</span>&#125;</span><br><span class="line"></span><br><span class="line">访问键值为<span class="number">2</span>的节点后，缓存内容：</span><br><span class="line">&#123;<span class="number">2</span>=<span class="number">4</span>, <span class="number">3</span>=<span class="number">9</span>, <span class="number">4</span>=<span class="number">16</span>&#125;</span><br><span class="line"></span><br><span class="line">插入键值为<span class="number">8</span>的键值对后，缓存内容：</span><br><span class="line">&#123;<span class="number">3</span>=<span class="number">9</span>, <span class="number">4</span>=<span class="number">16</span>, <span class="number">8</span>=<span class="number">8</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="7、HashMap-与-LinkedHashMap-区别"><a href="#7、HashMap-与-LinkedHashMap-区别" class="headerlink" title="7、HashMap 与 LinkedHashMap 区别"></a>7、HashMap 与 LinkedHashMap 区别</h2><p><strong>相同点：</strong><br>🌂都是基于哈希表的实现。<br>🌂存储的都是键值对映射。<br>🌂都继承了AbstractMap，实现了Map、Cloneable、Serializable。<br>🌂它们的构造函数都一样。<br>🌂默认的容量大小是16，默认的加载因子是0.75。<br>🌂都允许key和value为null。<br>🌂都是线程不安全的。</p><p><strong>不同点：</strong></p><table><thead><tr><th>不同点</th><th>HashMap</th><th>LinkedHashMap</th></tr></thead><tbody><tr><td>数据结构</td><td>数组+链表+红黑树</td><td>数组+链表+红黑树+双向循环链表</td></tr><tr><td>是否有序</td><td>无序</td><td>有序</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十八）：HashMap 源码分析</title>
      <link href="/2020/04/12/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9AHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/12/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9AHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="HashMap简述"><a href="#HashMap简述" class="headerlink" title="HashMap简述"></a>HashMap简述</h2><p><strong>HashMap</strong>是工作中最常用的集合工具之一，在整个集合框架中也是很重要的一部分，因此本篇文章主要讲述它的底层实现原理，因为jdk1.8中对HashMap的数据结构有了修改，所以本篇将会分别讲解<strong>jdk1.7</strong>和<strong>jdk1.8</strong>中HashMap的区别，通过对比学习来加深对HashMap的理解</p><p>jdk1.8之<strong>前</strong>HashMap采用【<strong>数组+链表</strong>】实现，使用链表处理hash冲突，同一个hash值都存在一个链表里。但是当存储的元素较多时，hash值相等的元素也会增多，通过key值依次查找的效率就降低了许多。</p><p>jdk1.8<strong>中</strong>，HashMap采用【<strong>数组+链表+红黑树</strong>】实现，当链表长度超过8时，将链表转换为红黑树，这样就大大提高的查找的时间</p><h2 id="HashMap数据结构"><a href="#HashMap数据结构" class="headerlink" title="HashMap数据结构"></a>HashMap数据结构</h2><h3 id="JDK1-7中HashMap数据结构"><a href="#JDK1-7中HashMap数据结构" class="headerlink" title="JDK1.7中HashMap数据结构"></a>JDK1.7中HashMap数据结构</h3><p><img src="https://s1.ax1x.com/2020/04/12/GOn0kn.png"></p><p>HashMap中的数组即为嵌套类Entry，数组中的每个元素是一个单项链表，每个Entry包含<strong>四个</strong>属性：<br>🌂key, value, hash 值和用于单向链表的 next。</p><p>🌂capacity：当前数组容量，始终保持 2^n，可以扩容，扩容后数组大小为当前的 2 倍。</p><p>🌂loadFactor：负载因子，默认为 0.75。</p><p>🌂threshold：扩容的阈值，等于 capacity * loadFactor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Entry&lt;K,V&gt; next;</span><br><span class="line">        <span class="type">int</span> hash;</span><br><span class="line">      .....................................</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="JDK1-8中HashMap数据结构"><a href="#JDK1-8中HashMap数据结构" class="headerlink" title="JDK1.8中HashMap数据结构"></a>JDK1.8中HashMap数据结构</h3><p><img src="https://s1.ax1x.com/2020/04/12/GOndTs.png"></p><p><strong>Java8 <strong>对 HashMap 做了一些</strong>修改</strong>，最大的不同就是利用了红黑树，所以其由 【<strong>数组+链表+红黑树</strong>】 组成。</p><p>我们知道，Java7 HashMap查找的时候，根据 hash 值我们能够快速定位到数组的具体<strong>下标</strong>，但是之后，需要顺着链表一个个比较下去才能找到我们需要的，时间复杂度取决于<strong>链表的长度</strong>，为 O(n)。</p><p>为了<strong>降低</strong>这部分的<strong>开</strong>销，在 Java8 中，当链表中的元素超过了 8 个以后，会将链表转换为<strong>红黑树</strong>，在进行查找的时候可以降低时间复杂度为 O(logN)。</p><p>Java7 中使用 Entry 来代表每个 HashMap 中的数据元素，Java8 中使用 Node，都是** key<strong>，</strong>value<strong>，</strong>hash** 和 <strong>next</strong> 这<strong>四个</strong>属性，不过，Node 只能用于链表的情况，红黑树的情况需要使用 TreeNode</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(<span class="type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    ...............................................</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HashMap存取值分析"><a href="#HashMap存取值分析" class="headerlink" title="HashMap存取值分析"></a>HashMap存取值分析</h2><h3 id="HashMap存值（put）分析【JDK1-7】"><a href="#HashMap存值（put）分析【JDK1-7】" class="headerlink" title="HashMap存值（put）分析【JDK1.7】"></a>HashMap存值（put）分析【JDK1.7】</h3><h4 id="HashMap存值源码走读【JDK1-7】"><a href="#HashMap存值源码走读【JDK1-7】" class="headerlink" title="HashMap存值源码走读【JDK1.7】"></a>HashMap存值源码走读【JDK1.7】</h4><p>transient Entry&lt;K,V&gt;[] table &#x3D; (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">//先判断数组是否为空，添加第一个元素时，需要先初始化数组大小</span></span><br><span class="line">        <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        <span class="comment">//数组初始化</span></span><br><span class="line">            inflateTable(threshold);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果key 为 null，会将这个 entry 放在数组的第一个元素位置 table[0]</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">        <span class="comment">//1）计算key的hash值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">        <span class="comment">//2）根据 key 哈希值和数组长度计算存放位置的下标</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> indexFor(hash, table.length);</span><br><span class="line">        <span class="comment">//3）遍历对应下标处的链表，判断是否有重复的 key ，如果有直接覆盖并返回旧值</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; e = table[i]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                e.value = value;</span><br><span class="line">                e.recordAccess(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//4）如果不存在重复的key，则将新的entry添加到链表中</span></span><br><span class="line">        addEntry(hash, key, value, i);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap数组初始化【JDK1-7】"><a href="#HashMap数组初始化【JDK1-7】" class="headerlink" title="HashMap数组初始化【JDK1.7】"></a>HashMap数组初始化【JDK1.7】</h4><p>当第一个元素插入时，会初始化数组，计算数组的初始化大小及扩容阈值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">inflateTable</span><span class="params">(<span class="type">int</span> toSize)</span> &#123;</span><br><span class="line">        <span class="comment">// 确保数组大小是2的n次方</span></span><br><span class="line">        <span class="comment">//比如toSize=3,计算结果为4；toSize=10，计算结果为16</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> roundUpToPowerOf2(toSize);</span><br><span class="line">        <span class="comment">//计算扩容阈值 数组大小 * 负载因子</span></span><br><span class="line">        threshold = (<span class="type">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//初始化数组</span></span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">Entry</span>[capacity];</span><br><span class="line">        initHashSeedAsNeeded(capacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap元素存放位置计算【JDK1-7】"><a href="#HashMap元素存放位置计算【JDK1-7】" class="headerlink" title="HashMap元素存放位置计算【JDK1.7】"></a>HashMap元素存放位置计算【JDK1.7】</h4><p>使用key的hash值与数组长度大小减一取模</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">indexFor</span><span class="params">(<span class="type">int</span> h, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">      <span class="comment">// assert Integer.bitCount(length) == 1 : &quot;length must be a non-zero power of 2&quot;;</span></span><br><span class="line">      <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap添加元素到链表【JDK1-7】"><a href="#HashMap添加元素到链表【JDK1-7】" class="headerlink" title="HashMap添加元素到链表【JDK1.7】"></a>HashMap添加元素到链表【JDK1.7】</h4><p>先判断key值是否重复，如果不重复添加新元素到链表，添加之前先判断是否需要扩容，如果需要则先扩容，重新计算hash，然后再将新元素存入对应链表的表头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 HashMap 大小已经达到了阈值，并且新元素要插入的数组位置已经有元素，那么此时要先扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="literal">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        <span class="comment">// 扩容，数组大小的2倍</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        <span class="comment">// 扩容以后，重新计算 hash 值</span></span><br><span class="line">        hash = (<span class="literal">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 重新计算扩容后元素存储的新下标</span></span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 添加元素到扩容后的链表</span></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 新值存放到链表的表头</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">createEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> bucketIndex)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap数组扩容【JDK1-7】"><a href="#HashMap数组扩容【JDK1-7】" class="headerlink" title="HashMap数组扩容【JDK1.7】"></a>HashMap数组扩容【JDK1.7】</h4><p>在插入新值的时候，如果当前的 size 已经达到了阈值，并且要插入的数组位置已经有元素，就会触发扩容，扩容后，数组大小为原来的 2 倍。<br>扩容就是用一个新的大数组替换原来的小数组，并将原来数组中的值迁移到新的数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(<span class="type">int</span> newCapacity)</span> &#123;</span><br><span class="line">        Entry[] oldTable = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> oldTable.length;</span><br><span class="line">        <span class="comment">//如果原数组大小等于最大容量值，则设置容量阈值为整形（Integer）最大值</span></span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建新数组</span></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> <span class="title class_">Entry</span>[newCapacity];</span><br><span class="line">        <span class="comment">//将原数组中的值迁移到扩容后的新数组中</span></span><br><span class="line">        transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">        table = newTable;</span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="JDK1-7取值（get）分析"><a href="#JDK1-7取值（get）分析" class="headerlink" title="JDK1.7取值（get）分析"></a>JDK1.7取值（get）分析</h3><p>相对于存值（put），HashMap<strong>取值</strong>相对简单，大致逻辑为：</p><p>🌂根据key计算hash</p><p>🌂使用key的hash值与数组长度取模（length-1）得到元素存储位置下标</p><p>🌂遍历数组中在该下标处的链表，直到找到相等的key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">//如果key为null，获取对应值</span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> getForNullKey();</span><br><span class="line">        <span class="comment">//如果key不为null，计算hash值、计算位置下标、遍历链表</span></span><br><span class="line">        Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span> == entry ? <span class="literal">null</span> : entry.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取key值为null的对应值</span></span><br><span class="line">    <span class="keyword">private</span> V <span class="title function_">getForNullKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历数组第一个位置的链表，找到key为null的值</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="literal">null</span>; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title function_">getEntry</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算key的hash</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">        <span class="comment">//计算存储位置下标并遍历对应位置链表，直到找到key相等的值</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">             e != <span class="literal">null</span>;</span><br><span class="line">             e = e.next) &#123;</span><br><span class="line">            Object k;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="HashMap存值（put）分析【JDK1-8】"><a href="#HashMap存值（put）分析【JDK1-8】" class="headerlink" title="HashMap存值（put）分析【JDK1.8】"></a>HashMap存值（put）分析【JDK1.8】</h3><h4 id="HashMap存值（put）源码走读【JDK1-8】"><a href="#HashMap存值（put）源码走读【JDK1-8】" class="headerlink" title="HashMap存值（put）源码走读【JDK1.8】"></a>HashMap存值（put）源码走读【JDK1.8】</h4><p>相对于jdk1.7中HashMap存值，jdk1.8的逻辑相对复杂，因为需要判断数据节点类型是链表还是红黑树，然后使用对应的方法进行查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// onlyIfAbsent 如果是 true，只有在不存在该 key 时才会进行 put 操作</span></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">               <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// 第一次 put 值的时候，会触发下面的 resize()，类似 java7 的第一次 put 要初始化数组长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//第一次 resize 和后续的扩容有些不同，</span></span><br><span class="line">    <span class="comment">//首次扩容触发条件是，数组为null或数组长度为0</span></span><br><span class="line">    <span class="comment">//首次扩容使用数组初始化默认值，容量为16</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//首先计算数组下标，然后判断该位置是否为null，如果为null，实例化一个新node并存入该位置</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 数组该位置有数据</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">// 判断该位置的key是否相等，如果相等，则取出该位置节点</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="comment">// 如果该节点是代表红黑树的节点，调用红黑树的插值方法</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 数组该位置上是一个链表</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 插入到链表的最后面(Java7 是插入到链表的最前面)</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// TREEIFY_THRESHOLD 为 8，所以，如果新插入的值是链表中的第 9 个</span></span><br><span class="line">                    <span class="comment">// 会触发 treeifyBin，将链表转换为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果在该链表中找到了&quot;相等&quot;的 key(== 或 equals)</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 结束循环，e 为链表中与要插入的新值的 key 相等的 node</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 存在旧值的key与要插入的key相等，进行值覆盖</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 如果 HashMap 由于新插入的值导致 size 已经超过了阈值，需要进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HashMap数组扩容【JDK1-8】"><a href="#HashMap数组扩容【JDK1-8】" class="headerlink" title="HashMap数组扩容【JDK1.8】"></a>HashMap数组扩容【JDK1.8】</h4><p>resize() 方法用于初始化数组或数组扩容，初始化时使用默认容量（16）和默认阈值（0.74*16），后来扩容时，容量为原来的 2 倍，并进行数据迁移</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//原有数组容量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//原有数组阈值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="comment">//初始化新数组容量和阈值</span></span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123; </span><br><span class="line">        <span class="comment">//如果原有数组容量超过最大容量限制，设置阈值大小为整形最大值</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将数组大小扩大一倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">// 将阈值扩大一倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) </span><br><span class="line">        <span class="comment">// 使用 new HashMap(int initialCapacity) 初始化后，首次插入值时</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 首次插入值，数组初始化大小</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 创建新数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    <span class="comment">// 如果是初始化数组，到这里就结束了，返回 newTab 即可</span></span><br><span class="line">    table = newTab; </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 开始遍历原数组，进行数据迁移。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 如果该数组位置上只有一个元素，将该元素迁移到新数组</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">// 如果是红黑树，根据红黑树规则将元素迁移到对应树节点</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; </span><br><span class="line">                    <span class="comment">// 如果是链表，要将此链表一拆为二，放到新的数组中，并且保持先后顺序</span></span><br><span class="line">                    <span class="comment">// loHead、loTail 对应一条链表，hiHead、hiTail 对应另一条链表</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">// 第一条链表</span></span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        <span class="comment">// 第二条链表的新的位置是 j + oldCap</span></span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JDK1-8取值（get）分析"><a href="#JDK1-8取值（get）分析" class="headerlink" title="JDK1.8取值（get）分析"></a>JDK1.8取值（get）分析</h3><p>取值逻辑如下：</p><p>1）计算 key 的 hash 值，根据 hash 值计算对应数组下标: hash &amp; (length-1)</p><p>2）判断数组该位置处的key是否相等，如果不等，走第（3）步，否则结束</p><p>3）判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第（4）步</p><p>4）遍历链表，直到找到相等(&#x3D;&#x3D;或equals)的 key</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">       Node&lt;K,V&gt; e;</span><br><span class="line">       <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">       <span class="comment">//计算元素存储位置下标</span></span><br><span class="line">       <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">           (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="comment">//如果key相等，返回该node节点</span></span><br><span class="line">           <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">               ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">               <span class="keyword">return</span> first;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//如果节点node是红黑树，按照红黑树查找法查找</span></span><br><span class="line">               <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                   <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">               <span class="comment">//如果是链表，遍历链表，直到找到key相等的节点</span></span><br><span class="line">               <span class="keyword">do</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                       ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                       <span class="keyword">return</span> e;</span><br><span class="line">               &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学生成绩管理系统</title>
      <link href="/2020/04/11/java%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/04/11/java%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>学完Java基础写一个很基础的管理系统，所有的东西都很基础，为了防止以后想看看，所以还是记录一下，免得又找不到！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ss;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2020.4.11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Student[] s=<span class="keyword">new</span> <span class="title class_">Student</span>[<span class="number">100</span>]; <span class="comment">//录入学生上限</span></span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">private</span> String classAge;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> chinese;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>  math;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> english;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否有录入学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">judge</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        String str;</span><br><span class="line">        Scanner In=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你还没有录入任何学生信息，是否录入(Y/N):&quot;</span>);</span><br><span class="line">            str=In.next();</span><br><span class="line">            ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(ch!=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;N&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入有误，请重新输入:&quot;</span>);</span><br><span class="line">                str=In.next();</span><br><span class="line">                ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">&#x27;Y&#x27;</span>||ch==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">this</span>.add();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">&#x27;N&#x27;</span>||ch==<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">this</span>.menu();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">menu</span><span class="params">()</span> <span class="keyword">throws</span> IOException  <span class="comment">//将异常抛出，调用这个方法去处理异常,如果main方法也将异常抛出，则交给Java虚拟机来处理,下同.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        Scanner in=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;*************学生信息管理系统*************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*****        1.录入学生信息            ******&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*****        2.显示学生信息            ******&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*****        3.修改学生信息            ******&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*****        4.删除学生信息            ******&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*****        5.查看学生信息            ******&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;*****        0.退出管理系统            ******&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;******************************************&quot;</span>);</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择(0~5):&quot;</span>);</span><br><span class="line">        a=in.nextInt();</span><br><span class="line">        <span class="keyword">while</span>(a&lt;<span class="number">0</span>||a&gt;<span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;输入无效，请重新输入:&quot;</span>);</span><br><span class="line">            a=in.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span>(a)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">this</span>.add();<span class="keyword">break</span>;  <span class="comment">//添加</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">this</span>.show();<span class="keyword">break</span>;  <span class="comment">//显示</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">this</span>.modif();<span class="keyword">break</span>;  <span class="comment">//修改</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">this</span>.delete();<span class="keyword">break</span>;  <span class="comment">//删除</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">this</span>.look();<span class="keyword">break</span>;  <span class="comment">//查看</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:System.out.println(<span class="string">&quot;成功退出系统！！！&quot;</span>);System.exit(<span class="number">0</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//录入学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        String str,str1,str2;</span><br><span class="line">        <span class="type">int</span> i,num1,t=<span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> ch,ch1;</span><br><span class="line">        FileWriter fw=<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;E://student.txt&quot;</span>,<span class="literal">true</span>);   <span class="comment">//将学生信息录入指定的txt文件中</span></span><br><span class="line"></span><br><span class="line">        fw.write(<span class="string">&quot;             录入的学生信息列表\r\n\r\n学号    姓名    班级    语文成绩      数学成绩    英语成绩\r\n&quot;</span>);</span><br><span class="line">        Scanner In=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(t==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生学号:&quot;</span>);</span><br><span class="line">            num1=In.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断学号是否重复</span></span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(s[i].num==num1)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;已存在此学号，请重新输入&quot;</span>);</span><br><span class="line">                    System.out.print(<span class="string">&quot;请输入学号:&quot;</span>);</span><br><span class="line">                    num1=In.nextInt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            s[n].num=num1;</span><br><span class="line">            str2=String.valueOf(num1);</span><br><span class="line">            fw.write(str2+<span class="string">&quot;    &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生姓名:&quot;</span>);</span><br><span class="line">            s[n].name=In.next();</span><br><span class="line">            fw.write(s[n].name+<span class="string">&quot;      &quot;</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生班级:&quot;</span>);</span><br><span class="line">            s[n].classAge=In.next();</span><br><span class="line">            fw.write(s[n].classAge+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生语文成绩:&quot;</span>);</span><br><span class="line">            s[n].chinese=In.nextInt();</span><br><span class="line">            fw.write(s[n].chinese+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生数学成绩:&quot;</span>);</span><br><span class="line">            s[n].math=In.nextInt();</span><br><span class="line">            fw.write(s[n].chinese+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生英语成绩:&quot;</span>);</span><br><span class="line">            s[n].english=In.nextInt();</span><br><span class="line">            fw.write(s[n].english+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            ++n;</span><br><span class="line">            fw.close();</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">&quot;是否继续添加(Y/N)&quot;</span>);</span><br><span class="line">            str=In.next();</span><br><span class="line">            ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(ch!=<span class="string">&#x27;N&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;n&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入无效，请重新输入:&quot;</span>);</span><br><span class="line">                str=In.next();</span><br><span class="line">                ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">&#x27;N&#x27;</span>||ch==<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;是否返回系统主菜单(Y/N)&quot;</span>);</span><br><span class="line">        str1=In.next();</span><br><span class="line">        ch1=str1.charAt(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(ch1!=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;ch1!=<span class="string">&#x27;y&#x27;</span>&amp;&amp;ch1!=<span class="string">&#x27;N&#x27;</span>&amp;&amp;ch1!=<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入无效，请重新输入:&quot;</span>);</span><br><span class="line">            str1=In.next();</span><br><span class="line">            ch1=str1.charAt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ch1==<span class="string">&#x27;Y&#x27;</span>||ch1==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.menu();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ch1==<span class="string">&#x27;N&#x27;</span>||ch1==<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;你已退出系统！！！&quot;</span>);</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="built_in">this</span>.judge();</span><br><span class="line">        System.out.println(<span class="string">&quot;本次操作共录入&quot;</span>+n+<span class="string">&quot;位学生!&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;你录入的学生信息如下:&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;学号\t姓名\t班级\t语文\t数学\t英语&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(s[i].num+<span class="string">&quot;      &quot;</span>+s[i].name+<span class="string">&quot;     &quot;</span>+s[i].classAge+<span class="string">&quot;     &quot;</span>+s[i].chinese+<span class="string">&quot;      &quot;</span>+s[i].math+<span class="string">&quot;     &quot;</span>+s[i].english);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;系统返回主菜单!&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.menu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.judge();</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>,t=<span class="number">0</span>,k=<span class="number">0</span>,num1;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        String str;</span><br><span class="line">        Scanner pin=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要删除的学号:&quot;</span>);</span><br><span class="line">        num1=pin.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j].num==num1)</span><br><span class="line">            &#123;</span><br><span class="line">                k=<span class="number">1</span>;</span><br><span class="line">                t=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起！你要删除的学号不存在！&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;系统将返回主菜单！&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.menu();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你要删除的学生信息如下:&quot;</span>);<span class="comment">//打印管理员要删除的学生信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;学号\t姓名\t班级&quot;</span>);<span class="comment">//本功能暂时不备扩展性</span></span><br><span class="line">            System.out.println(s[t].num+<span class="string">&quot;      &quot;</span>+s[t].name+<span class="string">&quot;      &quot;</span>+s[t].classAge);</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">&quot;你确定要删除(Y/N):&quot;</span>);</span><br><span class="line">            str=pin.next();</span><br><span class="line">            ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(ch!=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;N&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入无效，请重新输入:&quot;</span>);</span><br><span class="line">                str=pin.next();</span><br><span class="line">                ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">&#x27;N&#x27;</span>||ch==<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                System.out.println(<span class="string">&quot;系统返回主菜单！&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.menu();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">&#x27;Y&#x27;</span>||ch==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(j=t;j&lt;n-<span class="number">1</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    s[j]=s[j+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                n--;</span><br><span class="line">                System.out.println(<span class="string">&quot;学生数据成功删除!&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;系统返回主菜单!&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.menu();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查看学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">look</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        FileReader fr=<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;E://student.txt&quot;</span>);  <span class="comment">//查看txt中的学生信息</span></span><br><span class="line">        <span class="type">int</span> a;</span><br><span class="line">        <span class="keyword">while</span>((a=fr.read())!=-<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print((<span class="type">char</span>)a);</span><br><span class="line">        &#125;</span><br><span class="line">        fr.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统返回主菜单！&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="built_in">this</span>.menu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改学生信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modif</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.judge();</span><br><span class="line">        <span class="type">int</span> j=<span class="number">0</span>,t=<span class="number">0</span>,k=<span class="number">0</span>,num2,num3,moi,c=<span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> ch;</span><br><span class="line">        String str,str1,str2;</span><br><span class="line">        Scanner pin=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要修改的学号:&quot;</span>);</span><br><span class="line">        num2=pin.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[j].num==num2)</span><br><span class="line">            &#123;</span><br><span class="line">                k=<span class="number">1</span>;</span><br><span class="line">                t=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对不起！你要修改的学号不存在！&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;系统将返回主菜单！&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.menu();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//打印将要要删除的学生信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;你要修改的学生信息如下:&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;学号\t姓名\t班级&quot;</span>);</span><br><span class="line">            System.out.println(s[t].num+<span class="string">&quot;      &quot;</span>+s[t].name+<span class="string">&quot;      &quot;</span>+s[t].classAge);</span><br><span class="line">            System.out.println(<span class="string">&quot;语文\t数学\t英语&quot;</span>);</span><br><span class="line">            System.out.println(s[t].chinese+<span class="string">&quot;      &quot;</span>+s[t].math+<span class="string">&quot;      &quot;</span>+s[t].english);</span><br><span class="line">            System.out.println();</span><br><span class="line">            System.out.println(<span class="string">&quot;你确定要修改(Y/N):&quot;</span>);</span><br><span class="line">            str=pin.next();</span><br><span class="line">            ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(ch!=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;N&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;输入无效，请重新输入:&quot;</span>);</span><br><span class="line">                str=pin.next();</span><br><span class="line">                ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ch==<span class="string">&#x27;N&#x27;</span>||ch==<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                System.out.println(<span class="string">&quot;系统返回主菜单！&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.menu();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(c==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ch==<span class="string">&#x27;Y&#x27;</span>||ch==<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;****************************************&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;*****         1.修改学号           *****&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;*****         2.修改班级           *****&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;*****         3.修改姓名           *****&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;****************************************&quot;</span>);</span><br><span class="line">                    System.out.println(<span class="string">&quot;请选择:&quot;</span>);</span><br><span class="line">                    moi=pin.nextInt();</span><br><span class="line">                    <span class="keyword">switch</span>(moi)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:System.out.print(<span class="string">&quot;请输入新的学号:&quot;</span>);num3=pin.nextInt();s[t].num=num3;<span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:System.out.print(<span class="string">&quot;请输入新的班级:&quot;</span>);str1=pin.next();s[t].classAge=str1;<span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:System.out.print(<span class="string">&quot;请输入新的姓名:&quot;</span>);str2=pin.next();s[t].name=str2;<span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">&quot;数据已成功修改！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(<span class="string">&quot;是否继续修改(Y/N)&quot;</span>);</span><br><span class="line">                str=pin.next();</span><br><span class="line">                ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">                System.out.println();</span><br><span class="line">                <span class="keyword">while</span>(ch!=<span class="string">&#x27;Y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;y&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;N&#x27;</span>&amp;&amp;ch!=<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.print(<span class="string">&quot;输入无效，请重新输入:&quot;</span>);</span><br><span class="line">                    str=pin.next();</span><br><span class="line">                    ch=str.charAt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(ch==<span class="string">&#x27;N&#x27;</span>||ch==<span class="string">&#x27;n&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统返回主菜单！&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.menu();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">    &#123;</span><br><span class="line">        Student stu=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s[i]=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        stu.menu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2020/04/07/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2020/04/07/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><strong>过程简单描述：</strong><br>首先，找到数组中最小的那个元素，其次，将它和数组的第一个元素交换位置(如果第一个元素就是最小元素那么它就和自己交换)。其次，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置。如此往复，直到将整个数组排序。这种方法我们称之为<strong>选择排序</strong>。</p><p>为方便理解我还准备了动图：<br><img src="https://s1.ax1x.com/2020/04/07/GcmRoV.gif"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] selectSort(<span class="type">int</span>[] a) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[min] &gt; a[j]) min = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> a[i];</span><br><span class="line">            a[i] = a[min];</span><br><span class="line">          a[min] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="keyword">return</span> a;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>咋们来测试一下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectionSort</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">10</span>&#125;;</span><br><span class="line">        <span class="type">int</span> min;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;arr.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            min = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>; j&lt;arr.length; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[min]&gt;arr[j])&#123;</span><br><span class="line">                    min=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//交换</span></span><br><span class="line">            <span class="keyword">if</span>(min!=i)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[min];</span><br><span class="line">                arr[min] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>; k&lt;arr.length; k++)&#123;</span><br><span class="line">            System.out.print(arr[k]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 排序算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十七）：LinkedList 源码分析</title>
      <link href="/2020/04/06/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9ALinkedList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/06/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9ALinkedList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="LinkedList-简述"><a href="#LinkedList-简述" class="headerlink" title="LinkedList 简述"></a>LinkedList 简述</h2><p>🌂Java LinkedList是<strong>List</strong>和<strong>Deque</strong>接口的<strong>实现</strong>。</p><p>🌂在内部，LinkedList 是采用<strong>双向链表</strong>实现的，它包含一个很重要的内部类 Node。Node是双向链表节点所对应的数据结构，它包括的属性有：当前节点所包含的值，上一个节点，下一个节点。</p><p>🌂它支持<strong>重复</strong>元素，并且可以<strong>添加任意数量的null</strong>元素。</p><p>🌂它以插入<strong>顺序存储</strong>或<strong>维护</strong>它的元素。</p><p>🌂它<strong>不是线程安全</strong>的，我们可以使用Collections.synchronizedList(new LinkedList(…));方法创建一个同步的链表。</p><p>🌂在Java应用中，LinkedList 可以用作List，LIFO(<strong>后进先出</strong>)的<strong>栈</strong>或FIFO(<strong>先进先出</strong>)的<strong>队列</strong>。</p><p>🌂它没有实现RandomAccess接口。 所以我们只能<strong>按顺序访问元素</strong>。 它不支持随机访问元素。</p><p>🌂当我们尝试从 LinkedList 访问元素时，根据元素可用的位置搜索该元素从LinkedList的<strong>开头或结尾开始</strong>。</p><p>🌂我们可以使用<strong>ListIterator</strong>来<strong>迭代</strong>LinkedList元素。</p><p>🌂从LinkedList的实现方式中可以发现，它<strong>不存在</strong>LinkedList<strong>容量不足</strong>的问题。</p><p>🌂LinkedList 的<strong>克隆</strong>函数（clone()），是将全部元素克隆到一个新的LinkedList对象中。</p><p>🌂LinkedList 实现java.io.Serializable。当写入到输出流时，先<strong>写入</strong>“<strong>容量</strong>”，再依次写入“<strong>每一个节点保护的值</strong>”；当读出输入流时，先<strong>读取“容量”</strong>，再<strong>依次读取“每一个元素”</strong>。</p><p>🌂由于LinkedList实现了Deque，而Deque接口定义了在<strong>双端队列两端</strong>访问元素的方法。提供插入、移除和检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（null 或 false，具体取决于操作）</p><p>🌂从Java 8开始，我们可以将LinkedList <strong>转换</strong>为 Stream，反之亦然。</p><p>🌂Java 9 添加了几个工厂方法来<strong>创建</strong>一个Immutable LinkedList。</p><h2 id="LinkedList-类图"><a href="#LinkedList-类图" class="headerlink" title="LinkedList 类图"></a>LinkedList 类图</h2><p>🌂众所周知，Java LinkedList是List实现类之一。<br>java.util.LinkedList <strong>继承了</strong> AbstractSequentialList 并<strong>实现了</strong>List , Deque , Cloneable 以及Serializable 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractSequentialList</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/06/GsOl6A.png"></p><h3 id="LinkedList-内部结构"><a href="#LinkedList-内部结构" class="headerlink" title="LinkedList 内部结构"></a>LinkedList 内部结构</h3><p>LinkedList内部结构是一个双向链表</p><p><img src="https://s1.ax1x.com/2020/04/06/GsOQld.png"></p><p>每一个节点都是一个Node 对象，由<strong>三个</strong>元素组成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="comment">// E类型的值item  </span></span><br><span class="line">        E item;</span><br><span class="line">        <span class="comment">// 节点的后继节点</span></span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line">        <span class="comment">// 节点的前驱节点</span></span><br><span class="line">        Node&lt;E&gt; prev;</span><br><span class="line">        <span class="comment">//使用构造器初始化一个节点，参数为前驱节点，当前节点值，后继节点 </span></span><br><span class="line">        Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.item = element;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">            <span class="built_in">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList-成员变量LinkedList-成员变量"><a href="#LinkedList-成员变量LinkedList-成员变量" class="headerlink" title="LinkedList 成员变量LinkedList 成员变量"></a>LinkedList 成员变量LinkedList 成员变量</h2><h3 id="size-链表的节点数量size-链表的节点数量"><a href="#size-链表的节点数量size-链表的节点数量" class="headerlink" title="size 链表的节点数量size 链表的节点数量"></a>size 链表的节点数量size 链表的节点数量</h3><p>初始化链表的长度为<strong>0</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="first-指向第一个节点的指针first-指向第一个节点的指针"><a href="#first-指向第一个节点的指针first-指向第一个节点的指针" class="headerlink" title="first 指向第一个节点的指针first 指向第一个节点的指针"></a>first 指向第一个节点的指针first 指向第一个节点的指针</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指向第一个节点的指针</span></span><br><span class="line"><span class="comment"> * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment"> *            (first.prev == null &amp;&amp; first.item != null)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br></pre></td></tr></table></figure><h3 id="last-指向最后一个节点的指针last-指向最后一个节点的指针"><a href="#last-指向最后一个节点的指针last-指向最后一个节点的指针" class="headerlink" title="last 指向最后一个节点的指针last 指向最后一个节点的指针"></a>last 指向最后一个节点的指针last 指向最后一个节点的指针</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指向最后一个节点的指针。</span></span><br><span class="line"><span class="comment">    * Invariant: (first == null &amp;&amp; last == null) ||</span></span><br><span class="line"><span class="comment">    *            (last.next == null &amp;&amp; last.item != null)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><h2 id="LinkedList-构造函数LinkedList-构造函数"><a href="#LinkedList-构造函数LinkedList-构造函数" class="headerlink" title="LinkedList 构造函数LinkedList 构造函数"></a>LinkedList 构造函数LinkedList 构造函数</h2><h3 id="LinkedList-LinkedList"><a href="#LinkedList-LinkedList" class="headerlink" title="LinkedList()LinkedList()"></a>LinkedList()LinkedList()</h3><p>构造一个空列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList-Collection-c"><a href="#LinkedList-Collection-c" class="headerlink" title="LinkedList(Collection&lt;? extends E&gt; c)"></a>LinkedList(Collection&lt;? extends E&gt; c)</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按照集合的迭代器返回的顺序构造一个包含指定集合元素的列表。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  c 要将其元素放入此列表的集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException 如果指定集合为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">         <span class="comment">//使用addAll方法，实际上就是遍历c并且采用头插法进行双向链表插入值。  </span></span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="LinkedList-方法LinkedList-方法"><a href="#LinkedList-方法LinkedList-方法" class="headerlink" title="LinkedList 方法LinkedList 方法"></a>LinkedList 方法LinkedList 方法</h2><p>由于LinkedList实现了<strong>Deque</strong>，而Deque接口定义了<strong>在双端队列</strong>两端访问元素的方法。提供插入、移除和检查元素的方法。每种方法都存在两种形式：一种形式在操作失败时抛出异常，另一种形式返回一个特殊值（null 或 false，具体取决于操作）<br><img src="https://s1.ax1x.com/2020/04/06/GsOMSH.png"></p><p><strong>LinkedList 可以作为 FIFO(先进先出)的队列，作为FIFO的队列时，下面的方法是等价的</strong></p><table><thead><tr><th>队列方法</th><th align="right">等价方法</th></tr></thead><tbody><tr><td>add(e)</td><td align="right">addLast(e)</td></tr><tr><td>offer(e)</td><td align="right">offerLast(e)</td></tr><tr><td>remove()</td><td align="right">removeFirst()</td></tr><tr><td>poll()</td><td align="right">pollFirst()</td></tr><tr><td>element()</td><td align="right">getFirst()</td></tr><tr><td>peek()</td><td align="right">peekFirst()</td></tr></tbody></table><p><strong>LinkedList 可以作为 LIFO(后进先出)的栈，作为LIFO的栈时，下面的方法是等价的</strong></p><table><thead><tr><th>栈方法</th><th align="right">等价方法</th></tr></thead><tbody><tr><td>push(e)</td><td align="right">addFirst(e)</td></tr><tr><td>pop()</td><td align="right">removeFirst()</td></tr><tr><td>peek()</td><td align="right">peekFirst()</td></tr></tbody></table><h3 id="LinkedList-获取元素"><a href="#LinkedList-获取元素" class="headerlink" title="LinkedList 获取元素"></a>LinkedList 获取元素</h3><h4 id="public-E-get-int-index"><a href="#public-E-get-int-index" class="headerlink" title="public E get(int index)"></a>public E get(int index)</h4><p>获取指定索引处节点的元素，首先对指定索引进行<strong>越界检查</strong>，如果未越界返回相应位置node节点的元素；否则，抛出 IndexOutOfBoundsException 异常<br>    <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此列表中指定位置的元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 要返回的元素的索引值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表中指定位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//索引越界检查</span></span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">return</span> node(index).item;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断参数是否是现有元素的索引。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isElementIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个IndexOutOfBoundsException详细消息。</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">outOfBoundsMsg</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Index: &quot;</span>+index+<span class="string">&quot;, Size: &quot;</span>+size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回指定元素索引处的（非null）节点。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node&lt;E&gt; <span class="title function_">node</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.prev;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-getFirst-public-E-getFirst"><a href="#public-E-getFirst-public-E-getFirst" class="headerlink" title="public E getFirst()public E getFirst()"></a>public E getFirst()public E getFirst()</h4><p>返回此列表中的第一个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此列表中的第一个元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 此列表中的第一个元素。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 如果列表为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">return</span> f.item;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="public-E-getLast-public-E-getLast"><a href="#public-E-getLast-public-E-getLast" class="headerlink" title="public E getLast()public E getLast()"></a>public E getLast()public E getLast()</h4><p>返回此列表中最后一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回此列表中最后一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 此列表中最后一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 如果列表为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">return</span> l.item;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="public-int-indexOf-Object-o-public-int-indexOf-Object-o"><a href="#public-int-indexOf-Object-o-public-int-indexOf-Object-o" class="headerlink" title="public int indexOf(Object o)public int indexOf(Object o)"></a>public int indexOf(Object o)public int indexOf(Object o)</h4><p>返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-1。</p><p>如果需要检索的元素是null，对元素链表进行遍历，返回x的元素为空的位置<br>如果需要检索的元素不是null，对元素的链表遍历，直到找到相同的元素，返回元素下标<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//如果检索的元素为null</span></span><br><span class="line">       <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="literal">null</span>)</span><br><span class="line">                   <span class="keyword">return</span> index;</span><br><span class="line">               index++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//如果检索的元素不为null</span></span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                   <span class="keyword">return</span> index;</span><br><span class="line">               index++;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-int-lastIndexOf-Object-o-public-int-lastIndexOf-Object-o"><a href="#public-int-lastIndexOf-Object-o-public-int-lastIndexOf-Object-o" class="headerlink" title="public int lastIndexOf(Object o)public int lastIndexOf(Object o)"></a>public int lastIndexOf(Object o)public int lastIndexOf(Object o)</h4><p>返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-1。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> size;</span><br><span class="line">      <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="literal">null</span>; x = x.prev) &#123;</span><br><span class="line">              index--;</span><br><span class="line">              <span class="keyword">if</span> (x.item == <span class="literal">null</span>)</span><br><span class="line">                  <span class="keyword">return</span> index;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="literal">null</span>; x = x.prev) &#123;</span><br><span class="line">              index--;</span><br><span class="line">              <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                  <span class="keyword">return</span> index;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-peek"><a href="#public-E-peek" class="headerlink" title="public E peek()"></a>public E peek()</h4><p>检索并返回此列表的第一个元素，但不删除该元素。如果列表为空，则返回null<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 检索但不删除此列表的头部（第一个元素）。</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">      <span class="keyword">return</span> (f == <span class="literal">null</span>) ? <span class="literal">null</span> : f.item;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-peekFirst-同-peek-public-E-peekFirst-同-peek"><a href="#public-E-peekFirst-同-peek-public-E-peekFirst-同-peek" class="headerlink" title="public E peekFirst() 同 peek()public E peekFirst() 同 peek()"></a>public E peekFirst() 同 peek()public E peekFirst() 同 peek()</h4><h4 id="public-E-peekLast-public-E-peekLast"><a href="#public-E-peekLast-public-E-peekLast" class="headerlink" title="public E peekLast()public E peekLast()"></a>public E peekLast()public E peekLast()</h4><p>检索但不删除此列表的最后一个元素，如果此列表为空，则返回null。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">peekLast</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">      <span class="keyword">return</span> (l == <span class="literal">null</span>) ? <span class="literal">null</span> : l.item;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-element-public-E-element"><a href="#public-E-element-public-E-element" class="headerlink" title="public E element()public E element()"></a>public E element()public E element()</h4><p>与peek()相同的地方都是访问链表的第一个元素，不同是element元素在链表为null的时候会报空指针异常<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">element</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> getFirst();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="LinkedList-增加元素LinkedList-增加元素"><a href="#LinkedList-增加元素LinkedList-增加元素" class="headerlink" title="LinkedList 增加元素LinkedList 增加元素"></a>LinkedList 增加元素LinkedList 增加元素</h3><h4 id="public-boolean-add-E-e-等价-addLast"><a href="#public-boolean-add-E-e-等价-addLast" class="headerlink" title="public boolean add(E e) 等价 addLast"></a>public boolean add(E e) 等价 addLast</h4><p>添加指定元素至list末尾，等价于 addLast<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加指定元素至list末尾</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 该方法等价与addLast</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e 添加到列表的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接e作为最后一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="comment">//创建临时节点l初始化为尾节点</span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="comment">//初始化新节点，前驱节点为l，后继暂为null </span></span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//由于是在链表尾部插入节点，那么新节点就作为尾节点</span></span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         *  l节点作为newNode节点的前驱节点。  </span></span><br><span class="line"><span class="comment">         *  如果l为空，那么newNode前驱节点为空。  </span></span><br><span class="line"><span class="comment">         *  在双向链表中，前驱节点为空，那么该节点为头节点。  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 如果不是的话，就让该节点的next 指向新的节点</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        <span class="comment">//插入节点后，链表的长度加1 </span></span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-void-add-int-index-E-element"><a href="#public-void-add-int-index-E-element" class="headerlink" title="public void add(int index, E element)"></a>public void add(int index, E element)</h4><p>将元素插入指定位置，首先通过index获取当前对应的定位节点。如果下标对应的定位节点就是尾节点，那么直接使用linkLast方法在链表尾部插入节点。如果对应的定位节点不是尾节点，就插入到index节点的前面。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在链表的指定位置插入指定元素</span></span><br><span class="line"><span class="comment">     * 将当前位于该位置的元素（如果有）和任何后续元素向右移动。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 指定元素插入位置的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 待插入的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="comment">// 先检查索引是否在链表的范围内。</span></span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="comment">// 如果索引等于链表长度，那么直接采用尾插法的linkLast方法。</span></span><br><span class="line">        <span class="keyword">if</span> (index == size)</span><br><span class="line">            linkLast(element);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//否则就在指定位置的非空节点之前插入元素</span></span><br><span class="line">            linkBefore(element, node(index));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">// 下标越界检查</span></span><br><span class="line">        <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断参数是否是有效位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isPositionIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链接e作为最后一个元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);</span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        size++;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">   * 在节点succ作为通过下标索引在链表中查询出来的对应的节点。  </span></span><br><span class="line"><span class="comment">   * e值包装的节点插入到succ节点之前。  </span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> &#123;  </span><br><span class="line">    <span class="comment">//succ节点的前驱为pred  </span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;  </span><br><span class="line">    <span class="comment">//初始化新节点前驱为pred，后继为succ，意思就是想在pred和succ节点之间插入newNode节点  </span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, succ);  </span><br><span class="line">    <span class="comment">//到这步，newNode已经确立了，后继节点为succ。succ节点的前驱为newNode。  </span></span><br><span class="line">    succ.prev = newNode;  </span><br><span class="line">    <span class="comment">//如果pred为空，那么newNode的前驱节点为空，可以确定newNode为头节点。</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="literal">null</span>)  </span><br><span class="line">        first = newNode;  </span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">/* 如果pred不为空，则确定了pred节点后继为newNode，之前已经确</span></span><br><span class="line"><span class="comment">         * 定newNode的前驱为pred，这样pred和newNode就确立关系了。</span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        pred.next = newNode;  </span><br><span class="line">    size++;<span class="comment">//新增节点，长度更新为原来长度加1  </span></span><br><span class="line">    modCount++;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></p><h4 id="public-void-addFirst-E-e"><a href="#public-void-addFirst-E-e" class="headerlink" title="public void addFirst(E e)"></a>public void addFirst(E e)</h4><p>在此列表的开头插入指定的元素。要添加 元素至链表的头部，需要先找到first节点，如果first节点为null，也就说明没有头节点，如果不为null，则头节点的prev节点是新插入的节点。</p><p>如果双向链表为空，那么插入节点作为头节点，如果双向链表不为空，那么插入节点作为头结点的前驱节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在此列表的开头插入指定的元素。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> e 准备添加的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       linkFirst(e);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将e作为头结点，采用双向链表的头插法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">linkFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="literal">null</span>, e, f);</span><br><span class="line">       <span class="comment">//在头结点前面插入元素，该元素就作为头结点了</span></span><br><span class="line">       first = newNode;</span><br><span class="line">       <span class="comment">//如果原头结点为空，那么新节点即是头结点也是尾节点</span></span><br><span class="line">       <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">           last = newNode;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">       <span class="comment">//如果原头结点不为空，那么新节点插入到原头结点前面</span></span><br><span class="line">           f.prev = newNode;</span><br><span class="line">       size++;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="public-void-addLast-E-e-等价-add"><a href="#public-void-addLast-E-e-等价-add" class="headerlink" title="public void addLast(E e) 等价 add"></a>public void addLast(E e) 等价 add</h4><p>将指定的元素追加到此列表的末尾。如果双向链表为空，那么直接新节点作为头节点。如果双向链表不为空，那么在尾节点后面插入新节点。<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将指定的元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 此方法等价与add</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> 准备添加的元素</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       linkLast(e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//采用双向链表尾插法的方式插入元素</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">linkLast</span><span class="params">(E e)</span> &#123;  </span><br><span class="line">       <span class="comment">//创建临时节点l初始化为尾节点（那么其后继节点为null，前驱节点不为空）。  </span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;  </span><br><span class="line">       <span class="comment">//初始化新节点，前驱节点为l，后继暂为null  </span></span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(l, e, <span class="literal">null</span>);  </span><br><span class="line">       <span class="comment">//由于是在链表尾部插入节点，那么新节点就作为尾节点。  </span></span><br><span class="line">       last = newNode;  </span><br><span class="line">       <span class="comment">/**  </span></span><br><span class="line"><span class="comment">        *  l节点作为newNode节点的前驱节点。  </span></span><br><span class="line"><span class="comment">        *  如果l为空，那么newNode前驱节点为空。  </span></span><br><span class="line"><span class="comment">        *  在双向链表中，前驱节点为空，那么该节点为头节点。  </span></span><br><span class="line"><span class="comment">        */</span>  </span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)  </span><br><span class="line">               first = newNode;  </span><br><span class="line">        <span class="keyword">else</span>  </span><br><span class="line">               l.next = newNode;  </span><br><span class="line">        size++;<span class="comment">//再插入节点后，链表的长度加1  </span></span><br><span class="line">        modCount++;  </span><br><span class="line">   &#125; </span><br></pre></td></tr></table></figure></p><h4 id="public-boolean-addAll-Collection-c"><a href="#public-boolean-addAll-Collection-c" class="headerlink" title="public boolean addAll(Collection&lt;? extends E&gt; c)"></a>public boolean addAll(Collection&lt;? extends E&gt; c)</h4><p>将指定集合中的所有元素按指定集合的迭代器返回的顺序附加到此列表的末尾。 如果在操作正在进行时修改了指定的集合，则此操作的行为是不确定的。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-boolean-addAll-int-index-Collection-c"><a href="#public-boolean-addAll-int-index-Collection-c" class="headerlink" title="public boolean addAll(int index, Collection&lt;? extends E&gt; c)"></a>public boolean addAll(int index, Collection&lt;? extends E&gt; c)</h4><p>将指定集合中的所有元素按指定集合的迭代器返回的顺序附加到此列表的<strong>末尾</strong>。 如果在操作正在进行时修改了指定的集合，则此操作的行为是不确定的。</p><p>插入一个Collection 的集合，没有指定插入元素的位置，默认是向链表的<strong>尾部进行链接</strong>。</p><p>如果指定了插入位置，首先会进行数组<strong>越界检查</strong>，然后会把集合转换为数组，在判断数组的大小是否为0，为0返回，不为0，继续下面操作</p><p>然后遍历数组，首先生成对应的节点，最后对<strong>节点进行链接</strong><br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> index 插入列表指定位置的索引</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> c 包含要添加到此列表的元素的集合</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this list changed as a result of the call</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IndexOutOfBoundsException 下标越界异常</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> NullPointerException 如果指定的集合为null，则抛出空指针异常</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">      <span class="comment">//判断下标元素是否在链表的长度范围之内 </span></span><br><span class="line">      checkPositionIndex(index);</span><br><span class="line">      <span class="comment">//将集合c转换成Object数组  </span></span><br><span class="line">      Object[] a = c.toArray();</span><br><span class="line">      <span class="comment">//插入元素的数量</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">      <span class="comment">//如果Object数组长度为0，那么就返回添加失败  </span></span><br><span class="line">      <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">//pred节点为succ节点的前驱  </span></span><br><span class="line">      Node&lt;E&gt; pred, succ;</span><br><span class="line">      <span class="comment">//如果下标等于链表的长度时，pred为尾节点，succ指向为空 </span></span><br><span class="line">      <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">          succ = <span class="literal">null</span>;</span><br><span class="line">          pred = last;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">/*  如果下标不等于链表长度，node方法就是用来通过下标索引获</span></span><br><span class="line"><span class="comment">          *  取链表中的对应的节点对象。  </span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          succ = node(index);</span><br><span class="line">          pred = succ.prev;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//遍历数组，创建node节点</span></span><br><span class="line">      <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">          <span class="comment">//将遍历的值包装成节点Node，初始化前驱节点为pred，后继节点为null</span></span><br><span class="line">          <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) o;</span><br><span class="line">          Node&lt;E&gt; newNode = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(pred, e, <span class="literal">null</span>);</span><br><span class="line">          <span class="comment">//如果前驱节点为空，那么肯定是头节点 </span></span><br><span class="line">          <span class="keyword">if</span> (pred == <span class="literal">null</span>)</span><br><span class="line">              first = newNode;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">          <span class="comment">//否则不是头节点，那么前驱的后继节点为当前节点，其实就是类似于链表的插入节点操作。  </span></span><br><span class="line">              pred.next = newNode;</span><br><span class="line">          pred = newNode;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 因为pred节点是succ节点的前驱节点，反之succ是pred的后继节点.</span></span><br><span class="line"><span class="comment">        *  如果succ为空，说明pred为尾节点。  </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">      <span class="keyword">if</span> (succ == <span class="literal">null</span>) &#123;</span><br><span class="line">          last = pred;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">/* </span></span><br><span class="line"><span class="comment">          如果succ不是尾节点，那么只要保证pred节点是succ节点的前驱 </span></span><br><span class="line"><span class="comment">          * 节点、succ是pred的后继节点这种双向链表的关系 </span></span><br><span class="line"><span class="comment">          */</span> </span><br><span class="line">          pred.next = succ;</span><br><span class="line">          succ.prev = pred;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      size += numNew;</span><br><span class="line">      modCount++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-boolean-offer-E-e-等价于-add"><a href="#public-boolean-offer-E-e-等价于-add" class="headerlink" title="public boolean offer(E e) 等价于 add"></a>public boolean offer(E e) 等价于 add</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> add(e);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="public-boolean-offerFirst-E-e-等价于-addFirst-E-e"><a href="#public-boolean-offerFirst-E-e-等价于-addFirst-E-e" class="headerlink" title="public boolean offerFirst(E e) 等价于 addFirst(E e)"></a>public boolean offerFirst(E e) 等价于 addFirst(E e)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerFirst</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="public-boolean-offerLast-E-e-等价于-addLast-E-e"><a href="#public-boolean-offerLast-E-e-等价于-addLast-E-e" class="headerlink" title="public boolean offerLast(E e) 等价于 addLast(E e)"></a>public boolean offerLast(E e) 等价于 addLast(E e)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerLast</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        addLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="public-void-push-E-e-等价于-addFirst-E-e"><a href="#public-void-push-E-e-等价于-addFirst-E-e" class="headerlink" title="public void push(E e) 等价于 addFirst(E e)"></a>public void push(E e) 等价于 addFirst(E e)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span> &#123;</span><br><span class="line">       addFirst(e);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList-删除元素"><a href="#LinkedList-删除元素" class="headerlink" title="LinkedList 删除元素"></a>LinkedList 删除元素</h3><h4 id="public-E-remove"><a href="#public-E-remove" class="headerlink" title="public E remove()"></a>public E remove()</h4><p>检索并删除此列表的第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回列表的第一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 如果当前列表为空</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="public-E-remove-int-index"><a href="#public-E-remove-int-index" class="headerlink" title="public E remove(int index)"></a>public E remove(int index)</h4><p>删除此列表中指定位置的元素。 将任何后续元素向左移位。返回从列表中删除的元素。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> index 被删除元素的索引位置</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回从列表中删除的指定索引位置的元素</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> IndexOutOfBoundsException </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">      checkElementIndex(index);</span><br><span class="line">      <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="public-boolean-remove-Object-o"><a href="#public-boolean-remove-Object-o" class="headerlink" title="public boolean remove(Object o)"></a>public boolean remove(Object o)</h4><p>从此列表中删除指定元素的第一个匹配项（如果存在）。 如果此列表不包含该元素，则不会更改。</p><pre><code>/** * * @param o 要从此列表中删除的元素（如果存在） * @return &#123;@code true&#125;  如果此列表包含指定的元素，则返回true */public boolean remove(Object o) &#123;    if (o == null) &#123;        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;            if (x.item == null) &#123;                unlink(x);                return true;            &#125;        &#125;    &#125; else &#123;        for (Node&lt;E&gt; x = first; x != null; x = x.next) &#123;            if (o.equals(x.item)) &#123;                unlink(x);                return true;            &#125;        &#125;    &#125;    return false;&#125;</code></pre><h4 id="public-E-removeFirst"><a href="#public-E-removeFirst" class="headerlink" title="public E removeFirst()"></a>public E removeFirst()</h4><p>删除并返回此列表的第一个元素<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除并返回此列表的第一个元素</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 此列表第一个元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NoSuchElementException 如果列表为空</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E <span class="title function_">removeFirst</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">       <span class="keyword">if</span> (f == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">       <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-removeLast"><a href="#public-E-removeLast" class="headerlink" title="public E removeLast()"></a>public E removeLast()</h4><p>删除并返回此列表的最后一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除并返回此列表的最后一个元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 此列表最后一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 如果列表为空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">removeLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="public-boolean-removeFirstOccurrence-Object-o"><a href="#public-boolean-removeFirstOccurrence-Object-o" class="headerlink" title="public boolean removeFirstOccurrence(Object o)"></a>public boolean removeFirstOccurrence(Object o)</h4><p>删除此列表中第一次出现的指定元素（从头到尾遍历列表时）。 如果列表不包含该元素，则不会更改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o 从列表中删除的指定元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 如果列表包含指定的元素返回true</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeFirstOccurrence</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> remove(o);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="public-boolean-removeLastOccurrence-Object-o"><a href="#public-boolean-removeLastOccurrence-Object-o" class="headerlink" title="public boolean removeLastOccurrence(Object o)"></a>public boolean removeLastOccurrence(Object o)</h4><p>删除此列表中最后一次出现的指定元素（从头到尾遍历列表时）。 如果列表不包含该元素，则不会更改。<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> o 从列表中删除的指定元素</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 如果列表包含指定的元素返回true</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeLastOccurrence</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="literal">null</span>; x = x.prev) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="literal">null</span>) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = last; x != <span class="literal">null</span>; x = x.prev) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-poll"><a href="#public-E-poll" class="headerlink" title="public E poll()"></a>public E poll()</h4><p>检索并删除此列表的第一个元素，如果此列表为空，则返回null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回此列表的第一个元素，如果列表为空则返回null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">return</span> (f == <span class="literal">null</span>) ? <span class="literal">null</span> : unlinkFirst(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="public-E-pollFirst"><a href="#public-E-pollFirst" class="headerlink" title="public E pollFirst()"></a>public E pollFirst()</h4><p>检索并删除此列表的第一个元素，如果此列表为空，则返回null。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 返回此列表的第一个元素，如果列表为空则返回null</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> E <span class="title function_">pollFirst</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">      <span class="keyword">return</span> (f == <span class="literal">null</span>) ? <span class="literal">null</span> : unlinkFirst(f);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-pollLast"><a href="#public-E-pollLast" class="headerlink" title="public E pollLast()"></a>public E pollLast()</h4><p>检索并删除此列表的最后一个元素，如果此列表为空，则返回null。<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 此列表的最后一个元素，如果此列表为空，则返回null。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> E <span class="title function_">pollLast</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">       <span class="keyword">return</span> (l == <span class="literal">null</span>) ? <span class="literal">null</span> : unlinkLast(l);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-pop-等价于-removeFirst（）"><a href="#public-E-pop-等价于-removeFirst（）" class="headerlink" title="public E pop() 等价于 removeFirst（）"></a>public E pop() 等价于 removeFirst（）</h4><p>弹出此列表所代表的堆栈中的元素。 换句话说，删除并返回此列表的第一个元素。<br>此方法等同于removeFirst（）。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 此列表所代表的栈顶元素</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> NoSuchElementException 如果列表为空</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> removeFirst();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-void-clear"><a href="#public-void-clear" class="headerlink" title="public void clear()"></a>public void clear()</h4><p>从此列表中删除所有元素。 此调用返回后，列表将为空。通过遍历断开每个节点之间的链接并设置每个节点为null，以帮助GC回收。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; ) &#123;</span><br><span class="line">          Node&lt;E&gt; next = x.next;</span><br><span class="line">          x.item = <span class="literal">null</span>;</span><br><span class="line">          x.next = <span class="literal">null</span>;</span><br><span class="line">          x.prev = <span class="literal">null</span>;</span><br><span class="line">          x = next;</span><br><span class="line">      &#125;</span><br><span class="line">      first = last = <span class="literal">null</span>;</span><br><span class="line">      size = <span class="number">0</span>;</span><br><span class="line">      modCount++;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h3 id="LinkedList-其它方法"><a href="#LinkedList-其它方法" class="headerlink" title="LinkedList 其它方法"></a>LinkedList 其它方法</h3><h4 id="public-boolean-contains-Object-o"><a href="#public-boolean-contains-Object-o" class="headerlink" title="public boolean contains(Object o)"></a>public boolean contains(Object o)</h4><p>如果此列表包含指定的元素，则返回true。 当且仅当此列表包含至少一个元素e时才返回true（o &#x3D;&#x3D; null？e &#x3D;&#x3D; null：o.equals（e））。<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> o 要测试其在此列表中的存在的元素</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 如果此列表包含指定的元素，则返回true</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-int-size"><a href="#public-int-size" class="headerlink" title="public int size()"></a>public int size()</h4><p>返回此列表中的元素数量<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> size;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-E-set-int-index-E-element"><a href="#public-E-set-int-index-E-element" class="headerlink" title="public E set(int index,E element)"></a>public E set(int index,E element)</h4><p>用指定的元素替换此列表中指定位置的元素，并返回被替换的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Replaces the element at the specified position in this list with the</span></span><br><span class="line"><span class="comment">     * specified element.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 指定位置的索引值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> element 要存储在指定位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 先前在指定位置的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        Node&lt;E&gt; x = node(index);</span><br><span class="line">        <span class="type">E</span> <span class="variable">oldVal</span> <span class="operator">=</span> x.item;</span><br><span class="line">        x.item = element;</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="public-ListIterator-listIterator-int-index"><a href="#public-ListIterator-listIterator-int-index" class="headerlink" title="public ListIterator listIterator(int index)"></a>public ListIterator listIterator(int index)</h4><p>🌂从列表中的指定位置开始，返回此列表中元素的列表迭代器（按<strong>正确顺序</strong>）。 遵守List.listIterator（int）的规则。</p><p>🌂list-iterator是 fail-fast 的：如果在创建Iterator之后的任何时候对列表进行<strong>结构修改</strong>，除了通过list-iterator自己的remove或add方法之外，list-iterator将<strong>抛出</strong>ConcurrentModificationException。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> 从list-iterator返回的第一个元素的索引（通过调用next）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 从列表中的指定位置开始，返回此列表中元素的ListIterator</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> List#listIterator(int)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListItr</span>(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-Iterator-descendingIterator"><a href="#public-Iterator-descendingIterator" class="headerlink" title="public Iterator descendingIterator()"></a>public Iterator descendingIterator()</h4><p>以相反的顺序返回此双端队列中元素的迭代器。 元素将按从尾部 到 头部 的顺序返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">descendingIterator</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DescendingIterator</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Adapter to provide descending iterators via ListItr.previous</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">DescendingIterator</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ListItr</span> <span class="variable">itr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListItr</span>(size());</span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> itr.hasPrevious();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> itr.previous();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">           itr.remove();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="public-Object-clone"><a href="#public-Object-clone" class="headerlink" title="public Object clone()"></a>public Object clone()</h4><p>返回此LinkedList的浅副本。（元素本身未被克隆。）<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">       LinkedList&lt;E&gt; clone = superClone();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Put clone into &quot;virgin&quot; state</span></span><br><span class="line">       clone.first = clone.last = <span class="literal">null</span>;</span><br><span class="line">       clone.size = <span class="number">0</span>;</span><br><span class="line">       clone.modCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Initialize clone with our elements</span></span><br><span class="line">       <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">           clone.add(x.item);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> clone;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-Object-toArray"><a href="#public-Object-toArray" class="headerlink" title="public Object[] toArray()"></a>public Object[] toArray()</h4><p>以<strong>适当的顺序</strong>（从第一个元素到最后一个元素）返回包含此列表中所有元素的数组。</p><p>返回的数组将是“<strong>安全的</strong>”，因为此列表不会保留对它的引用。 （换句话说，此方法必须分配一个新数组）。 因此调用者可以自由修改返回的数组。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">     Object[] result = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line">     <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">         result[i++] = x.item;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-T-toArray-T-a"><a href="#public-T-toArray-T-a" class="headerlink" title="public T[] toArray(T[] a)"></a>public T[] toArray(T[] a)</h4><p>🌂以适当的<strong>顺序</strong>返回包含此列表中所有元素的数组（从第一个元素到最后一个元素）; 返回数组的运行时类型是指定数组的运行时类型。 如果列表适合指定的数组，则返回其中。 否则，将使用指定数组的运行时<strong>类型</strong>和此列表的<strong>大小</strong>分配新数组。</p><p>🌂如果列表<strong>适合指定的</strong>数组，并且有空余空间（即，数组的元素多于列表），则紧跟在列表末尾之后的数组中的元素将设置为null。 仅当调用者知道列表不包含任何null元素时，这在确定列表长度时很有用。</p><p>🌂与toArray（）方法一样，此方法充当基于数组的API和基于集合的API之间的<strong>桥梁</strong>。 此外，该方法允许精确控制输出阵列的运行时类型，并且在某些情况下可以用于节省分配成本。</p><p>🌂假设x是已知仅包含字符串的列表。 以下代码可用于将列表转储到<strong>新分配</strong>的String数组中：<br>String[] y &#x3D; x.toArray(new String[0]);</p><p><strong>请注意</strong>，toArray（new Object [0]）在功能上与toArray（）相同。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            a = (T[])java.lang.reflect.Array.newInstance(</span><br><span class="line">                                a.getClass().getComponentType(), size);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Object[] result = a;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="literal">null</span>; x = x.next)</span><br><span class="line">            result[i++] = x.item;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="public-Spliterator-spliterator"><a href="#public-Spliterator-spliterator" class="headerlink" title="public Spliterator spliterator()"></a>public Spliterator spliterator()</h4><p>在此列表中的元素上创建一个 late-binding 和 fail-fast 的Spliterator。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LLSpliterator</span>&lt;E&gt;(<span class="built_in">this</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十六）：ArrayList 源码分析</title>
      <link href="/2020/04/05/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9AArrayList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/05/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9AArrayList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、ArrayList-简述"><a href="#1、ArrayList-简述" class="headerlink" title="1、ArrayList 简述"></a>1、ArrayList 简述</h2><p>Java ArrayList是List接口的<strong>可调整大小的数组</strong>实现，这意味着它以默认大小开始，并在将更多数据添加到数组列表时<strong>自动扩容</strong>。 除了实现List接口之外，此类还提供了一些方法来操作内部用于存储列表的数组的大小。</p><p>ArrayList<strong>不是线程安全</strong>的，多线程环境下可以考虑用 List list &#x3D; Collections.synchronizedList(new ArrayList(…)); 函数返回一个线程安全的ArrayList类，也可以使用concurrent并发包下的CopyOnWriteArrayList类。</p><p>ArrayList 的iterator和listIterator方法返回的迭代器是快速失败的：如果在创建迭代器之后的任何时候对列表进行结构修改，除了通过迭代器自己的remove或add方法之外，<strong>迭代器将抛</strong>出ConcurrentModificationException。 因此，在并发修改的情况下，迭代器快速失败，而不是在未来的未确定时间冒任意，<strong>非确定性的风险</strong>。</p><h2 id="2、ArrayList-类图"><a href="#2、ArrayList-类图" class="headerlink" title="2、ArrayList 类图"></a>2、ArrayList 类图</h2><p><img src="https://s1.ax1x.com/2020/04/05/GDInne.png"></p><p>ArrayList <strong>继承</strong>了 AbstractList，实现了List, RandomAccess, Cloneable, java.io.Serializable这些接口。</p><p>ArrayList** 实现了** RandmoAccess 接口，即提供了随机访问功能。RandmoAccess是java中用来被List实现，为List提供快速访问功能的。在ArrayList中，我们即可以通过元素的索引快速获取元素对象；这就是快速随机访问。</p><p>ArrayList** 实现了** Cloneable接口，即覆盖了方法clone()，能被克隆。</p><p>ArrayList <strong>实现了</strong> java.io.Serializable接口，这意味着ArrayList支持序列化，能通过序列化去传输。</p><p>ArrayList与Vector<strong>不同</strong>，ArrayList 中的操作不是线程安全的。所以，建议在单线程中才使用ArrayList，而在多线程中可以选择Vector或者CopyOnWriteArrayList。</p><h2 id="3、ArrayList-构造函数"><a href="#3、ArrayList-构造函数" class="headerlink" title="3、ArrayList 构造函数"></a>3、ArrayList 构造函数</h2><p>ArrayList 提供了三个构造函数，分别如下：</p><h3 id="3-1、ArrayList"><a href="#3-1、ArrayList" class="headerlink" title="3.1、ArrayList()"></a>3.1、ArrayList()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ArrayList 默认构造函数会初始化一个容量为<span class="number">10</span>的空列表，这也就意味着ArrayList的默认大小为<span class="number">10.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个初始容量为10的空列表。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2、ArrayList-int-initialCapacity"><a href="#3-2、ArrayList-int-initialCapacity" class="headerlink" title="3.2、ArrayList(int initialCapacity)"></a>3.2、ArrayList(int initialCapacity)</h3><p>该构造函数接受一个int类型的数值来初始化 ArrayList，如果指定的初始容量大小为负数，将会抛出异常 IllegalArgumentException</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造具有指定初始容量的空列表。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  initialCapacity  列表的初始容量</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException 如果指定的初始容量为负数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">//新建一个数组</span></span><br><span class="line">           <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3、ArrayList-Collection-c"><a href="#3-3、ArrayList-Collection-c" class="headerlink" title="3.3、ArrayList(Collection&lt;? extends E&gt; c)"></a>3.3、ArrayList(Collection&lt;? extends E&gt; c)</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 按照集合的迭代器返回的顺序构造一个包含指定集合元素的列表。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> c 要将其元素放入此列表的集合</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException 如果指定集合为 null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">       elementData = c.toArray();</span><br><span class="line">       <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">           <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">               elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 替换为空数组。</span></span><br><span class="line">           <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4、ArrayList-源码解析4、ArrayList-源码解析"><a href="#4、ArrayList-源码解析4、ArrayList-源码解析" class="headerlink" title="4、ArrayList 源码解析4、ArrayList 源码解析"></a>4、ArrayList 源码解析4、ArrayList 源码解析</h2><h3 id="4-1、私有字段说明"><a href="#4-1、私有字段说明" class="headerlink" title="4.1、私有字段说明"></a>4.1、私有字段说明</h3><p>ArrayList包含了两个重要的对象：elementData 和 size。</p><p>1）elementData 是”Object[]类型的数组”，它保存了添加到ArrayList中的元素。实际上，elementData是个动态数组，我们能通过构造函数 ArrayList(int initialCapacity)来指定它的初始容量为initialCapacity；</p><p>如果通过不含参数的构造函数ArrayList()来创建ArrayList，则elementData的容量默认是10。elementData数组的大小会根据ArrayList容量的增长而动态的增长，具体的增长方式，请参考源码分析中的ensureCapacity()函数。</p><p>2） size 则是动态数组的实际大小。</p><h4 id="4-1-1、AbstractList-modCount"><a href="#4-1-1、AbstractList-modCount" class="headerlink" title="4.1.1、AbstractList&gt;modCount"></a>4.1.1、AbstractList&gt;modCount</h4><p>子类使用这个字段是可选的，若子类希望提供fail-fast(快速失败) iterators或者list iterators 可以在方法里使用该方法。</p><p>这个变量用于快速判断该实例是否有变化，若在进行迭代的时候有变更，那么就抛出一个并发修改异常(ConcurrentModificationException)。<br>fail-fast是Java集合的一种错误检测机制。当多个线程对集合进行结构上的改变的操作时，有可能会产生fail-fast机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.util.AbstractList：</span><br><span class="line"><span class="comment">//当前列表结构被修改的次数</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="type">int</span> modCount</span><br></pre></td></tr></table></figure><h4 id="4-1-2、DEFAULT-CAPACITY"><a href="#4-1-2、DEFAULT-CAPACITY" class="headerlink" title="4.1.2、DEFAULT_CAPACITY"></a>4.1.2、DEFAULT_CAPACITY</h4>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 默认初始化容量大小为10</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="4-1-3、EMPTY-ELEMENTDATA"><a href="#4-1-3、EMPTY-ELEMENTDATA" class="headerlink" title="4.1.3、EMPTY_ELEMENTDATA"></a>4.1.3、EMPTY_ELEMENTDATA</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于空实例的共享空数组实例。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-1-4、DEFAULTCAPACITY-EMPTY-ELEMENTDATA"><a href="#4-1-4、DEFAULTCAPACITY-EMPTY-ELEMENTDATA" class="headerlink" title="4.1.4、DEFAULTCAPACITY_EMPTY_ELEMENTDATA"></a>4.1.4、DEFAULTCAPACITY_EMPTY_ELEMENTDATA</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于默认大小的空实例的共享空数组实例。 我们将此与EMPTY_ELEMENTDATA区分开来，以便在添加第一个元素时知道要膨胀多少。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="4-1-5、elementData"><a href="#4-1-5、elementData" class="headerlink" title="4.1.5、elementData"></a>4.1.5、elementData</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储ArrayList元素的数组缓冲区。</span></span><br><span class="line"><span class="comment">ArrayList 的容量是此数组缓冲区的长度。 添加第一个元素时，任何带有elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA 的空 ArrayList 都将扩展为 DEFAULT_CAPACITY。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Object[] elementData; <span class="comment">// 非私有，以简化嵌套类访问</span></span><br></pre></td></tr></table></figure><h4 id="4-1-6、size"><a href="#4-1-6、size" class="headerlink" title="4.1.6、size"></a>4.1.6、size</h4> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * ArrayList的大小（它包含的元素数）。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure><h4 id="4-1-7、MAX-ARRAY-SIZE"><a href="#4-1-7、MAX-ARRAY-SIZE" class="headerlink" title="4.1.7、MAX_ARRAY_SIZE"></a>4.1.7、MAX_ARRAY_SIZE</h4>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 要分配的最大数组大小。 尝试分配更大的数组可能会导致OutOfMemoryError：请求的数组大小超过VM限制</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure><h3 id="4-2、ArrayList-方法源码解析4-2、ArrayList-方法源码解析"><a href="#4-2、ArrayList-方法源码解析4-2、ArrayList-方法源码解析" class="headerlink" title="4.2、ArrayList 方法源码解析4.2、ArrayList 方法源码解析"></a>4.2、ArrayList 方法源码解析4.2、ArrayList 方法源码解析</h3><h4 id="4-2-1、public-void-trimToSize-4-2-1、public-void-trimToSize"><a href="#4-2-1、public-void-trimToSize-4-2-1、public-void-trimToSize" class="headerlink" title="4.2.1、public void trimToSize()4.2.1、public void trimToSize()"></a>4.2.1、public void trimToSize()4.2.1、public void trimToSize()</h4><p>将此ArrayList实例的容量调整为列表的当前大小。 应用程序可以使用此操作来最小化ArrayList实例的存储。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">trimToSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//列表结构修改次数加1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//如果列表实际大小 &lt; elementData,调整ArrayList实例的容量调整为列表的当前大小（size）</span></span><br><span class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line">            elementData = (size == <span class="number">0</span>)</span><br><span class="line">              ? EMPTY_ELEMENTDATA</span><br><span class="line">              : Arrays.copyOf(elementData, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2、public-void-ensureCapacity-int-minCapacity"><a href="#4-2-2、public-void-ensureCapacity-int-minCapacity" class="headerlink" title="4.2.2、public void ensureCapacity(int minCapacity)"></a>4.2.2、public void ensureCapacity(int minCapacity)</h4><p>如有必要，增加此ArrayList实例的容量，以确保它至少可以容纳由minCapacity参数指定的元素数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加此ArrayList实例的容量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   minCapacity   所需的最小容量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minExpand</span> <span class="operator">=</span> (elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA)</span><br><span class="line">            ? <span class="number">0</span></span><br><span class="line">            <span class="comment">// 大于默认值。 它被认为是默认大小。</span></span><br><span class="line">            : DEFAULT_CAPACITY;</span><br><span class="line">        <span class="comment">//如果指定大小minCapacity 大于 minExpand，进行扩容</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">            ensureExplicitCapacity(minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">       <span class="comment">//列表结构修改次数加1</span></span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果指定大小大于当前列表数组缓冲区大小，则增加容量</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">// 原有容量，当前数组缓存大小</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">        <span class="comment">//新的容量=原有容量+（原有容量/2）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//如果新的容量 &lt; minCapacity，设置新的容量大小为minCapacity</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="comment">//如果新的容量 &gt; MAX_ARRAY_SIZE</span></span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">        <span class="comment">//如果期望容量 minCapacity &gt; MAX_ARRAY_SIZE（允许分配最大值），则设置大小为 Integer.MAX_VALUE</span></span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-3、public-int-size"><a href="#4-2-3、public-int-size" class="headerlink" title="4.2.3、public int size()"></a>4.2.3、public int size()</h4><p>返回此列表中的元素数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-4、public-boolean-isEmpty"><a href="#4-2-4、public-boolean-isEmpty" class="headerlink" title="4.2.4、public boolean isEmpty()"></a>4.2.4、public boolean isEmpty()</h4><p>如果此列表不包含任何元素，则返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-5、public-boolean-contains-Object-o"><a href="#4-2-5、public-boolean-contains-Object-o" class="headerlink" title="4.2.5、public boolean contains(Object o)"></a>4.2.5、public boolean contains(Object o)</h4><p>如果此列表包含指定的元素，则返回true。当且仅当此列表包含至少一个元素e时才返回true（o &#x3D;&#x3D; null？e &#x3D;&#x3D; null：o.equals（e））。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-6、public-int-indexOf-Object-o"><a href="#4-2-6、public-int-indexOf-Object-o" class="headerlink" title="4.2.6、public int indexOf(Object o)"></a>4.2.6、public int indexOf(Object o)</h4><p>返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-1。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-2-7、public-int-lastIndexOf-Object-o"><a href="#4-2-7、public-int-lastIndexOf-Object-o" class="headerlink" title="4.2.7、public int lastIndexOf(Object o)"></a>4.2.7、public int lastIndexOf(Object o)</h4><p>返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-1。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="literal">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-2-8、public-Object-clone-4-2-8、public-Object-clone"><a href="#4-2-8、public-Object-clone-4-2-8、public-Object-clone" class="headerlink" title="4.2.8、public Object clone()4.2.8、public Object clone()"></a>4.2.8、public Object clone()4.2.8、public Object clone()</h4><p>返回此ArrayList实例的副本。（元素本身不会被复制。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList&lt;?&gt; v = (ArrayList&lt;?&gt;) <span class="built_in">super</span>.clone();</span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);</span><br><span class="line">            v.modCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="comment">// this shouldn&#x27;t happen, since we are Cloneable</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-9、public-Object-toArray-4-2-9、public-Object-toArray"><a href="#4-2-9、public-Object-toArray-4-2-9、public-Object-toArray" class="headerlink" title="4.2.9、public Object[] toArray()4.2.9、public Object[] toArray()"></a>4.2.9、public Object[] toArray()4.2.9、public Object[] toArray()</h4><p>以适当的顺序（从第一个元素到最后一个元素）返回包含此列表中所有元素的数组。返回的数组将是“安全的”，因为此列表不会保留对它的引用。 （换句话说，此方法必须分配一个新数组）。 因此调用者可以自由修改返回的数组。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-10、public-T-toArray-T-a-4-2-10、public-T-toArray-T-a"><a href="#4-2-10、public-T-toArray-T-a-4-2-10、public-T-toArray-T-a" class="headerlink" title="4.2.10、public T[] toArray(T[] a)4.2.10、public T[] toArray(T[] a)"></a>4.2.10、public T[] toArray(T[] a)4.2.10、public T[] toArray(T[] a)</h4><p>以适当的顺序返回包含此列表中所有元素的数组（从第一个元素到最后一个元素）; 返回数组的类型是指定数组的运行时类型。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            <span class="comment">// 根据给定数组的运行时类型创建一个新的数组</span></span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">        <span class="comment">//如果指定数组长度大于当前数组长度，则指定数组在 size 位置之后的元素设置为null</span></span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-2-11、public-E-get-int-index-4-2-11、public-E-get-int-index"><a href="#4-2-11、public-E-get-int-index-4-2-11、public-E-get-int-index" class="headerlink" title="4.2.11、public E get(int index)4.2.11、public E get(int index)"></a>4.2.11、public E get(int index)4.2.11、public E get(int index)</h4><p>返回此列表中指定位置的元素。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> elementData(index);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//检查给定索引是否在范围内。 如果不是，则抛出适当的运行时异常。 此方法不检查索引是否为负数：如果索引为负，则抛出ArrayIndexOutOfBoundsException。</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据给定的索引获取数组elementData中对应位置的元素</span></span><br><span class="line">     E <span class="title function_">elementData</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="4-2-12、public-E-set-int-index-E-element-4-2-12、public-E-set-int-index-E-element"><a href="#4-2-12、public-E-set-int-index-E-element-4-2-12、public-E-set-int-index-E-element" class="headerlink" title="4.2.12、public E set(int index, E element)4.2.12、public E set(int index, E element)"></a>4.2.12、public E set(int index, E element)4.2.12、public E set(int index, E element)</h4><p>用指定的元素替换此列表中指定位置的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">       rangeCheck(index);</span><br><span class="line"></span><br><span class="line">       <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">       elementData[index] = element;</span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-13、public-boolean-add-E-e"><a href="#4-2-13、public-boolean-add-E-e" class="headerlink" title="4.2.13、public boolean add(E e)"></a>4.2.13、public boolean add(E e)</h4><p>将指定的元素追加到此列表的末尾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line"> <span class="comment">//扩大容量,修改modcount</span></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       <span class="comment">//数组是从0开始的存元素的，而数组个数是从1开始计数的</span></span><br><span class="line">       <span class="comment">//这里是往第size个位置上存元素</span></span><br><span class="line">       <span class="comment">//再将元素个数加1</span></span><br><span class="line">        elementData[size++] = e;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//计算数组容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">//如果elementData为空，则设置容量大小为 Math.max(DEFAULT_CAPACITY, minCapacity);</span></span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minCapacity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-14、public-void-add-int-index-E-element"><a href="#4-2-14、public-void-add-int-index-E-element" class="headerlink" title="4.2.14、public void add(int index,E element)"></a>4.2.14、public void add(int index,E element)</h4><p>将指定元素插入此列表中的指定位置。 将当前位于该位置的元素（如果有）和后续元素向右移动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">       <span class="comment">//下标检查，是否越界了</span></span><br><span class="line">       rangeCheckForAdd(index);</span><br><span class="line"> <span class="comment">//扩增容量，同时改变modcount</span></span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       <span class="comment">//index后面的元素后移</span></span><br><span class="line">       System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                        size - index);</span><br><span class="line">      <span class="comment">//指定位置放置元素</span></span><br><span class="line">       elementData[index] = element;</span><br><span class="line">       <span class="comment">//元素数量大小自增</span></span><br><span class="line">       size++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-15、public-E-remove-int-index"><a href="#4-2-15、public-E-remove-int-index" class="headerlink" title="4.2.15、public E remove(int index)"></a>4.2.15、public E remove(int index)</h4><p>删除此列表中指定位置的元素。 将任何后续元素向左移动）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">       rangeCheck(index);</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="comment">//获取要删除的元素</span></span><br><span class="line">       <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> elementData(index);</span><br><span class="line">       <span class="comment">//需要移动的元素数量</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">       elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-16、public-boolean-remove-Object-o"><a href="#4-2-16、public-boolean-remove-Object-o" class="headerlink" title="4.2.16、public boolean remove(Object o)"></a>4.2.16、public boolean remove(Object o)</h4><p>从此列表中删除指定元素的第一个匹配项（如果存在）。 如果列表不包含该元素，则不会更改。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">               <span class="keyword">if</span> (elementData[index] == <span class="literal">null</span>) &#123;</span><br><span class="line">                   fastRemove(index);</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历ArrayList，找到元素o，删除并返回true。</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                   fastRemove(index);</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> <span class="comment">//快速删除第index个元素并且不返回删除的值。</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">fastRemove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">       elementData[--size] = <span class="literal">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-17、public-void-clear"><a href="#4-2-17、public-void-clear" class="headerlink" title="4.2.17、public void clear()"></a>4.2.17、public void clear()</h4><p>从此列表中删除所有元素。 此调用返回后，列表将为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// clear to let GC do its work</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">           elementData[i] = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       size = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-18、public-boolean-addAll-Collection-c"><a href="#4-2-18、public-boolean-addAll-Collection-c" class="headerlink" title="4.2.18、public boolean addAll(Collection&lt;? extends E&gt; c)"></a>4.2.18、public boolean addAll(Collection&lt;? extends E&gt; c)</h4><p>将指定集合中的所有元素按指定集合的迭代器返回的顺序附加到此列表的末尾。 如果在操作正在进行时修改了指定的集合，则此操作的行为是不确定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">       Object[] a = c.toArray();</span><br><span class="line">       <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">       ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line">       System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">       size += numNew;</span><br><span class="line">       <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-19、public-boolean-addAll-int-index-Collection-c"><a href="#4-2-19、public-boolean-addAll-int-index-Collection-c" class="headerlink" title="4.2.19、public boolean addAll(int index, Collection&lt;? extends E&gt; c)"></a>4.2.19、public boolean addAll(int index, Collection&lt;? extends E&gt; c)</h4><p>从指定位置开始，将指定集合中的所有元素插入此列表。 将当前位置的元素（如果有）和后续元素向右移动。 新元素将按照指定集合的迭代器返回的顺序出现在列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">       rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">       Object[] a = c.toArray();</span><br><span class="line">       <span class="type">int</span> <span class="variable">numNew</span> <span class="operator">=</span> a.length;</span><br><span class="line">       ensureCapacityInternal(size + numNew);  <span class="comment">// Increments modCount</span></span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - index;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, index, elementData, index + numNew,</span><br><span class="line">                            numMoved);</span><br><span class="line"></span><br><span class="line">       System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">       size += numNew;</span><br><span class="line">       <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-20、protected-void-removeRange-int-fromIndex-int-toIndex"><a href="#4-2-20、protected-void-removeRange-int-fromIndex-int-toIndex" class="headerlink" title="4.2.20、protected void removeRange(int fromIndex,int toIndex)"></a>4.2.20、protected void removeRange(int fromIndex,int toIndex)</h4><p>从此列表中删除索引介于fromIndex（包含）和 toIndex（不包含）之间的所有元素。 将任何后续元素向左移动， 此调用通过（toIndex - fromIndex）元素缩短列表。如果toIndex &#x3D;&#x3D; fromIndex，则此操作无效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">removeRange</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numMoved</span> <span class="operator">=</span> size - toIndex;</span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,</span><br><span class="line">                         numMoved);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear to let GC do its work</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newSize</span> <span class="operator">=</span> size - (toIndex-fromIndex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> newSize; i &lt; size; i++) &#123;</span><br><span class="line">            elementData[i] = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size = newSize;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-21、public-boolean-removeAll-Collection-c"><a href="#4-2-21、public-boolean-removeAll-Collection-c" class="headerlink" title="4.2.21、public boolean removeAll(Collection&lt;?&gt; c)"></a>4.2.21、public boolean removeAll(Collection&lt;?&gt; c)</h4><p>从此列表中删除指定集合中包含的所有元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//批量删除元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="type">boolean</span> complement)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> Object[] elementData = <span class="built_in">this</span>.elementData;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>, w = <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</span><br><span class="line">                    elementData[w++] = elementData[r];</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 保留与AbstractCollection的行为兼容性，即使c.contains（）抛出异常。</span></span><br><span class="line">            <span class="keyword">if</span> (r != size) &#123;</span><br><span class="line">                System.arraycopy(elementData, r,</span><br><span class="line">                                 elementData, w,</span><br><span class="line">                                 size - r);</span><br><span class="line">                w += size - r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (w != size) &#123;</span><br><span class="line">                <span class="comment">// clear to let GC do its work</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> w; i &lt; size; i++)</span><br><span class="line">                    elementData[i] = <span class="literal">null</span>;</span><br><span class="line">                modCount += size - w;</span><br><span class="line">                size = w;</span><br><span class="line">                modified = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-22、public-boolean-retainAll-Collection-c-："><a href="#4-2-22、public-boolean-retainAll-Collection-c-：" class="headerlink" title="4.2.22、public boolean retainAll(Collection&lt;?&gt; c)："></a>4.2.22、public boolean retainAll(Collection&lt;?&gt; c)：</h4><p>从该列表中删除未包含在指定集合中的所有元素。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(c);</span><br><span class="line">        <span class="keyword">return</span> batchRemove(c, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-23、public-ListIterator-listIterator-int-index"><a href="#4-2-23、public-ListIterator-listIterator-int-index" class="headerlink" title="4.2.23、public ListIterator listIterator(int index)"></a>4.2.23、public ListIterator listIterator(int index)</h4><p>从列表中的指定位置开始，返回列表中元素的列表迭代器。 指定的索引指示初始调用next时将返回的第一个元素。 对previous的初始调用将返回指定索引减去1的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;Index: &quot;</span>+index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListItr</span>(index);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//AbstractList.ListItr 的优化版本</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ListItr</span> <span class="keyword">extends</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">ListIterator</span>&lt;E&gt; &#123;</span><br><span class="line">        ListItr(<span class="type">int</span> index) &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            cursor = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextIndex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">previousIndex</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">previous</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            cursor = i;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(E e)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ArrayList.<span class="built_in">this</span>.set(lastRet, e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">                ArrayList.<span class="built_in">this</span>.add(i, e);</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                lastRet = -<span class="number">1</span>;</span><br><span class="line">                expectedModCount = modCount;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-24、public-ListIterator-listIterator"><a href="#4-2-24、public-ListIterator-listIterator" class="headerlink" title="4.2.24、public ListIterator listIterator()"></a>4.2.24、public ListIterator listIterator()</h4><p>返回此列表中元素的列表迭代器（按适当顺序）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListItr</span>(<span class="number">0</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-25、public-Iterator-iterator"><a href="#4-2-25、public-Iterator-iterator" class="headerlink" title="4.2.25、public Iterator iterator()"></a>4.2.25、public Iterator iterator()</h4><p>以适当的顺序返回此列表中元素的迭代器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//AbstractList.Itr 的优化版本</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">       <span class="type">int</span> cursor;       <span class="comment">// 要返回的下一个元素的索引</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// 返回最后一个元素的索引; 如果没有返回 -1</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">       Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> cursor != size;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">           checkForComodification();</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">           <span class="comment">//元素下标 &gt;=size ,不存在对应位置的元素</span></span><br><span class="line">           <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">           Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">           cursor = i + <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">           checkForComodification();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               ArrayList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">               cursor = lastRet;</span><br><span class="line">               lastRet = -<span class="number">1</span>;</span><br><span class="line">               expectedModCount = modCount;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; consumer)</span> &#123;</span><br><span class="line">           Objects.requireNonNull(consumer);</span><br><span class="line">           <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> ArrayList.<span class="built_in">this</span>.size;</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">           <span class="keyword">if</span> (i &gt;= elementData.length) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">               consumer.accept((E) elementData[i++]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 在迭代结束时更新一次以减少堆写入流量</span></span><br><span class="line">           cursor = i;</span><br><span class="line">           lastRet = i - <span class="number">1</span>;</span><br><span class="line">           checkForComodification();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-26、public-List-subList-int-fromIndex-int-toIndex"><a href="#4-2-26、public-List-subList-int-fromIndex-int-toIndex" class="headerlink" title="4.2.26、public List subList(int fromIndex,int toIndex)"></a>4.2.26、public List subList(int fromIndex,int toIndex)</h4><p>返回指定fromIndex（包含）和toIndex（不包含）之间此列表部分的视图。如果fromIndex和toIndex相等，则返回的列表为空。 返回的列表由此列表支持，因此返回列表中的非结构更改将反映在此列表中，反之亦然。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubList</span>(<span class="built_in">this</span>, <span class="number">0</span>, fromIndex, toIndex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">subListRangeCheck</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;fromIndex = &quot;</span> + fromIndex);</span><br><span class="line">        <span class="keyword">if</span> (toIndex &gt; size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(<span class="string">&quot;toIndex = &quot;</span> + toIndex);</span><br><span class="line">        <span class="keyword">if</span> (fromIndex &gt; toIndex)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;fromIndex(&quot;</span> + fromIndex +</span><br><span class="line">                                               <span class="string">&quot;) &gt; toIndex(&quot;</span> + toIndex + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SubList</span> <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">RandomAccess</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AbstractList&lt;E&gt; parent;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> parentOffset;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> offset;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">        SubList(AbstractList&lt;E&gt; parent,</span><br><span class="line">                <span class="type">int</span> offset, <span class="type">int</span> fromIndex, <span class="type">int</span> toIndex) &#123;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">            <span class="built_in">this</span>.parentOffset = fromIndex;</span><br><span class="line">            <span class="built_in">this</span>.offset = offset + fromIndex;</span><br><span class="line">            <span class="built_in">this</span>.size = toIndex - fromIndex;</span><br><span class="line">            <span class="built_in">this</span>.modCount = ArrayList.<span class="built_in">this</span>.modCount;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E e)</span> &#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="type">E</span> <span class="variable">oldValue</span> <span class="operator">=</span> ArrayList.<span class="built_in">this</span>.elementData(offset + index);</span><br><span class="line">            ArrayList.<span class="built_in">this</span>.elementData[offset + index] = e;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> ArrayList.<span class="built_in">this</span>.elementData(offset + index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E e)</span> &#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.add(parentOffset + index, e);</span><br><span class="line">            <span class="built_in">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="built_in">this</span>.size++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            rangeCheck(index);</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="type">E</span> <span class="variable">result</span> <span class="operator">=</span> parent.remove(parentOffset + index);</span><br><span class="line">            <span class="built_in">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="built_in">this</span>.size--;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">removeRange</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.removeRange(parentOffset + fromIndex,</span><br><span class="line">                               parentOffset + toIndex);</span><br><span class="line">            <span class="built_in">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="built_in">this</span>.size -= toIndex - fromIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> addAll(<span class="built_in">this</span>.size, c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="type">int</span> <span class="variable">cSize</span> <span class="operator">=</span> c.size();</span><br><span class="line">            <span class="keyword">if</span> (cSize==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            checkForComodification();</span><br><span class="line">            parent.addAll(parentOffset + index, c);</span><br><span class="line">            <span class="built_in">this</span>.modCount = parent.modCount;</span><br><span class="line">            <span class="built_in">this</span>.size += cSize;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> listIterator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> index)</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            rangeCheckForAdd(index);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="built_in">this</span>.offset;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ListIterator</span>&lt;E&gt;() &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cursor</span> <span class="operator">=</span> index;</span><br><span class="line">                <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> ArrayList.<span class="built_in">this</span>.modCount;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor != SubList.<span class="built_in">this</span>.size;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= SubList.<span class="built_in">this</span>.size)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">                    Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">                    cursor = i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor != <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="keyword">public</span> E <span class="title function_">previous</span><span class="params">()</span> &#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor - <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">                    Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">                    cursor = i;</span><br><span class="line">                    <span class="keyword">return</span> (E) elementData[offset + (lastRet = i)];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; consumer)</span> &#123;</span><br><span class="line">                    Objects.requireNonNull(consumer);</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> SubList.<span class="built_in">this</span>.size;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">                    <span class="keyword">if</span> (i &gt;= size) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">final</span> Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">                    <span class="keyword">if</span> (offset + i &gt;= elementData.length) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (i != size &amp;&amp; modCount == expectedModCount) &#123;</span><br><span class="line">                        consumer.accept((E) elementData[offset + (i++)]);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// update once at end of iteration to reduce heap write traffic</span></span><br><span class="line">                    lastRet = cursor = i;</span><br><span class="line">                    checkForComodification();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextIndex</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">previousIndex</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> cursor - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        SubList.<span class="built_in">this</span>.remove(lastRet);</span><br><span class="line">                        cursor = lastRet;</span><br><span class="line">                        lastRet = -<span class="number">1</span>;</span><br><span class="line">                        expectedModCount = ArrayList.<span class="built_in">this</span>.modCount;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(E e)</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>();</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ArrayList.<span class="built_in">this</span>.set(offset + lastRet, e);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">                    checkForComodification();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">                        SubList.<span class="built_in">this</span>.add(i, e);</span><br><span class="line">                        cursor = i + <span class="number">1</span>;</span><br><span class="line">                        lastRet = -<span class="number">1</span>;</span><br><span class="line">                        expectedModCount = ArrayList.<span class="built_in">this</span>.modCount;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (expectedModCount != ArrayList.<span class="built_in">this</span>.modCount)</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">            subListRangeCheck(fromIndex, toIndex, size);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SubList</span>(<span class="built_in">this</span>, offset, fromIndex, toIndex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheck</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">this</span>.size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rangeCheckForAdd</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="built_in">this</span>.size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String <span class="title function_">outOfBoundsMsg</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Index: &quot;</span>+index+<span class="string">&quot;, Size: &quot;</span>+<span class="built_in">this</span>.size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ArrayList.<span class="built_in">this</span>.modCount != <span class="built_in">this</span>.modCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayListSpliterator</span>&lt;E&gt;(ArrayList.<span class="built_in">this</span>, offset,</span><br><span class="line">                                               offset + <span class="built_in">this</span>.size, <span class="built_in">this</span>.modCount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-27、public-void-forEach-Consumer-action"><a href="#4-2-27、public-void-forEach-Consumer-action" class="headerlink" title="4.2.27、public void forEach(Consumer&lt;? super E&gt; action)"></a>4.2.27、public void forEach(Consumer&lt;? super E&gt; action)</h4><p>对Iterable的每个元素执行给定操作，直到处理完所有元素或操作抛出异常为止。 除非实现类另有指定，否则操作按迭代顺序执行。 操作抛出的异常会转发给调用者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">       Objects.requireNonNull(action);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">       <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">       <span class="keyword">final</span> E[] elementData = (E[]) <span class="built_in">this</span>.elementData;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">       <span class="comment">//遍历元素，对每个元素执行指定操作</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">           action.accept(elementData[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-28、public-Spliterator-spliterator"><a href="#4-2-28、public-Spliterator-spliterator" class="headerlink" title="4.2.28、public Spliterator spliterator()"></a>4.2.28、public Spliterator spliterator()</h4><p>在此列表中的元素上创建一个late-binding和fail-fast 的Spliterator。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayListSpliterator</span>&lt;&gt;(<span class="built_in">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 基于索引的二分法，懒惰初始化的Spliterator */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ArrayListSpliterator</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Spliterator</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;E&gt; list;</span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> index; <span class="comment">// 当前索引</span></span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> fence; <span class="comment">// 最后一个索引</span></span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> expectedModCount; <span class="comment">// initialized when fence set</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/** 创建覆盖给定范围的新spliterator  */</span></span><br><span class="line">       ArrayListSpliterator(ArrayList&lt;E&gt; list, <span class="type">int</span> origin, <span class="type">int</span> fence,</span><br><span class="line">                            <span class="type">int</span> expectedModCount) &#123;</span><br><span class="line">           <span class="built_in">this</span>.list = list; <span class="comment">// OK if null unless traversed</span></span><br><span class="line">           <span class="built_in">this</span>.index = origin;</span><br><span class="line">           <span class="built_in">this</span>.fence = fence;</span><br><span class="line">           <span class="built_in">this</span>.expectedModCount = expectedModCount;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getFence</span><span class="params">()</span> &#123; <span class="comment">// 首次使用时将fence初始化为size</span></span><br><span class="line">           <span class="type">int</span> hi; <span class="comment">// (a specialized variant appears in method forEach)</span></span><br><span class="line">           ArrayList&lt;E&gt; lst;</span><br><span class="line">           <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> ((lst = list) == <span class="literal">null</span>)</span><br><span class="line">                   hi = fence = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   expectedModCount = lst.modCount;</span><br><span class="line">                   hi = fence = lst.size;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> hi;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> ArrayListSpliterator&lt;E&gt; <span class="title function_">trySplit</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">hi</span> <span class="operator">=</span> getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">return</span> (lo &gt;= mid) ? <span class="literal">null</span> : <span class="comment">// 除非太小，否则将范围分成两半</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ArrayListSpliterator</span>&lt;E&gt;(list, lo, index = mid,</span><br><span class="line">                                           expectedModCount);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAdvance</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">           <span class="type">int</span> <span class="variable">hi</span> <span class="operator">=</span> getFence(), i = index;</span><br><span class="line">           <span class="keyword">if</span> (i &lt; hi) &#123;</span><br><span class="line">               index = i + <span class="number">1</span>;</span><br><span class="line">               <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E)list.elementData[i];</span><br><span class="line">               action.accept(e);</span><br><span class="line">               <span class="keyword">if</span> (list.modCount != expectedModCount)</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">           <span class="type">int</span> i, hi, mc; <span class="comment">// hoist accesses and checks from loop</span></span><br><span class="line">           ArrayList&lt;E&gt; lst; Object[] a;</span><br><span class="line">           <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">           <span class="keyword">if</span> ((lst = list) != <span class="literal">null</span> &amp;&amp; (a = lst.elementData) != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> ((hi = fence) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                   mc = lst.modCount;</span><br><span class="line">                   hi = lst.size;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   mc = expectedModCount;</span><br><span class="line">               <span class="keyword">if</span> ((i = index) &gt;= <span class="number">0</span> &amp;&amp; (index = hi) &lt;= a.length) &#123;</span><br><span class="line">                   <span class="keyword">for</span> (; i &lt; hi; ++i) &#123;</span><br><span class="line">                       <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) a[i];</span><br><span class="line">                       action.accept(e);</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="keyword">if</span> (lst.modCount == mc)</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">estimateSize</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> (<span class="type">long</span>) (getFence() - index);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">characteristics</span><span class="params">()</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> Spliterator.ORDERED | Spliterator.SIZED | Spliterator.SUBSIZED;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-29、public-boolean-removeIf-Predicate-filter"><a href="#4-2-29、public-boolean-removeIf-Predicate-filter" class="headerlink" title="4.2.29、public boolean removeIf(Predicate&lt;? super E&gt; filter)"></a>4.2.29、public boolean removeIf(Predicate&lt;? super E&gt; filter)</h4><p>删除此集合中满足给定谓词的所有元素。 在迭代期间或通过谓词抛出的错误或运行时异常将返回给调用者。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeIf</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> E&gt; filter)</span> &#123;</span><br><span class="line">      Objects.requireNonNull(filter);</span><br><span class="line">      <span class="comment">// 确定要删除哪些元素在此阶段从过滤谓词抛出的任何异常都将使集合保持不变</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">removeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">BitSet</span> <span class="variable">removeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">          <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">          <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> (E) elementData[i];</span><br><span class="line">          <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">              removeSet.set(i);</span><br><span class="line">              removeCount++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 移动幸存元素</span></span><br><span class="line">      <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">anyToRemove</span> <span class="operator">=</span> removeCount &gt; <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="type">int</span> <span class="variable">newSize</span> <span class="operator">=</span> size - removeCount;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">              i = removeSet.nextClearBit(i);</span><br><span class="line">              elementData[j] = elementData[i];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">              elementData[k] = <span class="literal">null</span>;  <span class="comment">// Let gc do its work</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">this</span>.size = newSize;</span><br><span class="line">          <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">          &#125;</span><br><span class="line">          modCount++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> anyToRemove;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-30、public-void-replaceAll-UnaryOperator-operator"><a href="#4-2-30、public-void-replaceAll-UnaryOperator-operator" class="headerlink" title="4.2.30、public void replaceAll(UnaryOperator operator)"></a>4.2.30、public void replaceAll(UnaryOperator operator)</h4><p>将该列表的每个元素替换为将运算符应用于该元素的结果。 操作抛出的错误或运行时异常将转发给调用者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> &#123;</span><br><span class="line">       Objects.requireNonNull(operator);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">       <span class="comment">//遍历元素，为每个元素应用operator</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">           elementData[i] = operator.apply((E) elementData[i]);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-31、public-void-sort-Comparator-c"><a href="#4-2-31、public-void-sort-Comparator-c" class="headerlink" title="4.2.31、public void sort(Comparator&lt;? super E&gt; c)"></a>4.2.31、public void sort(Comparator&lt;? super E&gt; c)</h4><p>根据指定的比较器对此列表进行排序。</p><p>此列表中的所有元素必须使用指定的比较器进行相互比较（即，c.compare（e1，e2）不得为列表中的任何元素e1和e2抛出ClassCastException）。</p><p>如果指定的比较器为null，则此列表中的所有元素都必须实现Comparable接口，并且应使用元素的自然顺序。</p><p>此列表必须是可修改的，但无需调整大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; c)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">       Arrays.sort((E[]) elementData, <span class="number">0</span>, size, c);</span><br><span class="line">       <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       modCount++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-3、ArrayList-方法总结"><a href="#4-3、ArrayList-方法总结" class="headerlink" title="4.3、ArrayList 方法总结"></a>4.3、ArrayList 方法总结</h3><p>1）ArrayList 实际上是通过一个数组去保存数据的。当我们构造ArrayList时；若使用默认构造函数，则ArrayList的默认容量大小是10。</p><p>2）当ArrayList容量不足以容纳全部元素时，ArrayList会重新设置容量：新的容量&#x3D;原有容量+（原有容量&#x2F;2）。</p><p>3）ArrayList的克隆函数，即是将全部元素克隆到一个数组中。</p><p>4）ArrayList实现java.io.Serializable的方式。当写入到输出流时，先写入“容量”，再依次写入“每一个元素”；当读出输入流时，先读取“容量”，再依次读取“每一个元素”。</p><p>5）ArrayList基于数组实现，可以通过下标索引直接查找到指定位置的元素，因此查找效率高，但每次插入或删除元素，就要大量地移动元素，插入删除元素的效率低。</p><p>6）在查找给定元素索引值等的方法中，源码都将该元素的值分为null和不为null两种情况处理，ArrayList中允许元素为null。</p><h2 id="5、ArrayList-toArray-异常"><a href="#5、ArrayList-toArray-异常" class="headerlink" title="5、ArrayList toArray() 异常"></a>5、ArrayList toArray() 异常</h2><p>当我们调用ArrayList中的 toArray()，可能会遇到抛出“java.lang.ClassCastException”异常的情况。</p><p>ArrayList提供了2个toArray()函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() </span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) </span><br></pre></td></tr></table></figure><p>调用 toArray() 函数会抛出“java.lang.ClassCastException”异常，但是调用 toArray(T[] contents) 能正常返回 T[]。</p><p>toArray() 会抛出异常是因为 toArray() 返回的是 Object[] 数组，将 Object[] 转换为其它类型(例如，将Object[]转换为的Integer[])则会抛出“java.lang.ClassCastException”异常，因为Java不支持向下转型。</p><p>解决该问题的办法是调用 T[] toArray(T[] contents) ， 而不是 Object[] toArray()。</p><p>调用 toArray(T[] contents) 返回T[]的可以通过以下几种方式实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// toArray(T[] contents) 方式1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] toArrayMethod1(ArrayList&lt;Integer&gt; v) &#123;</span><br><span class="line">    Integer[] newText = <span class="keyword">new</span> <span class="title class_">Integer</span>[v.size()];</span><br><span class="line">    v.toArray(newText);</span><br><span class="line">    <span class="keyword">return</span> newText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toArray(T[] contents) 方式2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] toArrayMethod2(ArrayList&lt;Integer&gt; v) &#123;</span><br><span class="line">    Integer[] newText = (Integer[])v.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> newText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// toArray(T[] contents) 方式3</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer[] toArrayMethod3(ArrayList&lt;Integer&gt; v) &#123;</span><br><span class="line">    Integer[] newText = <span class="keyword">new</span> <span class="title class_">Integer</span>[v.size()];</span><br><span class="line">    Integer[] newText2 = (Integer[])v.toArray(newText);</span><br><span class="line">    <span class="keyword">return</span> newText2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、ArrayList-遍历方式"><a href="#6、ArrayList-遍历方式" class="headerlink" title="6、ArrayList 遍历方式"></a>6、ArrayList 遍历方式</h2><h3 id="6-1、通过迭代器（Iterator）遍历"><a href="#6-1、通过迭代器（Iterator）遍历" class="headerlink" title="6.1、通过迭代器（Iterator）遍历"></a>6.1、通过迭代器（Iterator）遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="type">Iterator</span> <span class="variable">iter</span> <span class="operator">=</span> list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">    System.out.println(iter.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2、通过索引遍历"><a href="#6-2、通过索引遍历" class="headerlink" title="6.2、通过索引遍历"></a>6.2、通过索引遍历</h3><p>由于ArrayList实现了RandomAccess接口，它支持通过索引值去随机访问元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">       System.out.println(list.get(i));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="6-3、for循环遍历"><a href="#6-3、for循环遍历" class="headerlink" title="6.3、for循环遍历"></a>6.3、for循环遍历</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String s:list)&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="7、ArrayList-扩容策略"><a href="#7、ArrayList-扩容策略" class="headerlink" title="7、ArrayList 扩容策略"></a>7、ArrayList 扩容策略</h2><p>ArrayList底层是使用<strong>数组存储</strong>的，当数组<strong>大小不足存放新增元素的时候，才会发生扩容</strong>。</p><p>在add操作中，ArrayList首先会调用ensureCapacityInternal方法进行<strong>扩容</strong>检测的。</p><p>如果数组大小不足，则会<strong>自动扩容</strong>；如果扩容后的大小<strong>超出</strong>数组最大的大小，则会<strong>抛出异常</strong>。</p><p>ArrayList扩容策略，主要有<strong>两个</strong>步骤：</p><p>🌂扩容检测（ensureCapacityInternal(size + 1)）：<br>检测数组大小是否为0，如果是，则使用默认的扩容大小10<br>检测是否需要扩容，只有当数组期望容量大于当前数组大小时，才会进行扩容</p><p>🌂扩容操作 grow和hugeCapacity<br>进行数组越界判断<br>拷贝原始数据到新的数组中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩容检测</span></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculateCapacity</span><span class="params">(Object[] elementData, <span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line"> </span><br><span class="line">       <span class="comment">// 如果底层数组大小为0，则使用默认的容量大小10</span></span><br><span class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 数据结构发生改变，和fail-fast机制有关，在使用迭代器过程中，只能通过迭代器的方法（比如迭代器中add，remove等），修改List的数据结构，</span></span><br><span class="line">    <span class="comment">// 如果使用List的方法（比如List中的add，remove等），修改List的数据结构，会抛出ConcurrentModificationException</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 当前数组容量大小不足时，才会调用grow方法，自动扩容</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扩容操作 grow和hugeCapacity</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">        <span class="comment">// 新的容量大小（即原容量1.5倍） = 原容量大小+（原容量大小/2）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = minCapacity;</span><br><span class="line">        <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">        elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">        <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">            Integer.MAX_VALUE :</span><br><span class="line">            MAX_ARRAY_SIZE;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十五）：TreeSet 源码分析</title>
      <link href="/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9ATreeSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9ATreeSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、TreeSet-简述"><a href="#1、TreeSet-简述" class="headerlink" title="1、TreeSet 简述"></a>1、TreeSet 简述</h2><p>🌂TreeSet是基于TreeMap作为存储的可排序、可去重的有序集合</p><p>🌂继承于AbstractSet,AbstractSet实现了equals和hashcode方法</p><p>🌂实现了NavigableSet接口，意味着它支持一系列的导航方法，比如查找与指定目标最匹配项</p><p>🌂实现了Cloneable接口，意味着它能被复制</p><p>🌂实现了java.io.Serializable接口，意味着它支持序列化</p><p><img src="https://s1.ax1x.com/2020/04/04/GwUIeA.png"></p><p>2、TreeSet源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSet</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">NavigableSet</span>&lt;E&gt;, Cloneable, java.io.Serializable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 NavigableMap 的 key 来存储 Set 集合的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> NavigableMap&lt;E,Object&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 虚拟一个 PRESENT 作为 Map 集合的所有 value</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包级别访问权限的构造器，以指定的 NavigableMap 对象创建 Set 集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TreeSet(NavigableMap&lt;E,Object&gt; m) &#123;</span><br><span class="line">        <span class="built_in">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以自然排序方式创建一个新的 TreeMap，</span></span><br><span class="line"><span class="comment">     * 使用该 TreeMap 的 key 来保存 Set 集合的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;E,Object&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据自定义排序方式创建一个新的 TreeMap，</span></span><br><span class="line"><span class="comment">     * 使用该 TreeMap 的 key 来保存 Set 集合的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据无参构造器创建一个 TreeSet，底层以 TreeMap 保存集合元素</span></span><br><span class="line"><span class="comment">     * 向 TreeSet 中添加 指定Collection 集合 c 里的所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据有参构造器创建一个 TreeSet，底层以 TreeMap 保存集合元素</span></span><br><span class="line"><span class="comment">     * 向 TreeSet 中添加 指定Collection 集合 c 里的所有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(SortedSet&lt;E&gt; s)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(s.comparator());</span><br><span class="line">        addAll(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">---------------下面来看addAll方法-------------------</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="comment">// Use linear-time version if applicable</span></span><br><span class="line">        <span class="keyword">if</span> (m.size()==<span class="number">0</span> &amp;&amp; c.size() &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            c <span class="keyword">instanceof</span> SortedSet &amp;&amp;</span><br><span class="line">            m <span class="keyword">instanceof</span> TreeMap) &#123;</span><br><span class="line">            # 把指定集合强制转换为 SortedSet 集合</span><br><span class="line">            SortedSet&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt; set = (SortedSet&lt;? <span class="keyword">extends</span> <span class="title class_">E</span>&gt;) c;</span><br><span class="line">            # 把NavigableMap集合强制转换为 TreeMap集合</span><br><span class="line">            TreeMap&lt;E,Object&gt; map = (TreeMap&lt;E, Object&gt;) m;</span><br><span class="line">            Comparator&lt;?&gt; cc = set.comparator();</span><br><span class="line">            Comparator&lt;? <span class="built_in">super</span> E&gt; mc = map.comparator();</span><br><span class="line">            # 如果 cc 和 mc 两个 Comparator 相等</span><br><span class="line">            <span class="keyword">if</span> (cc==mc || (cc != <span class="literal">null</span> &amp;&amp; cc.equals(mc))) &#123;</span><br><span class="line">            # 把指定集合Collection 中所有元素作为 TreeMap 集合的 key 进行存储</span><br><span class="line">                map.addAllForTreeSet(set, PRESENT);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可以看出，TreeSet 的前两个构造器的都是新建一个 TreeMap 作为实际存储 Set 元素的<strong>容器</strong>，而另外 2 个构造器则分别<strong>依赖</strong>于前两个构造器，由此可见，TreeSet 底层实际使用的存储容器就是 TreeMap</p><h2 id="3、TreeSet排序方式"><a href="#3、TreeSet排序方式" class="headerlink" title="3、TreeSet排序方式"></a>3、TreeSet排序方式</h2><p><strong>由源码我们可知TreeSet的排序方式有两种：</strong></p><h3 id="3-1、一是自然排序，使用默认构造函数3-1、一是自然排序，使用默认构造函数"><a href="#3-1、一是自然排序，使用默认构造函数3-1、一是自然排序，使用默认构造函数" class="headerlink" title="3.1、一是自然排序，使用默认构造函数3.1、一是自然排序，使用默认构造函数"></a>3.1、一是自然排序，使用默认构造函数3.1、一是自然排序，使用默认构造函数</h3><p>Java提供了一个Comparable接口，该接口里定义了一个compareTo(Object obj)方法，该方法返回一个整数值，实现该接口的类必须实现该方法，实现了该接口的类的对象就可以比较大小了。当一个对象调用该方法与另一个对象进行比较，</p><p>例如 obj1.compareTo(obj2)</p><p>🌂如果该方法返回0，则表明这两个对象相等；</p><p>🌂如果该方法返回一个正整数，则表明obj1大于obj2；</p><p>🌂如果该方法返回一个负整数，则表明obj1小于obj2。</p><p>Java的一些常用类已经实现了Comparable接口，并提供了比较大小的标准， 下面是实现了Comparable接口的<strong>常用类</strong>：</p><p>🌂BigDecimal、BigInteger以及所有数值型对应包装类：按它们对象的数值大小进行比较</p><p>🌂Character ：按字符的Unicode值进行比较</p><p>🌂Boolean ： true对应的包装类实例大于false对应的包装类实例</p><p>🌂String : 按字符串中字符的Unicode值进行比较</p><p>🌂Date、Time ： 后面的时间、日期比前面的日期时间大。</p><h3 id="3-2、二是比较器排序，使用指定比较器的构造函数3-2、二是比较器排序，使用指定比较器的构造函数"><a href="#3-2、二是比较器排序，使用指定比较器的构造函数3-2、二是比较器排序，使用指定比较器的构造函数" class="headerlink" title="3.2、二是比较器排序，使用指定比较器的构造函数3.2、二是比较器排序，使用指定比较器的构造函数"></a>3.2、二是比较器排序，使用指定比较器的构造函数3.2、二是比较器排序，使用指定比较器的构造函数</h3><p>TreeSet的自然排序是根据集合元素的大小默认以<strong>升序排列</strong>。如果需要完成定制排序，例如以降序排列，则可以使用Comparator接口的帮助。<br>该接口里包含了一个int compare(T o1, T o2)方法，</p><p><strong>该方法用于比较o1、o2的大小：</strong><br>🌂如果该方法返回正整数，则表明o1大于o2；</p><p>🌂如果该方法返回0，则表明o1等于o2；</p><p>🌂如果该方法返回负整数，则表明o1小于o2。</p><h2 id="4、示例"><a href="#4、示例" class="headerlink" title="4、示例"></a>4、示例</h2><h3 id="4-1、以自然顺序排序，并且元素不重复4-1、以自然顺序排序，并且元素不重复"><a href="#4-1、以自然顺序排序，并且元素不重复4-1、以自然顺序排序，并且元素不重复" class="headerlink" title="4.1、以自然顺序排序，并且元素不重复4.1、以自然顺序排序，并且元素不重复"></a>4.1、以自然顺序排序，并且元素不重复4.1、以自然顺序排序，并且元素不重复</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            treeSet.add(<span class="string">&quot;item&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            treeSet.add(<span class="string">&quot;item&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        treeSet.forEach(item -&gt; &#123;</span><br><span class="line">            System.err.println(item);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item0</span><br><span class="line">item1</span><br><span class="line">item2</span><br><span class="line">item3</span><br><span class="line">item4</span><br></pre></td></tr></table></figure><h3 id="4-2、按比较器排序"><a href="#4-2、按比较器排序" class="headerlink" title="4.2、按比较器排序"></a>4.2、按比较器排序</h3><p>指定一个比较器，倒置集合中的元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//指定一个比较器，倒置元素顺序</span></span><br><span class="line">        TreeSet&lt;String&gt; treeSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.reverseOrder());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            treeSet.add(<span class="string">&quot;item&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            treeSet.add(<span class="string">&quot;item&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        treeSet.forEach(item -&gt; &#123;</span><br><span class="line">            System.err.println(item);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item4</span><br><span class="line">item3</span><br><span class="line">item2</span><br><span class="line">item1</span><br><span class="line">item0</span><br></pre></td></tr></table></figure><h2 id="5、HashSet和TreeSet区别5、HashSet和TreeSet区别"><a href="#5、HashSet和TreeSet区别5、HashSet和TreeSet区别" class="headerlink" title="5、HashSet和TreeSet区别5、HashSet和TreeSet区别"></a>5、HashSet和TreeSet区别5、HashSet和TreeSet区别</h2><p>1）HashSet基于HashMap实现，HashSet里面的元素是无序的且不重复的<br>2）HashSet允许使用null，有且仅有一个元素为null<br>3）TreeSet基于TreeMap实现，是一个有序的集合<br>4）TreeSet中不允许使用null元素<br>5）TreeSet中的元素支持2种排序方式：自然排序 或者 根据 Comparator 进行排序<br>6）TreeSet不支持快速随机遍历，只能通过迭代器进行遍历！<br>7）HashSet和TreeSet都是非同步的，在使用Iterator进行迭代的时候要注意fail-fast</p><h2 id="6、总结6、总结"><a href="#6、总结6、总结" class="headerlink" title="6、总结6、总结"></a>6、总结6、总结</h2><p>🌂TreeSet添加元素的时候，如果元素本身具备了自然顺序的特性，那么就按照元素自然顺序的特性进行排序存储。</p><p>🌂TreeSet添加元素的时候，如果元素本身不具备自然顺序的特性，那么该元素所属的类必须要实现Comparable接口，把元素的比较规则定义在compareTo(T o)方法上。如果比较元素的时候，compareTo方法返回 的是0，那么该元素就被视为重复元素，不允许添加</p><p>🌂TreeSet添加元素的时候, 如果元素本身没有具备自然顺序 的特性，并且元素所属的类也没有实现Comparable接口，那么必须要在创建TreeSet的时候传入一个比较器。</p><p>🌂TreeSet添加元素的时候，如果元素本身不具备自然顺序的特性，而元素所属的类已经实现了Comparable接口，在创建TreeSet对象的时候又传入了比较器，此时以比较器的比较规则优先使用。</p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十四）：LinkedHashSet 源码分析</title>
      <link href="/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9ALinkedHashSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9ALinkedHashSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、LinkedHashSet-简述"><a href="#1、LinkedHashSet-简述" class="headerlink" title="1、LinkedHashSet 简述"></a>1、LinkedHashSet 简述</h2><p>LinkedHashSet底层使用 LinkedHashMap 来<strong>保存所有元素</strong>，它继承自 HashSet，其所有的方法操作上又与 HashSet 相同，因此 LinkedHashSet 的实现上非常简单，只提供了<strong>四个构造方法</strong>，并通过传递一个标识参数，调用父类的构造器，底层构造一个 LinkedHashMap 来实现，在相关操作上与父类 HashSet 的操作相同，直接调用父类 HashSet 的方法<br><img src="https://s1.ax1x.com/2020/04/04/GwUHFP.png"></p><h2 id="2、LinkedHashSet实现"><a href="#2、LinkedHashSet实现" class="headerlink" title="2、LinkedHashSet实现"></a>2、LinkedHashSet实现</h2><p>因为LinkedHashSet都是调用父类的方法，在此我们只介绍他的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedHashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">HashSet</span>&lt;E&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">Set</span>&lt;E&gt;, Cloneable, java.io.Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2851667679971038690L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个带有指定初始容量和加载因子的新空链表哈希set。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 底层会调用父类的构造方法，构造一个有指定初始容量和负载因子的LinkedHashMap实例。</span></span><br><span class="line"><span class="comment">   ```java</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> initialCapacity 初始容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFactor 负载因子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, loadFactor, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个带指定初始容量和默认负载因子0.75的新空链表哈希set。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 底层会调用父类的构造方法，构造一个带指定初始容量和默认负载因子0.75的LinkedHashMap实例。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity 初始容量。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(initialCapacity, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个带默认初始容量16和负载因子0.75的新空链接哈希set。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 底层会调用父类的构造方法，构造一个带默认初始容量16和负载因子0.75的LinkedHashMap实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">16</span>, <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造一个与指定collection中的元素相同的新链表哈希set。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 底层会调用父类的构造方法，构造一个足以包含指定collection</span></span><br><span class="line"><span class="comment">     * 中所有元素的初始容量和负载因子为0.75的LinkedHashMap实例。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c 指定集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkedHashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(Math.max(<span class="number">2</span>*c.size(), <span class="number">11</span>), <span class="number">.75f</span>, <span class="literal">true</span>);</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到构造函数中都是调用父类的构造函数，接着我们看一下其调用的父类的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据指定的initialCapacity和loadFactor构造一个新的空链表哈希集合。</span></span><br><span class="line"><span class="comment">     * 此构造函数访问权限为包访问权限，实际只是对LinkedHashSet的开放</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 底层实现会以指定的参数构造一个空LinkedHashMap实例来实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialCapacity 初始容量。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loadFactor 负载因子</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dummy 标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">HashSet(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor, <span class="type">boolean</span> dummy) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、LinkedHashSet总结"><a href="#3、LinkedHashSet总结" class="headerlink" title="3、LinkedHashSet总结"></a>3、LinkedHashSet总结</h2><p>由源码我们可以看出LinkedHashSet其实是对LinkedHashMap的包装，其底层实现完全依靠LinkedHashMap，因此想要完全理解LinkedHashSet，只需要清楚<strong>LinkedHashMap</strong>的实现原理即可</p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十三）：HashSet 源码分析</title>
      <link href="/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9AHashSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9AHashSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、简述"><a href="#1、简述" class="headerlink" title="1、简述"></a>1、简述</h2><p>HashSet<strong>继承于</strong>AbstractSet，实现接口Set，内部使用HashMap来存储数据，数据存储在HashMap的key中，value只是同一个默认值，所以HashSet存储的值是<strong>不能重复</strong>的。</p><h2 id="2、HashSet实现2、HashSet实现"><a href="#2、HashSet实现2、HashSet实现" class="headerlink" title="2、HashSet实现2、HashSet实现"></a>2、HashSet实现2、HashSet实现</h2><p>HashSet几乎实现了Set接口中的<strong>所有</strong>方法，在此我们不对每一个方法进行介绍，只介绍一部分重要方法和属性。首先我们看一下HashSet的构造方法，了解一下HashSet是如何构建的<br><img src="https://s1.ax1x.com/2020/04/04/GwUci6.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// PRESENT则是用来虚拟一个假的value，作为Map的值</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">PRESENT</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用HashMap构造一个空的HashSet对象，初始容量为16，负载因子为0.75，相当于初始化一个空的HashMap对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造包含指定集合中的元素的新集合</span></span><br><span class="line"><span class="comment">    * 创建一个HashMap对象，默认负载因子是0.75，容量大小取指定集合和默认初始大小16中最大值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(Math.max((<span class="type">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">       addAll(c);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据指定容量大小和指定的负载因子，基于HashMap创建一个空的HashSet</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据指定初始容量大小，基于HashMap创建一个空的HashSet，默认负载因子为0.75</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">       map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(initialCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 返回集合中元素数量，注意map.size()，实际是map中元素的数量</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> map.size();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 判断集合中是否抱恨指定的元素，实际判断map中是否包含指定元素作为key的对象</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *将指定元素添加到集合中，该元素作为map中的key，PRESENT作为值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 从集合中移除指定的元素</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="4、HashSet元素不重复原理"><a href="#4、HashSet元素不重复原理" class="headerlink" title="4、HashSet元素不重复原理"></a>4、HashSet元素不重复原理</h2><p>由源码分析中add()方法可知，HashSet集合中添加元素，实际是作为HashMap的Key存储，<br>由于 HashMap 的 put() 方法添加 key-value 时，当新放入 HashMap 的 Entry 中 key 与集合中原有 Entry 的 key 相同（hashCode()返回值相等，通过 equals 比较也返回 true），新添加的 Entry 的 value 会将覆盖原来 Entry 的 value，但 key 不会有任何改变，因此如果向 HashSet 中添加一个已经存在的元素时，新添加的集合元素将不会被放入 HashMap中，原来的元素也不会有任何改变，这也就满足了 Set 中元素不重复的特性。</p><p>如果添加元素在 HashSet 中不存在的，则返回 true；如果添加的元素已经存在，返回 false。其原因在于 HashMap 的 put 方法。该方法在添加 key 不重复的键值对的时候，会返回 null。</p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十二）：SortedMap 源码分析</title>
      <link href="/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9ASortedMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9ASortedMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、SortedMap-简述"><a href="#1、SortedMap-简述" class="headerlink" title="1、SortedMap 简述"></a>1、SortedMap 简述</h2><p>SortedMap 接口<strong>扩展了 Map 接口</strong>并提供了有序的Map实现，SortedMap 的排序方式有<strong>两种</strong>：根据键值的自然顺序排序和指定比较器（Comparator）排序。插入有序的 SortedMap 的所有元素都必须实现Comparable接口</p><p>所有通用的有序映射实现类都应该提供四个“标准”构造函数：<br>🌂一个void（无参数）构造函数，它根据键的自然顺序创建一个空的有序映射。<br>🌂具有Comparator类型的单个参数的构造函数，它创建根据指定的比较器排序的空的有序映射。<br>🌂具有Map类型的单个参数的构造函数，它创建一个具有与其参数相同的 key-value 映射的新映射，并根据键的自然顺序进行排序。<br>🌂具有SortedMap类型的单个参数的构造函数，它创建一个新的有序映射，其具有相同的 key-value 映射和与输入有序映射相同的顺序。<br><img src="https://s1.ax1x.com/2020/04/04/GwUTot.png"></p><h2 id="2、SortedMap-类图"><a href="#2、SortedMap-类图" class="headerlink" title="2、SortedMap 类图"></a>2、SortedMap 类图</h2><p><img src="https://s1.ax1x.com/2020/04/04/GwUBL9.png"></p><p>🌂父接口:<br>Map&lt;K,V&gt;</p><p>🌂所有已知子接口:<br>ConcurrentNavigableMap&lt;K,V&gt;, NavigableMap&lt;K,V&gt;</p><p>🌂所有已知实现类:<br>ConcurrentSkipListMap, TreeMap</p><h2 id="3、SortedMap-方法说明"><a href="#3、SortedMap-方法说明" class="headerlink" title="3、SortedMap 方法说明"></a>3、SortedMap 方法说明</h2><table><thead><tr><th>Queue 方法</th><th>等价 Deque 方法</th></tr></thead><tbody><tr><td>Comparator&lt;? super K&gt; comparator()</td><td>回用于对此映射中的键进行排序的比较器;如果此映射使用其键的自然顺序，则返回null。</td></tr><tr><td>SortedMap&lt;K,V&gt; subMap(K fromKey, K toKey)</td><td>回此映射部分的视图，其键的范围从fromKey（包括）到 toKey（不包括）。 （如果fromKey和 toKey 相等，则返回的视图为空。）当尝试在返回的映射范围之外插入键时，将会抛出 IllegalArgumentException。</td></tr><tr><td>SortedMap&lt;K,V&gt; headMap(K toKey)</td><td>回此映射的部分视图，其键的范围小于 toKey。</td></tr><tr><td>SortedMap&lt;K,V&gt; tailMap(K fromKey)</td><td>回此映射的部分视图，其键的范围大于等于fromKey。</td></tr><tr><td>K firstKey()</td><td>回此映射中当前的第一个键。</td></tr><tr><td>K lastKey()</td><td>回此映射中当前的最后一个键。</td></tr><tr><td>Set keySet()</td><td>回此映射中所有键的 Set 视图。 set的迭代器按升序返回键。如果在对集合进行迭代时修改了映射（除了通过迭代器自己的remove操作），迭代的结果是未知的。 该集合支持元素删除，它支持通过 Iterator.remove，Set.remove，removeAll，retainAll 和 clear 操作从视图中删除相应的映射。 它不支持add或addAll操作。</td></tr><tr><td>Collection values()</td><td>回此映射中包含的值的Collection视图。 集合的迭代器以相应键的升序返回值。如果在对集合进行迭代时修改了映射（除了通过迭代器自己的remove操作），迭代的结果是未知的。 该集合支持元素删除，它支持通过 Iterator.remove，Set.remove，removeAll，retainAll 和 clear 操作从视图中删除相应的映射。 它不支持add或addAll操作。</td></tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td>返回此映射中包含的映射的Set&lt;Map.Entry&lt;K,V&gt;&gt;视图。 set的迭代器以升序键顺序返回条目。如果在对集合进行迭代时修改了映射（除了通过迭代器自己的remove操作），迭代的结果是未知的。 该集合支持元素删除，它支持通过 Iterator.remove，Set.remove，removeAll，retainAll 和 clear 操作从视图中删除相应的映射。 它不支持add或addAll操作。</td></tr></tbody></table><h2 id="4、SortedMap-应用示例"><a href="#4、SortedMap-应用示例" class="headerlink" title="4、SortedMap 应用示例"></a>4、SortedMap 应用示例</h2><p>以下示例需要使用的对象如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonDetail</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    LocalDate birthday;</span><br><span class="line">    String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PersonDetail</span><span class="params">(String name, LocalDate birthday, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name + <span class="string">&quot;, from &quot;</span> + <span class="built_in">this</span>.address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-1、SortedMap-构造函数示例"><a href="#4-1、SortedMap-构造函数示例" class="headerlink" title="4.1、SortedMap 构造函数示例"></a>4.1、SortedMap 构造函数示例</h3><h4 id="4-1-1、无参构造函数"><a href="#4-1-1、无参构造函数" class="headerlink" title="4.1.1、无参构造函数"></a>4.1.1、无参构造函数</h4><p>按照key的自然顺序排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//key的自然顺序排序</span></span><br><span class="line">        SortedMap&lt;String, PersonDetail&gt; personMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        personMap.put(<span class="string">&quot;zhangsan&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;张三&quot;</span>, LocalDate.of(<span class="number">1998</span>, <span class="number">6</span>, <span class="number">22</span>), <span class="string">&quot;小胡同3号&quot;</span>));</span><br><span class="line">        personMap.put(<span class="string">&quot;lisi&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;李四&quot;</span>, LocalDate.of(<span class="number">1996</span>, <span class="number">2</span>, <span class="number">2</span>), <span class="string">&quot;小胡同8号&quot;</span>));</span><br><span class="line">        personMap.put(<span class="string">&quot;wanger&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;王二&quot;</span>, LocalDate.of(<span class="number">2010</span>, <span class="number">12</span>, <span class="number">11</span>), <span class="string">&quot;小胡同28号&quot;</span>));</span><br><span class="line"></span><br><span class="line">        personMap.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lisi -&gt; 李四, from 小胡同<span class="number">8</span>号</span><br><span class="line">wanger -&gt; 王二, from 小胡同<span class="number">28</span>号</span><br><span class="line">zhangsan -&gt; 张三, from 小胡同<span class="number">3</span>号</span><br></pre></td></tr></table></figure><h4 id="4-1-2、具有-Comparator-的构造函数"><a href="#4-1-2、具有-Comparator-的构造函数" class="headerlink" title="4.1.2、具有 Comparator 的构造函数"></a>4.1.2、具有 Comparator 的构造函数</h4><p>我们编写一个lambda表达式来提供Comparator接口的compareTo实现。 假设我们希望按照key长度按降序对key进行排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//key的长度排序</span></span><br><span class="line">        SortedMap&lt;String, PersonDetail&gt; personMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((s1, s2) -&gt; s2.length() - s1.length());</span><br><span class="line">        personMap.put(<span class="string">&quot;zhangsan&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;张三&quot;</span>, LocalDate.of(<span class="number">1998</span>, <span class="number">6</span>, <span class="number">22</span>), <span class="string">&quot;小胡同3号&quot;</span>));</span><br><span class="line">        personMap.put(<span class="string">&quot;lisi&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;李四&quot;</span>, LocalDate.of(<span class="number">1996</span>, <span class="number">2</span>, <span class="number">2</span>), <span class="string">&quot;小胡同8号&quot;</span>));</span><br><span class="line">        personMap.put(<span class="string">&quot;wanger&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;王二&quot;</span>, LocalDate.of(<span class="number">2010</span>, <span class="number">12</span>, <span class="number">11</span>), <span class="string">&quot;小胡同28号&quot;</span>));</span><br><span class="line"></span><br><span class="line">        personMap.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">zhangsan -&gt; 张三, from 小胡同<span class="number">3</span>号</span><br><span class="line">wanger -&gt; 王二, from 小胡同<span class="number">28</span>号</span><br><span class="line">lisi -&gt; 李四, from 小胡同<span class="number">8</span>号</span><br></pre></td></tr></table></figure><h4 id="4-1-3、参数为-Map-类型的构造函数"><a href="#4-1-3、参数为-Map-类型的构造函数" class="headerlink" title="4.1.3、参数为 Map 类型的构造函数"></a>4.1.3、参数为 Map 类型的构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//普通map</span></span><br><span class="line">        Map&lt;String, PersonDetail&gt; generalMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        generalMap.put(<span class="string">&quot;lilei&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;李雷&quot;</span>, LocalDate.of(<span class="number">1994</span>, <span class="number">6</span>, <span class="number">22</span>), <span class="string">&quot;1号大街&quot;</span>));</span><br><span class="line">        generalMap.put(<span class="string">&quot;hanmeimei&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;韩梅梅&quot;</span>, LocalDate.of(<span class="number">1995</span>, <span class="number">2</span>, <span class="number">2</span>), <span class="string">&quot;2号大街&quot;</span>));</span><br><span class="line">        generalMap.put(<span class="string">&quot;zhangmeili&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;张美丽&quot;</span>, LocalDate.of(<span class="number">2010</span>, <span class="number">12</span>, <span class="number">11</span>), <span class="string">&quot;3号大街&quot;</span>));</span><br><span class="line">        <span class="comment">//普通map作为SortedMap构造函数的参数</span></span><br><span class="line">        SortedMap&lt;String, PersonDetail&gt; sortedMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(generalMap);</span><br><span class="line">        System.err.println(<span class="string">&quot;普通map作为SortedMap构造函数的参数：&quot;</span>);</span><br><span class="line">        sortedMap.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">普通map作为SortedMap构造函数的参数：</span><br><span class="line">hanmeimei -&gt; 韩梅梅, from <span class="number">2</span>号大街</span><br><span class="line">lilei -&gt; 李雷, from <span class="number">1</span>号大街</span><br><span class="line">zhangmeili -&gt; 张美丽, from <span class="number">3</span>号大街</span><br></pre></td></tr></table></figure><h4 id="4-1-4、参数为-SortedMap-类型的构造函数"><a href="#4-1-4、参数为-SortedMap-类型的构造函数" class="headerlink" title="4.1.4、参数为 SortedMap 类型的构造函数"></a>4.1.4、参数为 SortedMap 类型的构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定比较器的map</span></span><br><span class="line">        Map&lt;String, PersonDetail&gt; sortedComparetorMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((s1, s2) -&gt; s2.length() - s1.length());</span><br><span class="line">        sortedComparetorMap.put(<span class="string">&quot;lilei&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;李雷&quot;</span>, LocalDate.of(<span class="number">1994</span>, <span class="number">6</span>, <span class="number">22</span>), <span class="string">&quot;1号大街&quot;</span>));</span><br><span class="line">        sortedComparetorMap.put(<span class="string">&quot;hanmeimei&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;韩梅梅&quot;</span>, LocalDate.of(<span class="number">1995</span>, <span class="number">2</span>, <span class="number">2</span>), <span class="string">&quot;2号大街&quot;</span>));</span><br><span class="line">        sortedComparetorMap.put(<span class="string">&quot;zhangmeili&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;张美丽&quot;</span>, LocalDate.of(<span class="number">2010</span>, <span class="number">12</span>, <span class="number">11</span>), <span class="string">&quot;3号大街&quot;</span>));</span><br><span class="line">        </span><br><span class="line">        System.err.println(<span class="string">&quot;指定比较器的有序map作为SortedMap构造函数的参数：&quot;</span>);</span><br><span class="line">        SortedMap&lt;String, PersonDetail&gt; newMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(sortedComparetorMap);</span><br><span class="line">        newMap.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">指定比较器的有序map作为SortedMap构造函数的参数：</span><br><span class="line">hanmeimei -&gt; 韩梅梅, from <span class="number">2</span>号大街</span><br><span class="line">lilei -&gt; 李雷, from <span class="number">1</span>号大街</span><br><span class="line">zhangmeili -&gt; 张美丽, from <span class="number">3</span>号大街</span><br></pre></td></tr></table></figure><h3 id="4-2、SortedMap-方法示例"><a href="#4-2、SortedMap-方法示例" class="headerlink" title="4.2、SortedMap 方法示例"></a>4.2、SortedMap 方法示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        SortedMap&lt;String, PersonDetail&gt; personMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((s1, s2) -&gt; s2.length() - s1.length());</span><br><span class="line">        personMap.put(<span class="string">&quot;zhangsan&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;张三&quot;</span>, LocalDate.of(<span class="number">1998</span>, <span class="number">6</span>, <span class="number">22</span>), <span class="string">&quot;小胡同3号&quot;</span>));</span><br><span class="line">        personMap.put(<span class="string">&quot;lisi&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;李四&quot;</span>, LocalDate.of(<span class="number">1996</span>, <span class="number">2</span>, <span class="number">2</span>), <span class="string">&quot;小胡同8号&quot;</span>));</span><br><span class="line">        personMap.put(<span class="string">&quot;wanger&quot;</span>, <span class="keyword">new</span> <span class="title class_">PersonDetail</span>(<span class="string">&quot;王二&quot;</span>, LocalDate.of(<span class="number">2010</span>, <span class="number">12</span>, <span class="number">11</span>), <span class="string">&quot;小胡同28号&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;映射关系如下：===================&quot;</span>);</span><br><span class="line">        personMap.forEach((key, value) -&gt; System.out.println(key + <span class="string">&quot; -&gt; &quot;</span> + value));</span><br><span class="line">        System.out.println(<span class="string">&quot;===================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;entrySet:&quot;</span> + personMap.entrySet());</span><br><span class="line">        System.out.println(<span class="string">&quot;firstKey:&quot;</span> + personMap.firstKey());</span><br><span class="line">        System.out.println(<span class="string">&quot;lastKey:&quot;</span> + personMap.lastKey());</span><br><span class="line">        System.out.println(<span class="string">&quot;keySet:&quot;</span> + personMap.keySet());</span><br><span class="line">        System.out.println(<span class="string">&quot;values:&quot;</span> + personMap.values());</span><br><span class="line">        System.out.println(<span class="string">&quot;headMap:&quot;</span> + personMap.headMap(<span class="string">&quot;wanger&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;tailMap:&quot;</span> + personMap.tailMap(<span class="string">&quot;wanger&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">映射关系如下：===================</span><br><span class="line">zhangsan -&gt; 张三, from 小胡同<span class="number">3</span>号</span><br><span class="line">wanger -&gt; 王二, from 小胡同<span class="number">28</span>号</span><br><span class="line">lisi -&gt; 李四, from 小胡同<span class="number">8</span>号</span><br><span class="line">===================</span><br><span class="line">entrySet:[zhangsan=张三, from 小胡同<span class="number">3</span>号, wanger=王二, from 小胡同<span class="number">28</span>号, lisi=李四, from 小胡同<span class="number">8</span>号]</span><br><span class="line">firstKey:zhangsan</span><br><span class="line">lastKey:lisi</span><br><span class="line">keySet:[zhangsan, wanger, lisi]</span><br><span class="line">values:[张三, from 小胡同<span class="number">3</span>号, 王二, from 小胡同<span class="number">28</span>号, 李四, from 小胡同<span class="number">8</span>号]</span><br><span class="line">headMap(<span class="string">&quot;wanger&quot;</span>):&#123;zhangsan=张三, from 小胡同<span class="number">3</span>号&#125;</span><br><span class="line">tailMap(<span class="string">&quot;wanger&quot;</span>):&#123;wanger=王二, from 小胡同<span class="number">28</span>号, lisi=李四, from 小胡同<span class="number">8</span>号&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十一）：Map 源码分析</title>
      <link href="/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Map-简述"><a href="#1、Map-简述" class="headerlink" title="1、Map 简述"></a>1、Map 简述</h2><p>java.util.Map 接口表示<strong>键和值</strong>之间的<strong>映射对象</strong>。Map接口不是Collection接口的子类型。因此它的行为与其他集合类型略有不同。Map接口取代了传统的 Dictionary类，它是一个完全抽象的类而不是接口。</p><p>Map 接口具有以下几个特征：</p><p>🌂Map提供了三个集合视图，键集，键值映射集和值集合。</p><p>🌂Map 不能包含重复的键，每个键最多可以映射一个值。一些实现允许null键和null值，如HashMap和LinkedHashMap，但有些实现不允许，比如：TreeMap。</p><p>🌂Map 的顺序取决于具体的实现，例如 TreeMap 和LinkedHashMap 保证了元素的顺序，而 HashMap 则没有。</p><p>🌂Map 使用 hashCode 和equals 方法来获取和存放操作。 所以可变类不适合Map键。 如果 hashCode 或 equals 的值在put之后发生变化，则在get操作中将无法获得正确的值。</p><p>🌂AbstractMap 类提供了 Map 接口的主要实现，大多数Map实现类扩展了 AbstractMap 类并实现了所需的方法。</p><p>🌂当访问的值不存在的时候，方法就会抛出一个NoSuchElementException异常.</p><p>🌂当对象的类型和Map里元素类型不兼容的时候，就会抛出一个 ClassCastException异常。</p><p>🌂当在不允许使用Null对象的Map中使用Null对象，会抛出一个NullPointerException 异常。</p><p>🌂当尝试修改一个只读的Map时，会抛出一个UnsupportedOperationException异常。</p><p>🌂在Java中有两个常用的实现接口：Map 和 SortedMap，以及三个常用的实现类：HashMap，TreeMap 和 LinkedHashMap。</p><p><img src="https://s1.ax1x.com/2020/04/04/GwU4Ld.png"></p><h2 id="2、Map-类图"><a href="#2、Map-类图" class="headerlink" title="2、Map 类图"></a>2、Map 类图</h2><p><img src="https://s1.ax1x.com/2020/04/04/GwUbJf.png"></p><p><strong>已知Map子接口：</strong><br>🌂Bindings<br>🌂ConcurrentMap&lt;K,V&gt;<br>🌂ConcurrentNavigableMap&lt;K,V&gt;<br>🌂LogicalMessageContext<br>🌂MessageContext<br>🌂NavigableMap&lt;K,V&gt;<br>🌂SOAPMessageContext<br>🌂SortedMap&lt;K,V&gt;</p><p><strong>已知Map实现类：</strong><br>🌂AbstractMap<br>🌂Attributes<br>🌂AuthProvider<br>🌂ConcurrentHashMap<br>🌂ConcurrentSkipListMap<br>🌂EnumMap<br>🌂HashMap<br>🌂Hashtable<br>🌂IdentityHashMap<br>🌂LinkedHashMap<br>🌂PrinterStateReasons<br>🌂Properties<br>🌂Provider<br>🌂RenderingHints<br>🌂SimpleBindings<br>🌂TabularDataSupport<br>🌂TreeMap<br>🌂UIDefaults<br>🌂WeakHashMap</p><h2 id="3、Map-方法说明"><a href="#3、Map-方法说明" class="headerlink" title="3、Map 方法说明"></a>3、Map 方法说明</h2><table><thead><tr><th>Queue 方法</th><th>等价 Deque 方法</th></tr></thead><tbody><tr><td>nt size()</td><td>回此映射中键 - 值映射的数量。 如果映射数量大于 Integer.MAX_VALUE，则返回 Integer.MAX_VALUE。</td></tr><tr><td>oolean isEmpty()</td><td>此映射不包含键 - 值映射，则返回 true。</td></tr><tr><td>oolean containsKey(Object key)</td><td>果此映射包含指定键的映射，则返回 true。</td></tr><tr><td>oolean containsValue(Object value)</td><td>果此映射将一个或多个键映射到指定值，则返回 true。</td></tr><tr><td>get(Object key)</td><td>回指定键所映射的值；如果此映射不包含该键的映射关系，则返回 null。</td></tr><tr><td>put(K key, V value)</td><td>指定的值与此映射中的指定键相关联。 如果映射到先前包含键的映射，则旧值将替换为指定的值。 （当且仅当m.containsKey（k）返回true时。）</td></tr><tr><td>remove(Object key)</td><td>果存在键，则从该映射中移除键的映射。换句话说，如果此映射包含键 k 到值 v 的映射，使得（key &#x3D;&#x3D; null？k &#x3D;&#x3D; null：key.equals（k）），则删除该映射。</td></tr><tr><td>oid putAll(Map&lt;? extends K,? extends V&gt; m)</td><td>指定Map集合中的所有映射复制到当前Map集合，此调用的效果等同于在当前Map上调用put（k，v）的效果。 如果在操作过程中修改了指定的Map，则此操作的行为是不确定的。</td></tr><tr><td>oid clear()</td><td>Map映射中删除所有映射。</td></tr><tr><td>et keySet()</td><td>回此映射中包含的键的Set视图。 因此对Map的更改将反映在集合中，反之亦然。 如果在对集合进行迭代时，修改了映射（除了通过迭代器自己的remove操作），迭代的结果是未知的。 该集合支持元素删除，它通过 Iterator.remove，Set.remove，removeAll，retainAll和clear操作从Map中删除相应的映射, 它不支持add或addAll操作。</td></tr><tr><td>ollection values()</td><td>回此映射中包含的值的Collection视图。 如果在对集合进行迭代时修改了映射（除了通过迭代器自己的remove操作），迭代的结果是未知的。 该集合支持元素删除，它通过Iterator.remove，Collection.remove，removeAll，retainAll和clear操作从Map中删除相应的映射。 它不支持add或addAll操作。</td></tr><tr><td>et&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</td><td>回此映射中包含的映射的Set视图。 如果在对集合进行迭代时修改了映射（除非通过迭代器自己的remove操作，或者通过迭代器返回的映射条目上的setValue操作），迭代的结果是未可知的。 该集支持元素删除，它通过 Iterator.remove，Set.remove，removeAll，retainAll和clear操作从Map中删除相应的映射。 它不支持add或addAll操作。</td></tr><tr><td>oolean equals(Object o)</td><td>指定对象与此映射进行相等性比较。 如果给定对象也是一个映射，并且两个映射表示相同的映射，则返回true。 也就是说，如果 m1.entrySet().equals(m2.entrySet())，则两个映射m1和m2表示相同的映射。</td></tr><tr><td>nt hashCode()</td><td>回此映射的哈希码值。 映射的哈希码被定义为映射的 entrySet（）视图中每个条目的哈希码的总和。 这确保 m1.equals（m2）也就意味着 m1.hashCode（）&#x3D;&#x3D; m2.hashCode（）。</td></tr></tbody></table><h2 id="4、JDK-1-8-新增的默认实现方法如下"><a href="#4、JDK-1-8-新增的默认实现方法如下" class="headerlink" title="4、JDK 1.8 新增的默认实现方法如下"></a>4、JDK 1.8 新增的默认实现方法如下</h2><p><strong>default V getOrDefault(Object key,V defaultValue)</strong><br>返回指定键映射到的值，如果此映射不包含键的映射，则返回defaultValue。</p><p><strong>default void forEach(BiConsumer&lt;? super K,? super V&gt; action)</strong><br>对此映射中的每个条目执行给定操作，直到处理完所有条目或操作引发异常。 除非实现类另有指定，否则将按迭代的顺序执行操作，操作抛出的异常将返回给调用者。<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;K, V&gt; entry : map.entrySet())</span><br><span class="line">     action.accept(entry.getKey(), entry.getValue());</span><br></pre></td></tr></table></figure></p><p><strong>default void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)</strong><br>将每个条目的值替换为在该条目上调用给定函数的结果，直到所有条目都已处理或函数抛出异常。 函数抛出的异常将转发给调用者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;K, V&gt; entry : map.entrySet())</span><br><span class="line">    entry.setValue(function.apply(entry.getKey(), entry.getValue()));</span><br></pre></td></tr></table></figure><p><strong>default V putIfAbsent(K key,V value)</strong><br>如果指定的键尚未与值关联（或映射为null），则将其与给定值关联并返回null，否则返回当前值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">V</span> <span class="variable">v</span> <span class="operator">=</span> map.get(key);</span><br><span class="line"><span class="keyword">if</span> (v == <span class="literal">null</span>)</span><br><span class="line">    v = map.put(key, value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> v;</span><br></pre></td></tr></table></figure><p><strong>default boolean remove(Object key, Object value)</strong><br>仅当指定键映射到指定值时才删除该条目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), value)) &#123;</span><br><span class="line">    map.remove(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>default boolean replace(K key, V oldValue,V newValue)</strong><br>仅当前映射到指定值时，才替换指定键的条目。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (map.containsKey(key) &amp;&amp; Objects.equals(map.get(key), value)) &#123;</span><br><span class="line">     map.put(key, newValue);</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><strong>default V replace(K key,V value)</strong><br>仅当指定键映射到某个值时才替换该条目的条目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (map.containsKey(key)) &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><strong>default V computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)</strong><br>如果指定的键尚未与值关联（或映射为null），则尝试使用给定的映射函数计算其值，并将其输入此映射，除非为null。</p><p>如果函数返回null，则不记录映射。 如果函数本身抛出（未经检查的）异常，则重新抛出异常，并且不记录映射。</p><p>最常见的用法是构造一个新对象，用作初始映射值或记录结果，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">Value</span>(f(k)));</span><br></pre></td></tr></table></figure><p>或者实现一个多值映射，Map &lt;K，Collection &gt;，支持每个键的多个值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.computeIfAbsent(key, k -&gt; <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;V&gt;()).add(v);</span><br></pre></td></tr></table></figure><p>默认实现等效于此映射的以下步骤，然后返回当前值，如果不存在则返回null：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (map.get(key) == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">V</span> <span class="variable">newValue</span> <span class="operator">=</span> mappingFunction.apply(key);</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="literal">null</span>)</span><br><span class="line">        map.put(key, newValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>default V computeIfPresent(K key,BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</strong><br>如果指定键的值存在且为非null，则尝试在给定键及其当前映射值的情况下计算新映射。如果函数返回null，则删除映射。 如果函数本身抛出（未经检查的）异常，则重新抛出异常，并保持当前映射不变。<br>默认实现等效于对此映射执行以下步骤，然后返回当前值，如果不存在则返回null：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (map.get(key) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">    <span class="type">V</span> <span class="variable">newValue</span> <span class="operator">=</span> remappingFunction.apply(key, oldValue);</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="literal">null</span>)</span><br><span class="line">        map.put(key, newValue);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        map.remove(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>default V compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)</strong><br>尝试计算指定键及其当前映射值的映射（如果没有当前映射，则为null）。<br>例如，要创建或追加 字符串 msg 到值映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.compute(key, (k, v) -&gt; (v == <span class="literal">null</span>) ? msg : v.concat(msg))</span><br></pre></td></tr></table></figure><p>如果函数返回null，则删除映射。 如果函数本身抛出（未经检查的）异常，则重新抛出异常，并保持当前映射不变。</p><p>默认实现等效于为此映射执行以下步骤，然后返回当前值，如果不存在则返回null：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> map.get(key);</span><br><span class="line"> <span class="type">V</span> <span class="variable">newValue</span> <span class="operator">=</span> remappingFunction.apply(key, oldValue);</span><br><span class="line"> <span class="keyword">if</span> (oldValue != <span class="literal">null</span> ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="literal">null</span>)</span><br><span class="line">       map.put(key, newValue);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       map.remove(key);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="literal">null</span>)</span><br><span class="line">       map.put(key, newValue);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>default V merge(K key,V value,BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)</strong></p><p>如果指定的键尚未与值关联或与null关联，则将其与给定的非空值关联。 否则，将相关值替换为给定重映射函数的结果，或者如果结果为null则删除。 当组合密钥的多个映射值时，该方法可以是有用的。</p><p><strong>例如</strong>，要创建或附加String msg 到值映射：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.merge(key, msg, String::concat)</span><br></pre></td></tr></table></figure><p>如果函数返回null，则删除映射。 如果函数本身抛出（未经检查的）异常，则重新抛出异常，并保持当前映射不变。</p><p>默认实现等效于为此映射执行以下步骤，然后返回当前值，如果不存在则返回null：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> V <span class="title function_">merge</span><span class="params">(K key, V value,</span></span><br><span class="line"><span class="params">            BiFunction&lt;? <span class="built_in">super</span> V, ? <span class="built_in">super</span> V, ? extends V&gt; remappingFunction)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(remappingFunction);</span><br><span class="line">        Objects.requireNonNull(value);</span><br><span class="line">        <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> get(key);</span><br><span class="line">        <span class="type">V</span> <span class="variable">newValue</span> <span class="operator">=</span> (oldValue == <span class="literal">null</span>) ? value :</span><br><span class="line">                   remappingFunction.apply(oldValue, value);</span><br><span class="line">        <span class="keyword">if</span>(newValue == <span class="literal">null</span>) &#123;</span><br><span class="line">            remove(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            put(key, newValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（十）：Deque 源码分析</title>
      <link href="/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9ADeque%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9ADeque%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Deque-简述"><a href="#1、Deque-简述" class="headerlink" title="1、Deque 简述"></a>1、Deque 简述</h2><p>线性集合，支持两端插入和移除元素。名称deque是“<strong>双端队列</strong>（double ended queue）”的缩写，通常发音为“deck”。</p><p>大多数Deque实现对它们可能<strong>包含的元素数量没有固定限制</strong>，但是此接口支持容量限制的deques以及没有固定大小限制的deques。此接口定义了访问双端队列两端元素的方法，提供了插入，移除和检索元素的方法。这些方法中的每一种都以两种形式存在：一种在操作失败时<strong>抛出异常</strong>，另一种返回特殊值（<strong>null或false</strong>，具体取决于操作）。 后一种形式的插入操作专门设计用于容量限制的Deque实现， 在大多数实现中，插入操作不会失败。</p><p><strong>上述中三种操作涉及十二种方法总结在下表中：</strong><br><img src="https://s1.ax1x.com/2020/04/04/GwO6KK.png"></p><h2 id="2、Deque-类图"><a href="#2、Deque-类图" class="headerlink" title="2、Deque 类图"></a>2、Deque 类图</h2><p><img src="https://s1.ax1x.com/2020/04/04/GwUsd1.png"></p><p>🌂父接口： Collection, Iterable, Queue</p><p>🌂子接口： lockingDeque</p><p>🌂实现类： ArrayDeque, ConcurrentLinkedDeque, LinkedBlockingDeque, LinkedList</p><p>此接口<strong>扩展</strong>了Queue接口。 当deque用作队列时，会产生FIFO（<strong>先进先出</strong>）行为。元素在<strong>双端队列的末尾添加并队头开始删除</strong>。</p><p>从 Queue 接口继承的方法与 Deque 完全等效的方法，如下表所示：</p><p>**  Queue和Deque方法的比较**</p><table><thead><tr><th>Queue 方法</th><th>等价 Deque 方法</th></tr></thead><tbody><tr><td>add(e)</td><td>addLast(e)</td></tr><tr><td>offer(e)</td><td>offerLast(e)</td></tr><tr><td>remove()</td><td>removeFirst()</td></tr><tr><td>poll()</td><td>pollFirst()</td></tr><tr><td>element()</td><td>getFirst()</td></tr><tr><td>peek()</td><td>peekFirst()</td></tr></tbody></table><p>Deques也可以用作LIFO（<strong>后进先出</strong>）<strong>堆栈</strong>。 应优先使用此接口，而不是传统的Stack类。当deque用作堆栈时，元素将从双端队列的队头弹出元素。</p><p>堆栈方法与Deque完全等效的方法，如下表所示：<br><strong>Stack和Deque方法的比较</strong></p><table><thead><tr><th>Stack 方法</th><th>等价 Deque 方法</th></tr></thead><tbody><tr><td>push(e)</td><td>addFirst(e)</td></tr><tr><td>pop()</td><td>removeFirst()</td></tr><tr><td>peek()</td><td>peekFirst()</td></tr></tbody></table><p>此接口提供了两种方法来删除内部元素，removeFirstOccurrence和removeLastOccurrence。</p><p><strong>与List接口不同，此接口不支持对元素的索引访问。</strong></p><h2 id="3、Deque-方法概述"><a href="#3、Deque-方法概述" class="headerlink" title="3、Deque 方法概述"></a>3、Deque 方法概述</h2><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>void addFirst(E e)</td><td>如果可以在不违反容量限制的情况下立即插入指定元素，则在此双端队列的前面插入指定元素，如果当前没有可用空间则抛出IllegalStateException。当使用容量限制的双端队列时，通常最好使用方法offerFirst（E）。</td></tr><tr><td>void addLast(E e)</td><td>如果可以在不违反容量限制的情况下立即插入指定元素，则在此双端队列的末尾插入指定元素，如果当前没有可用空间则抛出IllegalStateException。 当使用容量限制的双端队列时，通常最好使用方法offerLast（E）。</td></tr><tr><td>boolean offerFirst(E e)</td><td>将指定元素插入此双端队列的前面，除非它违反容量限制。 使用容量限制的双端队列时，此方法通常优于addFirst（E）方法，如果元素已添加到此双端队列，则返回true，否则返回false。</td></tr><tr><td>boolean offerLast(E e)</td><td>在此双端队列的末尾插入指定的元素，除非它违反容量限制。 使用容量限制的双端队列时，此方法通常优于addLast（E）方法，，如果元素已添加到此双端队列，则返回true，否则返回false。</td></tr><tr><td>E removeFirst()</td><td>检索并删除此双端队列的第一个元素。 此方法与pollFirst的不同之处仅在于，如果此双端队列为空，则抛出异常。</td></tr><tr><td>E removeLast()</td><td>检索并删除此双端队列的最后一个元素。 此方法与pollLast的不同之处仅在于，如果此双端队列为空，则会抛出异常。</td></tr><tr><td>E pollFirst()</td><td>检索并删除此双端队列的第一个元素，如果此双端队列为空，则返回null。</td></tr><tr><td>E pollLast（）</td><td>检索并删除此双端队列的最后一个元素，如果此双端队列为空，则返回null。</td></tr><tr><td>E getFirst()</td><td>检索但不删除此双端队列的第一个元素。 此方法与peekFirst的不同之处仅在于，如果此双端队列为空，则抛出异常。</td></tr><tr><td>E getLast()</td><td>检索但不删除此双端队列的最后一个元素。 此方法与peekLast的不同之处仅在于，如果此双端队列为空，则会抛出异常。</td></tr><tr><td>E peekFirst()</td><td>检索但不删除此双端队列的第一个元素，如果此双端队列为空，则返回null。</td></tr><tr><td>E peekLast()</td><td>检索但不删除此双端队列的最后一个元素，如果此双端队列为空，则返回null。</td></tr><tr><td>boolean removeFirstOccurrence(Object o)</td><td>从此双端队列中删除第一次出现的指定元素。 如果双端队列不包含该元素，则不会更改。如果此双端队列包含指定的元素，则返回true。</td></tr><tr><td>boolean removeLastOccurrence(Object o)</td><td>从此双端队列中删除最后一次出现的指定元素。 如果双端队列不包含该元素，则不会更改。如果此双端队列包含指定的元素，则返回true。</td></tr><tr><td>boolean add(E e)</td><td>如果可以在不违反容量限制的情况下立即执行此操作，则将指定的元素插入此双端队列的尾部，成功时返回true，如果当前没有空间则抛出IllegalStateException。 当使用容量限制的双端队列时，通常优先使用 offer。此方法等同于addLast（E）。</td></tr><tr><td>boolean offer(E e)</td><td>如果可以在不违反容量限制的情况下立即执行此操作，则将指定的元素插入此双端队列的尾部，成功时返回true，如果当前没有可用空间则返回false。 使用容量限制的双端队列时，此方法通常优于add（E）方法，此方法相当于offerLast（E）。</td></tr><tr><td>E remove()</td><td>检索并删除此双端队列表示的队列的头部（换句话说，此双端队列的第一个元素）。 此方法与poll的不同之处仅在于，如果此双端队列为空，则抛出异常。此方法等同于removeFirst（）。</td></tr><tr><td>E poll()</td><td>检索并删除此双端队列的头部（换句话说，此双端队列的第一个元素），如果此双端队列为空，则返回null。此方法等同于pollFirst（）。</td></tr><tr><td>E element()</td><td>检索但不删除此双端队列表示的队列的头部（换句话说，此双端队列的第一个元素）。 此方法与peek的不同之处仅在于，如果此双端队列为空，则抛出异常。此方法等同于getFirst（）。</td></tr><tr><td>E peek()</td><td>检索但不删除此双端队列表示的队列的头部（换句话说，此双端队列的第一个元素），如果此双端队列为空，则返回null。此方法等效于peekFirst（）。</td></tr><tr><td>void push(E e)</td><td>如果可以在不违反容量限制的情况下立即执行此操作，则将元素压入到，在此双端队列的头部，如果当前没有可用空间，则抛出IllegalStateException。此方法等同于addFirst（E）。</td></tr><tr><td>E pop()</td><td>从此双端队列表示的堆栈中弹出一个元素。 换句话说，删除并返回此双端队列的第一个元素。此方法等同于removeFirst（）。</td></tr><tr><td>boolean remove(Object o)</td><td>从此双端队列中删除第一次出现的指定元素。 如果双端队列不包含该元素，则不会更改。 如果此双端队列包含指定的元素，则返回true。此方法等同于removeFirstOccurrence（Object）。</td></tr><tr><td>boolean contains(Object o)</td><td>如果此双端队列包含指定的元素，则返回true。</td></tr><tr><td>int size()</td><td>返回此双端队列中的元素数。</td></tr><tr><td>Iterator iterator()</td><td>以适当的顺序返回此双端队列中元素的迭代器。 元素将从第一个（头部）到最后一个（尾部）按顺序返回。</td></tr><tr><td>Iterator descendingIterator()</td><td>以相反的顺序返回此双端队列中元素的迭代器。 元素将按从最后（尾部）到第一个（头部）的顺序返回。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（九）：Queue 源码分析</title>
      <link href="/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AQueue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AQueue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Queue-简述1、Queue-简述"><a href="#1、Queue-简述1、Queue-简述" class="headerlink" title="1、Queue 简述1、Queue 简述"></a>1、Queue 简述1、Queue 简述</h2><p><strong>队列</strong>是一种<strong>特殊的线性表</strong>，它只允许在表的<strong>前端</strong>（front）进行<strong>删除</strong>操作，而在表的<strong>后端</strong>（rear）进行<strong>插入</strong>操作。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><p>Java Queue是java.util包中提供的接口，并扩展了java.util.Collection接口。<br>就像Java List一样，Java Queue是有序元素（或对象）的集合，但它以不同方式执行插入和删除操作。 在处理这些元素之前，我们可以使用Queue存储元素。</p><p><img src="https://s1.ax1x.com/2020/04/04/GwURzD.png"></p><p>🌂java.util.Queue接口是java.util.Collection接口的子类型。</p><p>🌂就像现实世界的排队（例如，在银行或ATM中）一样，Queue在队列的末尾插入元素并从队列的开头删除元素。</p><p>🌂Java Queue遵循FIFO顺序来插入和删除它的元素。 FIFO代表先入先出。</p><p>🌂Java Queue支持Collection接口的所有方法。</p><p>🌂最常用的Queue实现是LinkedList，ArrayBlockingQueue和PriorityQueue。</p><p>🌂BlockingQueues不接受null元素。 如果我们执行任何与null相关的操作，它将抛出NullPointerException。</p><p>🌂BlockingQueues用于实现基于生产者&#x2F;消费者的应用程序。</p><p>🌂BlockingQueues是线程安全的。</p><p>🌂java.util包中可用的所有队列都是无界队列，java.util.concurrent包中可用的队列是有界队列。</p><p>🌂所有Deques都不是线程安全的。</p><p>🌂ConcurrentLinkedQueue 是一个基于链表的无界线程安全队列。</p><p>🌂除了Deques之外，所有队列都支持在队列尾部插入并在队列的头部删除。</p><p>🌂Deques 是双端队列，它支持在队列两端插入和移除元素。</p><p><img src="https://s1.ax1x.com/2020/04/04/GwUgJK.png"></p><h2 id="2、Queue-类图"><a href="#2、Queue-类图" class="headerlink" title="2、Queue 类图"></a>2、Queue 类图</h2><p><img src="https://s1.ax1x.com/2020/04/04/GwUodI.jpg"><br>Java Queue 接口<strong>扩展了 Collection</strong> 接口。 Collection 接口扩展了 Iterable 接口。 一些常用的Queue实现类是 LinkedList，PriorityQueue，ArrayBlockingQueue，DelayQueue，LinkedBlockingQueue，PriorityBlockingQueue 等.AbstractQueue 提供了 Queue 接口主要方法的实现，以减少实现 Queue 的工作量。</p><h2 id="3、Queue-方法简述"><a href="#3、Queue-方法简述" class="headerlink" title="3、Queue 方法简述"></a>3、Queue 方法简述</h2><p>队列通常（但不一定）以FIFO（<strong>先进先出</strong>）方式对元素进行排序。例外的是优先级队列，它根据提供的比较器对元素进行排序，或者元素的自然排序，以及LIFO队列（或<strong>堆栈</strong>），它们对元素LIFO（<strong>后进先出</strong>）进行排序。</p><p>🌂无论使用什么顺序，队列的头部都是通过调用remove（）或poll（）来删除的元素。 在FIFO队列中，所有新元素都插入队列的尾部。</p><p>其他类型的队列可能使用不同的放置规则。 每个Queue实现都必须指定其排序属性。</p><p>Queue接口<strong>不定义阻塞队列</strong>方法，这在并发编程中很常见。 这些等待元素出现或空间可用的方法在BlockingQueue接口中定义，该接口扩展了此接口。</p><p>队列实现通常<strong>不允许插入null元素</strong>，尽管某些实现（如LinkedList）不禁止插入null。 即使在允许它的实现中，也不应将null插入到Queue中，因为null也被poll方法用作特殊返回值，以指示队列不包含任何元素。</p><p>下面我们将讨论一些有用且经常使用的 Java Queue 方法：</p><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>如果可以在不违反容量限制的情况下立即执行此操作，则将指定的元素插入此队列，成功时返回true，如果当前没有可用空间则抛出IllegalStateException。</td></tr><tr><td>boolean offer(E e)</td><td>如果可以在不违反容量限制的情况下立即执行此操作，则将指定的元素插入此队列，成功时返回true，如果当前没有可用空间则返回 false。</td></tr><tr><td>E remove()</td><td>检索并删除此队列的头部元素。 此方法与poll的不同之处仅在于，如果此队列为空，则抛出异常 NoSuchElementException。</td></tr><tr><td>E poll()</td><td>检索并删除此队列的头部，如果此队列为空，则返回null。</td></tr><tr><td>E element()</td><td>检索但不删除此队列的头部。 此方法与peek的不同之处仅在于，如果此队列为空，则抛出异常 NoSuchElementException。</td></tr><tr><td>E peek()</td><td>检索但不移除此队列的头部，如果此队列为空，则返回null。</td></tr></tbody></table><h2 id="4、Java-Array-to-Queue"><a href="#4、Java-Array-to-Queue" class="headerlink" title="4、Java Array to Queue"></a>4、Java Array to Queue</h2><p>在这里，我们将通过一个简单的例子演示如何使用“Collections.addAll（）”方法将Java数组转换为Queue。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">       String nums[] = &#123;<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;four&quot;</span>, <span class="string">&quot;five&quot;</span>&#125;;</span><br><span class="line">       Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       Collections.addAll(queue, nums);</span><br><span class="line">       System.out.println(queue);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[one, two, three, four, five]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、Java-Queue-to-Array"><a href="#5、Java-Queue-to-Array" class="headerlink" title="5、Java Queue to Array"></a>5、Java Queue to Array</h2><p>在这里，我们将通过一个简单的例子演示如何使用“<strong>toArray（）</strong>”将Java队列转换为Java数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;three&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;four&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;five&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String strArray[] = queue.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[queue.size()]);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列转换为数组：&quot;</span> + Arrays.toString(strArray));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">队列转换为数组：[one, two, three, four, five]</span><br></pre></td></tr></table></figure><h2 id="6、Java队列常用操作"><a href="#6、Java队列常用操作" class="headerlink" title="6、Java队列常用操作"></a>6、Java队列常用操作</h2><p>Java Queue支持Collection接口支持的<strong>所有</strong>操作以及更多操作。 它以两种形式支持几乎所有操作：</p><p>🌂一种在操作失败时抛出异常，另一种返回特殊值（null或false，具体取决于操作）。</p><p>🌂一种形式的插入操作专门用于容量限制的队列实现，在大多数实现中，插入操作不会失败。</p><p>队列方法的摘要</p><table><thead><tr><th>Operation（操作）</th><th>Throws exception（抛出异常）</th><th>Returns special value（返回指定值）</th></tr></thead><tbody><tr><td>Insert（插入）</td><td>add(e)</td><td>offer(e)</td></tr><tr><td>Remove（删除）</td><td>remove()</td><td>poll()</td></tr><tr><td>Examine（检查）</td><td>element()</td><td>peek()</td></tr></tbody></table><p>🌂🌂🌂接下来我们将用示例演示每种操作方法的使用。</p><h3 id="6-1、Java-队列插入操作"><a href="#6-1、Java-队列插入操作" class="headerlink" title="6.1、Java 队列插入操作"></a>6.1、Java 队列插入操作</h3><h4 id="6-1-1、add"><a href="#6-1-1、add" class="headerlink" title="6.1.1、add()"></a>6.1.1、add()</h4><p><strong>add（）</strong>操作用于将新元素插入队列。 如果它成功执行插入操作，则返回“<strong>true</strong>”值。 否则抛出<strong>java.lang.IllegalStateException</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.add(<span class="string">&quot;one&quot;</span>));</span><br><span class="line">        System.out.println(queue.add(<span class="string">&quot;two&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;队列中的元素：&quot;</span>+queue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">队列中的元素：[one, two]</span><br></pre></td></tr></table></figure><p>由于我们的队列仅限于两个元素，当我们尝试使用BlockingQueue.add（）添加第三个元素时，它会抛出异常，如上所示。</p><h4 id="6-1-2、offer"><a href="#6-1-2、offer" class="headerlink" title="6.1.2、offer()"></a>6.1.2、offer()</h4><p>offer（）操作用于将新元素插入队列。 如果它成功执行插入操作，则返回“true”值。 否则返回“false”值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;one&quot;</span>));</span><br><span class="line">        System.out.println(queue.offer(<span class="string">&quot;two&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;队列中的元素：&quot;</span>+queue);</span><br><span class="line">        System.out.println(<span class="string">&quot;队列已满，再次offer元素：&quot;</span>+queue.offer(<span class="string">&quot;three&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">队列中的元素：[one, two]</span><br><span class="line">队列已满，再次offer元素：<span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2、Java-队列删除操作"><a href="#6-2、Java-队列删除操作" class="headerlink" title="6.2、Java 队列删除操作"></a>6.2、Java 队列删除操作</h3><h4 id="6-2-1、remove"><a href="#6-2-1、remove" class="headerlink" title="6.2.1、remove()"></a>6.2.1、remove()</h4><p><strong>remove（）</strong>操作用于从队列头部删除元素。 如果它成功执行删除操作，则<strong>返回队列的head元素</strong>。 否则抛出<strong>java.util.NoSuchElementException</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       queue.offer(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">       queue.offer(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;队列中的元素：&quot;</span> + queue);</span><br><span class="line">       System.out.println(<span class="string">&quot;删除第一个元素：&quot;</span> + queue.remove());</span><br><span class="line">       System.out.println(<span class="string">&quot;删除第二个元素：&quot;</span> + queue.remove());</span><br><span class="line">       System.out.println(<span class="string">&quot;删除第三个元素：&quot;</span> + queue.remove());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">队列中的元素：[one, two]</span><br><span class="line">删除第一个元素：one</span><br><span class="line">删除第二个元素：two</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.NoSuchElementException</span><br><span class="line">at java.util.LinkedList.removeFirst(LinkedList.java:<span class="number">270</span>)</span><br><span class="line">at java.util.LinkedList.remove(LinkedList.java:<span class="number">685</span>)</span><br><span class="line">at com.lkf.collection.queue.QueueRemoveOperation.main(QueueRemoveOperation.java:<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>由于我们的队列只有两个元素，当我们尝试第三次调用remove（）方法时，它会抛出一个<strong>异常</strong>，如上所示。</p><h4 id="6-2-2、poll"><a href="#6-2-2、poll" class="headerlink" title="6.2.2、poll()"></a>6.2.2、poll()</h4><p><strong>poll（）</strong>操作用于从队列头部删除元素。 如果它成功执行删除操作，则<strong>返回队列的head元素</strong>。 否则返回“<strong>null</strong>”值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       queue.offer(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">       queue.offer(<span class="string">&quot;two&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;队列中的元素：&quot;</span> + queue);</span><br><span class="line">       System.out.println(<span class="string">&quot;删除第一个元素：&quot;</span> + queue.poll());</span><br><span class="line">       System.out.println(<span class="string">&quot;删除第二个元素：&quot;</span> + queue.poll());</span><br><span class="line">       System.out.println(<span class="string">&quot;删除第三个元素：&quot;</span> + queue.poll());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">队列中的元素：[one, two]</span><br><span class="line">删除第一个元素：one</span><br><span class="line">删除第二个元素：two</span><br><span class="line">删除第三个元素：<span class="literal">null</span></span><br></pre></td></tr></table></figure><p>由于我们的队列只有两个元素，当我们尝试第三次调用poll（）方法时，它返回null值，如上所示。</p><h3 id="6-3、Java-队列检索操作"><a href="#6-3、Java-队列检索操作" class="headerlink" title="6.3、Java 队列检索操作"></a>6.3、Java 队列检索操作</h3><h4 id="6-3-1、element"><a href="#6-3-1、element" class="headerlink" title="6.3.1、element()"></a>6.3.1、element()</h4><p><strong>element（）</strong>操作用于从队列头部检索元素，而不删除它。 如果它成功执行检查操作，则<strong>返回队列的head元素</strong>。 否则抛出<strong>java.util.NoSuchElementException</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(queue.element());</span><br><span class="line">        System.out.println(queue);</span><br><span class="line">        queue.clear();</span><br><span class="line">        System.out.println(queue.element());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">one</span><br><span class="line">[one]</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.NoSuchElementException</span><br><span class="line">at java.util.LinkedList.getFirst(LinkedList.java:<span class="number">244</span>)</span><br><span class="line">at java.util.LinkedList.element(LinkedList.java:<span class="number">663</span>)</span><br><span class="line">at com.lkf.collection.queue.QueueElementOperation.main(QueueElementOperation.java:<span class="number">21</span>)</span><br></pre></td></tr></table></figure><p>如果我们尝试在空Queue上调用element（）方法，它会抛出异常，如上所示。</p><h4 id="6-3-2、peek"><a href="#6-3-2、peek" class="headerlink" title="6.3.2、peek()"></a>6.3.2、peek()</h4><p><strong>peek（）</strong>操作用于从队列头部检索元素，而不删除它。 如果它成功执行检查操作，则<strong>返回队列的head元素</strong>。 否则返回<strong>null</strong>值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">       Queue&lt;String&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">       queue.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line">       System.out.println(queue.peek());</span><br><span class="line">       System.out.println(queue);</span><br><span class="line">       queue.clear();</span><br><span class="line">       System.out.println(queue.peek());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one</span><br><span class="line">[one]</span><br><span class="line"><span class="literal">null</span></span><br></pre></td></tr></table></figure><p>如果我们尝试在空Queue上调用peek（）方法，它将返回null值，但不会抛出异常，如上所示。</p><h3 id="6-4、Java-队列常用操作方法的区别"><a href="#6-4、Java-队列常用操作方法的区别" class="headerlink" title="6.4、Java 队列常用操作方法的区别"></a>6.4、Java 队列常用操作方法的区别</h3><h4 id="6-4-1、add-与-offer-区别"><a href="#6-4-1、add-与-offer-区别" class="headerlink" title="6.4.1、add 与 offer 区别"></a>6.4.1、add 与 offer 区别</h4><p>add 和 offer 方法都是向队列中添加一个元素。<br>当一个大小受限制的队列满时，使用 add 方法将会抛出一个 unchecked 异常；使用 offer 方法会返回 false。</p><h4 id="6-4-2、remove-与-poll-区别"><a href="#6-4-2、remove-与-poll-区别" class="headerlink" title="6.4.2、remove 与 poll 区别"></a>6.4.2、remove 与 poll 区别</h4><p>🌂remove() 和 poll() 方法都是删除并返回队列头部的第一个元素。确切地说，从队列中删除哪个元素是队列排序策略的一个功能，该策略因实现而异。<br>🌂remove（）和 poll（）方法的不同之处仅在于队列为空时的行为：remove（）方法抛出异常，而poll（）方法返回null。</p><h4 id="6-4-3、element-与-peek-区别"><a href="#6-4-3、element-与-peek-区别" class="headerlink" title="6.4.3、element 与 peek 区别"></a>6.4.3、element 与 peek 区别</h4><p>element（）和 peek（）方法返回但不删除队列的头部元素。与 remove() 方法类似，在队列为空时， element() 抛出一个异常，而 peek() 返回 null。</p><h2 id="7、Java-队列分类"><a href="#7、Java-队列分类" class="headerlink" title="7、Java 队列分类"></a>7、Java 队列分类</h2><p>除了以下队列的分类，还有些队列是 Deques，有些队列是PriorityQueues。另外，java.util 包中可用的所有队列都是无界队列，java.util.concurrent 包中可用的队列都是有界队列。</p><h3 id="7-1、有界队列（Bounded-Queues）-和-无界队列（Unbounded-Queues）"><a href="#7-1、有界队列（Bounded-Queues）-和-无界队列（Unbounded-Queues）" class="headerlink" title="7.1、有界队列（Bounded Queues） 和 无界队列（Unbounded Queues）"></a>7.1、有界队列（Bounded Queues） 和 无界队列（Unbounded Queues）</h3><p>在Java中，我们可以找到很多 Queue 实现。 我们可以将它们大致分为以下两种类型：<br>有界队列 和 无界队列</p><h4 id="7-1-1、有界队列（Bounded-Queues）"><a href="#7-1-1、有界队列（Bounded-Queues）" class="headerlink" title="7.1.1、有界队列（Bounded Queues）"></a>7.1.1、有界队列（Bounded Queues）</h4><p>有界队列是有容量限制的队列，这意味着我们需要在创建时设置队列的最大大小。 例如：ArrayBlockingQueue。</p><h4 id="7-1-2、无界队列（Unbounded-Queues）"><a href="#7-1-2、无界队列（Unbounded-Queues）" class="headerlink" title="7.1.2、无界队列（Unbounded Queues）"></a>7.1.2、无界队列（Unbounded Queues）</h4><p>无界队列是不受容量限制的队列，这意味着我们不需要设置队列的大小。 例如：LinkedList</p><h3 id="7-2、阻塞队列（BlockingQueue）-和-非阻塞队列（Non-Blocking-Queues）"><a href="#7-2、阻塞队列（BlockingQueue）-和-非阻塞队列（Non-Blocking-Queues）" class="headerlink" title="7.2、阻塞队列（BlockingQueue） 和 非阻塞队列（Non-Blocking Queues）"></a>7.2、阻塞队列（BlockingQueue） 和 非阻塞队列（Non-Blocking Queues）</h3><p>在其他方面，我们可以将它们大致分为以下两种类型：阻塞队列、非阻塞队列</p><h4 id="7-2-1、阻塞队列（BlockingQueue）"><a href="#7-2-1、阻塞队列（BlockingQueue）" class="headerlink" title="7.2.1、阻塞队列（BlockingQueue）"></a>7.2.1、阻塞队列（BlockingQueue）</h4><p>实现 BlockingQueue 接口的所有队列都是 阻塞队列，其余的都是 非阻塞队列。</p><p>BlockingQueues阻塞直到它完成它的工作或超时，但Non-BlockingQueues不会。</p><h5 id="7-2-1-1、BlockingQueue-操作"><a href="#7-2-1-1、BlockingQueue-操作" class="headerlink" title="7.2.1.1、BlockingQueue 操作"></a>7.2.1.1、BlockingQueue 操作</h5><p>除了Queue的两种操作形式之外，BlockingQueue 还支持另外两种形式，如下所示：</p><table><thead><tr><th>Operation</th><th>Throws exception</th><th>Special value</th><th>Blocks</th><th>Times out</th></tr></thead><tbody><tr><td>Insert</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e, time, unit)</td></tr><tr><td>Remove</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time, unit)</td></tr><tr><td>Examine</td><td>element()</td><td>peek()</td><td>N&#x2F;A</td><td>N&#x2F;A</td></tr></tbody></table><h4 id="7-2-2、非阻塞队列（Non-Blocking-Queues）"><a href="#7-2-2、非阻塞队列（Non-Blocking-Queues）" class="headerlink" title="7.2.2、非阻塞队列（Non-Blocking Queues）"></a>7.2.2、非阻塞队列（Non-Blocking Queues）</h4><p>非实现 BlockingQueue 接口的所有队列都是 非阻塞队列。</p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（八）：List 源码分析</title>
      <link href="/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9AList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9AList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、List-简述"><a href="#1、List-简述" class="headerlink" title="1、List 简述"></a>1、List 简述</h2><p>Java.util.List 是 Collection 的子接口。它是一个有序集合，可以存储重复的值。由于List保留可插入元素的位置的控制，因此它可以按索引访问元素，也可以搜索列表中的元素。</p><p>关于Java List的一些重要特点有：<br>🌂Java List 接口是 Java Collections Framework 的成员。<br>🌂List 允许添加重复元素。<br>🌂List允许拥有’null’元素。<br>🌂List接口在Java 8中有许多默认方法，例如replaceAll，sort和spliterator。<br>🌂列表索引从0开始，就像数组一样。<br>🌂List支持泛型，我们应尽可能使用它。 将Generics与List一起使用将在运行时避免ClassCastException。</p><h2 id="2、List-类图2、List-类图"><a href="#2、List-类图2、List-类图" class="headerlink" title="2、List 类图2、List 类图"></a>2、List 类图2、List 类图</h2><p>Java List接口扩展了 Collection 接口。 Collection 接口又扩展了 Iterable接口。<br><img src="https://s1.ax1x.com/2020/04/03/GagEqO.png"><br>一些最常用的 List 实现类有 ArrayList，LinkedList，Vector，Stack，CopyOnWriteArrayList。<br>AbstractList 提供了List接口的重要方法实现，以减少实现List的工作量。</p><h2 id="3、List-方法"><a href="#3、List-方法" class="headerlink" title="3、List 方法"></a>3、List 方法</h2><h3 id="3-1、List-中常用方法如下"><a href="#3-1、List-中常用方法如下" class="headerlink" title="3.1、List 中常用方法如下"></a>3.1、List 中常用方法如下</h3><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>int size()</td><td>获取列表中的元素数量，如果此列表元素个数大于 Integer.MAX_VALUE，则返回 Integer.MAX_VALUE。</td></tr><tr><td>boolean isEmpty()</td><td>检查列表是否为空。</td></tr><tr><td>boolean contains(Object o)</td><td>如果此列表包含指定的元素，则返回true。</td></tr><tr><td>Iterator iterator()</td><td>以适当的顺序返回此列表中元素的迭代器。</td></tr><tr><td>Object[] toArray()</td><td>以适当的顺序返回包含此列表中所有元素的数组</td></tr><tr><td>T[] toArray(T[] a)</td><td>以适当的顺序返回包含此列表中所有元素的数组; 返回数组的类型是指定数组的运行时类型。</td></tr><tr><td>boolean add(E e)</td><td>将指定的元素追加到此列表的末尾。</td></tr><tr><td>boolean remove(Object o)</td><td>从此列表中删除第一次出现的指定元素。</td></tr><tr><td>boolean containsAll(Collection&lt;?&gt; c)</td><td>如果此列表包含指定集合的所有元素，则返回true。</td></tr><tr><td>boolean addAll(Collection&lt;? extends E&gt; c)</td><td>将指定集合中的所有元素按指定集合的迭代器（可选操作）返回的顺序追加到此列表的末尾。如果操作正在进行时修改了指定的集合，则此操作的行为是不确定的。</td></tr><tr><td>boolean addAll(int index, Collection&lt;? extends E&gt; c)</td><td>将指定集合中的所有元素插入到此列表指定位置。将当前位置的元素（如果有）和任何后续元素向右移动。新元素将按照指定集合的迭代器返回的顺序出现在此列表中。如果在操作正在进行时修改了指定的集合，则此操作的行为是不确定的。</td></tr><tr><td>boolean removeAll(Collection&lt;?&gt; c)</td><td>从此列表中删除指定集合中包含的所有元素。</td></tr><tr><td>boolean retainAll(Collection&lt;?&gt; c)</td><td>仅保留此列表中包含在指定集合中的元素。</td></tr><tr><td>void clear()</td><td>从列表中删除所有元素。</td></tr><tr><td>E get(int index)</td><td>返回列表中指定位置的元素。</td></tr><tr><td>void add(int index, E element)</td><td>将指定元素插入此列表中的指定位置。 将当前位于该位置的元素（如果有）和任何后续元素向右移动。</td></tr><tr><td>E remove(int index)</td><td>删除此列表中指定位置的元素。 将任何后续元素向左移位。 返回从列表中删除的元素。</td></tr><tr><td>int indexOf(Object o)</td><td>返回此列表中第一次出现的指定元素的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td>int lastIndexOf(Object o)</td><td>返回此列表中指定元素最后一次出现的索引，如果此列表不包含该元素，则返回-1。</td></tr><tr><td>E set(int index, E element)</td><td>用指定的元素替换列表中指定位置的元素。</td></tr><tr><td>ListIterator listIterator()</td><td>从列表中的指定位置开始，返回列表中元素的列表迭代器（按正确顺序）。 指定的索引指示初始调用next时将返回的第一个元素。 对previous的初始调用将返回指定索引减去1的元素。</td></tr><tr><td>List subList(int fromIndex, int toIndex)</td><td>返回指定 fromIndex（包含）和 toIndex（不包含）之间此列表部分的元素。如果fromIndex和toIndex相等，则返回的列表为空。</td></tr></tbody></table><h3 id="3-2、在Java-8中新增加的默认方法如下"><a href="#3-2、在Java-8中新增加的默认方法如下" class="headerlink" title="3.2、在Java 8中新增加的默认方法如下"></a>3.2、在Java 8中新增加的默认方法如下</h3><p>1、default void replaceAll(UnaryOperator operator)： 将该列表的每个元素替换为将运算符应用于该元素的结果。 当抛出错误或运行时异常时，将返回给调用者。</p><p>实现要求：<br>对于此列表，默认实现等效于：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ListIterator&lt;E&gt; li = list.listIterator();</span><br><span class="line">     <span class="keyword">while</span> (li.hasNext()) &#123;</span><br><span class="line">         li.set(operator.apply(li.next()));</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>如果列表的 list-iterator 不支持set操作，则在替换第一个元素时将抛出UnsupportedOperationException。</p><p>2、default void sort(Comparator&lt;? super E&gt; c)： 根据指定的比较器对此列表进行排序。此列表中的所有元素必须使用指定的比较器进行相互比较（即，c.compare（e1，e2）不得为列表中的任何元素e1和e2抛出 ClassCastException）。如果指定的比较器为null，则此列表中的所有元素都必须实现Comparable接口，并且应使用元素的自然顺序。默认实现获取包含此列表中所有元素的数组，对数组进行排序，并迭代此列表，从数组中的相应位置重置每个元素。 （这样可以避免因尝试对列表进行排序而导致 n^2 log(n) 的性能。）</p><p>3、default Spliterator spliterator()： 在此列表中的元素上创建Spliterator。</p><h2 id="4、Java-Array-to-List"><a href="#4、Java-Array-to-List" class="headerlink" title="4、Java Array to List"></a>4、Java Array to List</h2><p>我们可以使用Arrays 类将数组转换为列表，但是我们无法对列表进行任何结构修改，它将抛出 java.lang.UnsupportedOperationException。所以最好的方法是使用for循环来迭代数组来创建列表。</p><p>下面是一个简单示例，展示了如何正确地将java数组转换为列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">       String[]hello=&#123;<span class="string">&quot;h&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;o&quot;</span>&#125;;</span><br><span class="line">       List&lt;String&gt; a= Arrays.asList(hello);</span><br><span class="line">       System.out.println(<span class="string">&quot;Arrays.asList 数组转为列表：&quot;</span>+a);</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * List是由数组支持的，我们不能做结构修改</span></span><br><span class="line"><span class="comment">        * 以下两个语句都将抛出java.lang.UnsupportedOperationException</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="comment">//hellosList.remove(&quot;l&quot;);</span></span><br><span class="line">       <span class="comment">//hellosList.clear();</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用for循环将元素从数组复制到列表，可以安全地修改列表</span></span><br><span class="line">       List&lt;String&gt; b=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(String s:hello)&#123;</span><br><span class="line">           b.add(s);</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;for遍历元素添加到新的列表中：&quot;</span>+b);</span><br><span class="line">       b.clear();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList 数组转为列表：[h, e, l, l, o]</span><br><span class="line"><span class="keyword">for</span>遍历元素添加到新的列表中：[h, e, l, l, o]</span><br></pre></td></tr></table></figure><h2 id="5、Java-List-to-Array"><a href="#5、Java-List-to-Array" class="headerlink" title="5、Java List to Array"></a>5、Java List to Array</h2><p>一个简单的示例，将列表转换为数组的正确方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;String&gt; a=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       a.add(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">       a.add(<span class="string">&quot;W&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将列表转为数组</span></span><br><span class="line">       String[] b=<span class="keyword">new</span> <span class="title class_">String</span>[a.size()];</span><br><span class="line">       b=a.toArray(b);</span><br><span class="line">       System.out.println(Arrays.toString(b));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[H, W]</span><br></pre></td></tr></table></figure><h2 id="6、Java-List-sort"><a href="#6、Java-List-sort" class="headerlink" title="6、Java List sort"></a>6、Java List sort</h2><p>有两种方法可以对列表进行排序。我们可以使用 Collections 类进行自然排序，或者我们可以使用List sort（）方法并使用我们自己的 Comparator 进行排序。</p><p>下面是java列表排序的一个简单示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; a=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Random random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            a.add(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用Collections 对列表进行排序</span></span><br><span class="line">        Collections.sort(a);</span><br><span class="line">        System.out.println(<span class="string">&quot;Collections 自然排序：&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义比较器，逆序排序</span></span><br><span class="line">        a.sort((o1,o2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span>(o2-o1);</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义比较器，逆序排序:&quot;</span>+a);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collections 自然排序：[<span class="number">6</span>, <span class="number">141</span>, <span class="number">223</span>, <span class="number">334</span>, <span class="number">357</span>, <span class="number">475</span>, <span class="number">511</span>, <span class="number">647</span>, <span class="number">948</span>, <span class="number">996</span>]</span><br><span class="line">自定义比较器，逆序排序:[<span class="number">996</span>, <span class="number">948</span>, <span class="number">647</span>, <span class="number">511</span>, <span class="number">475</span>, <span class="number">357</span>, <span class="number">334</span>, <span class="number">223</span>, <span class="number">141</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h2 id="7、Java-List-常用操作方法"><a href="#7、Java-List-常用操作方法" class="headerlink" title="7、Java List 常用操作方法"></a>7、Java List 常用操作方法</h2><p>在java列表上执行的最常见操作是<strong>add</strong>, <strong>remove</strong>, <strong>set</strong>, <strong>clear</strong>, <strong>size</strong> 等。</p><p>下面一个简单的java列表示例，展示了常用的方法用法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">       List&lt;String&gt; a=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//add</span></span><br><span class="line">       a.add(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">       a.add(<span class="string">&quot;W&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将元素插入到指定位置</span></span><br><span class="line">       a.add(<span class="number">1</span>,<span class="string">&quot;E&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;将元素插入到指定位置:&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">       List&lt;String &gt; b=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       b.add(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">       b.add(<span class="string">&quot;W&quot;</span>);</span><br><span class="line">       b.add(<span class="string">&quot;W&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将b集合中所有的元素追加到a集合中</span></span><br><span class="line">       a.addAll(b);</span><br><span class="line">       System.out.println(<span class="string">&quot;将b集合中所有的元素追加到a集合中:&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//清空集合</span></span><br><span class="line">       b.clear();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//集合元素大小</span></span><br><span class="line">       System.out.println(<span class="string">&quot;集合a元素大小&quot;</span>+a.size());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//替换指定位置的元素</span></span><br><span class="line">       a.set(<span class="number">1</span>,<span class="string">&quot;W&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;将索引位置为1的元素替换为 W：&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//subList</span></span><br><span class="line">       a.clear();</span><br><span class="line">       a.add(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">       a.add(<span class="string">&quot;O&quot;</span>);</span><br><span class="line">       a.add(<span class="string">&quot;V&quot;</span>);</span><br><span class="line">       a.add(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">       <span class="comment">////截取集合 a 中索引位置从 0 到 索引位置为 1 的元素</span></span><br><span class="line">       b=a.subList(<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;a.subList(0,2)&quot;</span>+b);</span><br><span class="line">       <span class="comment">////替换集合 a 中索引位置为 0 的元素</span></span><br><span class="line">       a.set(<span class="number">0</span>,<span class="string">&quot;W&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;替换集合 a 中索引位置为 0 的元素为&#x27;W&#x27;&quot;</span>+a);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//添加</span></span><br><span class="line">       System.out.println(<span class="string">&quot;b集合:&quot;</span>+b);</span><br><span class="line">       b.add(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;b集合中添加G：&quot;</span>+b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">将元素插入到指定位置:[H, E, W]</span><br><span class="line">将b集合中所有的元素追加到a集合中:[H, E, W, L, W, W]</span><br><span class="line">集合a元素大小<span class="number">6</span></span><br><span class="line">将索引位置为<span class="number">1</span>的元素替换为 W：[H, W, W, L, W, W]</span><br><span class="line">a.subList(<span class="number">0</span>,<span class="number">2</span>)[L, O]</span><br><span class="line">替换集合 a 中索引位置为 <span class="number">0</span> 的元素为<span class="string">&#x27;W&#x27;</span>[W, O, V, E]</span><br><span class="line">b集合:[W, O]</span><br><span class="line">b集合中添加G：[W, O, G]</span><br></pre></td></tr></table></figure><h2 id="8、Java-List-iterator"><a href="#8、Java-List-iterator" class="headerlink" title="8、Java List iterator"></a>8、Java List iterator</h2><p>下面是一个简单的例子，展示了如何在java中迭代列表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//简单遍历</span></span><br><span class="line">    System.out.print(<span class="string">&quot;简单迭代遍历：&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        System.out.print(i + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用迭代器修改列表</span></span><br><span class="line">    iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            iterator.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用迭代器删除偶数：&quot;</span>+list);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代时改变列表结构</span></span><br><span class="line">    iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">        <span class="comment">//ConcurrentModificationException</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>) &#123;</span><br><span class="line">            list.add(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">简单迭代遍历：<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, </span><br><span class="line">使用迭代器删除偶数：[<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.ConcurrentModificationException</span><br><span class="line">at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:<span class="number">909</span>)</span><br><span class="line">at java.util.ArrayList$Itr.next(ArrayList.java:<span class="number">859</span>)</span><br><span class="line">at com.lkf.collection.list.ListIteratorExample.main(ListIteratorExample.java:<span class="number">44</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（七）：SortedSet 源码分析</title>
      <link href="/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ASortedSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ASortedSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、SortedSet-简述"><a href="#1、SortedSet-简述" class="headerlink" title="1、SortedSet 简述"></a>1、SortedSet 简述</h2><p>SortedSet 接口扩展了 Set 接口并提供了元素的排序功能。</p><p>插入到<strong>有序集</strong>中的所有元素必须实现<strong>Comparable</strong>接口（或者被指定的Comparator接受），并且所有这些元素必须是可相互比较的，比如：**e1.compareTo(e2)**（或 comparator.compare(e1, e2)）对于有序集合中的任意元素 e1 和 e2 都不能抛出 ClassCastException。<br>试图违反规则的方法或者构造方法，调用时会抛出 ClassCastException。</p><p>如果有序集合<strong>正确实现了 Set 接口</strong>，则有序集合所保持的顺序（无论是否明确提供了比较器）都必须保持相等一致性（相等一致性的定义请参阅 Comparable 接口或 Comparator 接口）。</p><p>这也是因为** Set 接口是按照 equals 操作定义的<strong>，但有序集合使用它的</strong> compareTo** 或** compare** 方法对所有元素进行比较， 因此从有序集合的角度来看，此方法认为相等的两个元素就是相等的。<br>即使顺序没有保持相等一致性，有序集合的行为仍然是良好的，只不过没有遵守 Set 接口的常规协定。</p><p><strong>所有通用有序集合实现类都应该提供四个“标准”构造方法：</strong><br>🌂一个void（无参数）构造函数，它根据元素的自然顺序创建一个空的有序集。</p><p>🌂具有Comparator类型的单个参数的构造函数，它创建一个根据指定的比较器排序的空的有序集。</p><p>🌂具有Collection类型的单个参数的构造函数，它创建一个具有与其参数相同元素的新排序集，并根据元素的自然顺序进行排序。</p><p>🌂具有SortedSet类型的单个参数的构造函数，它创建一个新的有序集，其具有与输入有序集相同的元素和相同的顺序。 由于接口不能包含构造函数，因此无法强制执行此建议。</p><p>除了 JDK 中实现类（ConcurrentSkipListSet,TreeSet）遵循此建议外，无法保证强制实施此建议（因为接口不能包含构造方法）。</p><p><code>注意：有几种方法返回具有受限范围的子集。</code><br>这样的范围是半开放的，即返回的子集元素是根据指定的范围（lowEndpoint 至 highEndpoint）从原始集合中截取的，这个范围，包括 lowEndpoint 但不包括 highEndpoint。</p><p>例如，假设 s 是一组有序的字符串。 以下语句获得 s 的一个子集，其中包含 s 中从 low 到 high 的所有字符串，包括 high：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;String&gt; sub = s.subSet(low, high+<span class="string">&quot;\0&quot;</span>);</span><br></pre></td></tr></table></figure><p>其中包含 s 中从 low 到 high 的所有字符串，不包括 high：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SortedSet&lt;String&gt; sub = s.subSet(low+<span class="string">&quot;\0&quot;</span>, high);</span><br></pre></td></tr></table></figure><h2 id="2、SortedSet-类图"><a href="#2、SortedSet-类图" class="headerlink" title="2、SortedSet 类图"></a>2、SortedSet 类图</h2><p>SortedSet 接口继承于 Set 接口，同时又提供了一些功能增强的方法，比如 comparator 从而实现了元素的有序性。<br><img src="https://s1.ax1x.com/2020/04/03/Gag8L8.png"></p><p>🌂SortedSet 父接口<br>Collection, Iterable, Set</p><p>🌂SortedSet 子接口<br>NavigableSet</p><h2 id="3、SortedSet-方法"><a href="#3、SortedSet-方法" class="headerlink" title="3、SortedSet 方法"></a>3、SortedSet 方法</h2><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>comparator（）</td><td>返回用于对此集合中的元素进行排序的比较器，如果此集合使用其元素的自然顺序，则返回null。</td></tr><tr><td>first（）</td><td>返回此集合中当前的第一个（最低）元素。</td></tr><tr><td>headSet（E toElement）</td><td>返回此set的部分视图，其元素严格小于toElement。</td></tr><tr><td>last（）</td><td>返回此集合中当前的最后一个（最高）元素。</td></tr><tr><td>subSet（E fromElement，E toElement）</td><td>返回此set的部分视图，其元素范围从 fromElement（包括） 到 toElement（不包括）。</td></tr><tr><td>tailSet（E fromElement）</td><td>返回此set的部分元素，其元素大于或等于fromElement。</td></tr><tr><td>spliterator()</td><td>在此有序集中的元素上创建Spliterator。</td></tr></tbody></table><p>🌂从 java.util.Set 继承的方法有：<br>add, addAll, clear, contains, containsAll, equals, hashCode, isEmpty, iterator, remove, removeAll, retainAll, size, toArray, toArray</p><p>🌂从 java.util.Collection 继承的方法有：<br>parallelStream, removeIf, stream</p><p>🌂从 java.lang.Iterable 继承的方法有：<br>forEach</p><h2 id="4、SortedSet-方法示例"><a href="#4、SortedSet-方法示例" class="headerlink" title="4、SortedSet 方法示例"></a>4、SortedSet 方法示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SortedSet&lt;String&gt; a=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        a.add(<span class="string">&quot;huangwan&quot;</span>);</span><br><span class="line">        a.add(<span class="string">&quot;lizi&quot;</span>);</span><br><span class="line">        a.add(<span class="string">&quot;liwenwen&quot;</span>);</span><br><span class="line">        a.add(<span class="string">&quot;xiangai&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sortedSet:&quot;</span>+a);</span><br><span class="line">        System.out.println(<span class="string">&quot;sortedSet First:&quot;</span>+a.first());</span><br><span class="line">        System.out.println(<span class="string">&quot;sortedSet LAst:&quot;</span>+a.last());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 liwenwen(不包含)之前的元素</span></span><br><span class="line">        SortedSet&lt;String&gt; b=a.headSet(<span class="string">&quot;liwenwen&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取 liwenwen(不包含)之前的元素:&quot;</span>+b);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取包含lizi(包含)和xiangai(不包含)之间的元素</span></span><br><span class="line">        SortedSet&lt;String&gt; c=a.subSet(<span class="string">&quot;lizi&quot;</span>,<span class="string">&quot;xiangai&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取包含lizi(包含)和xiangai(不包含)之间的元素:&quot;</span>+c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 liwenwen(包含)之后的元素</span></span><br><span class="line">        SortedSet&lt;String&gt; d=a.tailSet(<span class="string">&quot;liwenwen&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;获取 liwenwen(包含)之后的元素:&quot;</span>+d);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sortedSet:[huangwan, liwenwen, lizi, xiangai]</span><br><span class="line">sortedSet First:huangwan</span><br><span class="line">sortedSet LAst:xiangai</span><br><span class="line">获取 liwenwen(不包含)之前的元素:[huangwan]</span><br><span class="line">获取包含lizi(包含)和xiangai(不包含)之间的元素:[lizi]</span><br><span class="line">获取 liwenwen(包含)之后的元素:[liwenwen, lizi, xiangai]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、注意事项"><a href="#5、注意事项" class="headerlink" title="5、注意事项"></a>5、注意事项</h2><p>1、SortedSet 是“根据对象的比较顺序”，而不是“插入顺序”进行排序.</p><p>2、SortedSet 的实现不是同步的，不是线程安全的</p><p>如果多个线程同时访问一个 set，而其中至少一个线程修改了该 set，那么它必须保持外部同步.通常通过对某个自然类封装该 set 的对象进行同步来实现此操作。如果不存在此类对象，<br>则 set 就应该使用 Collections.synchronizedSet 方法进行“包装”。</p><p>此操作最好在创建时声明，以防止对 set 的意外非同步访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SortedSet</span> <span class="variable">s</span> <span class="operator">=</span> Collections.synchronizedSortedSet(<span class="keyword">new</span> <span class="title class_">TreeSet</span>(...));</span><br></pre></td></tr></table></figure><p>3、SortedSet 允许 null 元素.</p><p>4、SortedSet 的实现类 TreeSet 将使用其 compareTo（或 compare）方法执行所有的键比较，认为两个对象的键相等就表示它们两个对象是相等的。它违背了 Set 接口的常规协定。</p><p>5、SortedSet 的 iterator 方法返回的迭代器是快速失败的</p><p>在创建迭代器之后，如果对集合进行修改， 除非通过迭代器自身的 remove 方法，否则在任何时间以任何方式对其进行修改， Iterator 都将抛出 ConcurrentModificationException</p><p>6、iterator() 返回的迭代器，里面的元素是以升序排序的.</p><p>7、当试图添加一个重复元素到TreeSet时，新元素并不会把旧元素替换掉，<br>而只是新元素不会添加到TreeSet（不会抛异常。）</p><p>8、 TreeSet 时用红黑树的数据结构来为元素排序</p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（六）：Set 源码分析</title>
      <link href="/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Set-简述"><a href="#1、Set-简述" class="headerlink" title="1、Set 简述"></a>1、Set 简述</h2><p>Java Set 是一个不包含重复元素的集合。它继承于 Collection 接口。 它有以下特点：</p><p>🌂与List不同，Java Set不是有序集合，它的元素没有特定的顺序。<br>🌂Java Set不提供对插入元素的位置的控制。<br>🌂它不能通过索引访问元素，但是可以搜索列表中的元素。<br>🌂Set允许最多仅添加一个null元素。<br>🌂Set接口在Java 8中有一个默认方法：spliterator。</p><h2 id="2、Set-类图"><a href="#2、Set-类图" class="headerlink" title="2、Set 类图"></a>2、Set 类图</h2><p>Java Set 接口继承了 Collection 接口。 Collection 接口继承了 Iterable 接口。 一些常用的 Set 实现类有 HashSet，LinkedHashSet，TreeSet，CopyOnWriteArraySet 和 ConcurrentSkipListSet。AbstractSet 提供了 Set 接口的基本实现，以减少 Set 实现类的工作量。<br><img src="https://s1.ax1x.com/2020/04/03/GUNiq0.jpg"></p><p>🌂Set 父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;E&gt;, Iterable&lt;E&gt;</span><br></pre></td></tr></table></figure><p>🌂Set 子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NavigableSet&lt;E&gt;, SortedSet&lt;E&gt;</span><br></pre></td></tr></table></figure><p>🌂Set 实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbstractSet, ConcurrentHashMap.KeySetView, ConcurrentSkipListSet, CopyOnWriteArraySet, EnumSet, HashSet, JobStateReasons, LinkedHashSet, TreeSet</span><br></pre></td></tr></table></figure><h2 id="3、Set-方法"><a href="#3、Set-方法" class="headerlink" title="3、Set 方法"></a>3、Set 方法</h2><table><thead><tr><th>方法</th><th>方法描述</th></tr></thead><tbody><tr><td>booleanadd(E e)</td><td>如果指定的元素不存在，则将其添加到此集合。如果此set已包含该元素，则保持set不变并返回false。</td></tr><tr><td>boolean addAll(Collection&lt;? extends E&gt; c)</td><td>如果指定集合中的所有元素不存在当前集合中，则将其添加到此集合中。 否则，addAll操作会修改此集合，使其值为两个集合的并集。 如果操作正在进行时修改了指定的集合，则此操作的行为是不确定的。</td></tr><tr><td>void clear()</td><td>清空当前结合中的所有元素</td></tr><tr><td>boolean contains(Object o)</td><td>如果此set包含指定的元素，则返回true。当且仅当此集合包含元素e时才返回true（o &#x3D;&#x3D; null？e &#x3D;&#x3D; null：o.equals（e））。</td></tr><tr><td>boolean containsAll(Collection&lt;?&gt; c)</td><td>如果此set包含指定collection的所有元素，则返回true。 如果指定的集合是当前集合的子集，则返回true。</td></tr><tr><td>booleanequals(Object o)</td><td>将指定对象与此set进行相等性比较。 如果指定的对象也是一个集合，两个集合具有相同的大小，并且指定集合的每个成员都包含在此集合中，则返回true。</td></tr><tr><td>inthashCode()</td><td>返回此set的哈希码值。 集合的哈希码被定义为集合中元素的哈希码的总和，其中空元素的哈希码被定义为零。 这意味着对于任何两个集合s1和s2的 s1.hashCode（）&#x3D;&#x3D; s2.hashCode（）时，s1.equals（s2）。</td></tr><tr><td>booleanisEmpty()</td><td>如果此set不包含任何元素，则返回true。</td></tr><tr><td>Iterator</td><td>iterator()返回此set中元素的迭代器。 元素以无特定顺序返回</td></tr><tr><td>booleanremove(Object o)</td><td>从该集合中移除指定的元素，如果该元素存在集合中，则返回true</td></tr><tr><td>boolean removeAll(Collection&lt;?&gt; c)</td><td>从当前集合中删除所有包含指定集合的元素</td></tr><tr><td>boolean retainAll(Collection&lt;?&gt; c)</td><td>仅保留当前集合中包含指定集合中的元素。 换句话说，该方法最终结果为两个集合的交集。</td></tr><tr><td>intsize()</td><td>返回此集合中的元素数。 如果此set包含 Integer.MAX_VALUE 个元素，则返回 Integer.MAX_VALUE。</td></tr><tr><td>default Spliterator spliterator()</td><td>在此集合中的元素上创建Spliterator</td></tr><tr><td>Object[] toArray()</td><td>返回包含此set中所有元素的数组。 返回的数组将是“安全的”，因为该集合不维护对它的引用。 （换句话说，即使此数组由数组支持，此方法也必须分配一个新数组）。 因此调用者可以自由修改返回的数组。</td></tr><tr><td>T[]toArray(T[] a)</td><td>返回一个包含此set中所有元素的数组; 返回数组的运行时类型是指定数组的运行时类型。 如果集合适合指定的数组，则返回指定类型的数组。 否则，将使用指定数组的运行时类型和此set的大小分配新数组。如果此set适合指定的数组，并且有空余空间（即，数组的元素多于此set），则紧跟在该set结尾之后的数组中的元素将设置为null。</td></tr></tbody></table><p>🌂从接口 java.util.Collection 继承的方法有：<br>parallelStream, removeIf, stream</p><p>🌂从接口 java.lang.Iterable 继承的方法有：<br>forEach</p><h2 id="4、Java-Array-to-Set"><a href="#4、Java-Array-to-Set" class="headerlink" title="4、Java Array to Set"></a>4、Java Array to Set</h2><p>与List不同，我们不能直接将Java Set转换为数组，因为它不是使用Array实现的。因此我们不能直接使用 Arrays 将数组转换为 Set 。 但是，我们可以采用另一种方法，我们可以使用Arrays.asList（）方法将数组转换为List，然后使用它来创建Set。</p><p>通过使用这种方法，我们可以通过两种方式将Java数组转换为Set。 下面让我们用一个简单例子，分别演示以下这两种方式。</p><h3 id="4-1、方法1"><a href="#4-1、方法1" class="headerlink" title="4.1、方法1"></a>4.1、方法1</h3><p>在这种方法中，首先我们需要使用给定的数组创建一个List，然后使用它来创建一个Set，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">      String[]a=&#123;<span class="string">&quot;h&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;o&quot;</span>&#125;;</span><br><span class="line">       Set&lt;String&gt; b=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(a));</span><br><span class="line">       System.out.println(b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="4-2、方法2"><a href="#4-2、方法2" class="headerlink" title="4.2、方法2"></a>4.2、方法2</h3><p>在这种方法中，我们不使用 List 来作为从Array 转换为 Set 的中间集合。 首先创建一个空的 HashSet，然后使用 Collections.addAll（）将数组元素复制到给定的 Set 中，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">      String[]a=&#123;<span class="string">&quot;h&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;l&quot;</span>,<span class="string">&quot;o&quot;</span>&#125;;</span><br><span class="line">      Set&lt;String&gt; b=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      Collections.addAll(b,a);</span><br><span class="line">      System.out.println(b);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="5、Java-Set-to-Array"><a href="#5、Java-Set-to-Array" class="headerlink" title="5、Java Set to Array"></a>5、Java Set to Array</h2><p>接下来我们将使用 Set.toArray（）方法将一组字符串转换为字符串数组，如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Set&lt;String&gt; a=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    a.add(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">    a.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">    a.add(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">    a.add(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">    a.add(<span class="string">&quot;o&quot;</span>);</span><br><span class="line">    <span class="comment">//这一步就是将set转换成array</span></span><br><span class="line">    String str[]=a.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[a.size()]);</span><br><span class="line">    System.out.println(Arrays.toString(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 运行结果</span></span><br><span class="line"><span class="comment"> * [e, h, l, o]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="6、Java-Set-Sorting"><a href="#6、Java-Set-Sorting" class="headerlink" title="6、Java Set Sorting"></a>6、Java Set Sorting</h2><p>我们知道，Set（HashSet）不支持直接对元素排序。 它以随机顺序存储和显示元素。但是，我们有一些方法可以对它的元素进行排序，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ublic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;Integer&gt; intsSet=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        Random random=<span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            intsSet.add(random.nextInt(<span class="number">1000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;无序：&quot;</span>+intsSet);</span><br><span class="line">        Set&lt;Integer&gt; youxu=<span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(intsSet);</span><br><span class="line">        System.out.println(<span class="string">&quot;有序：&quot;</span>+youxu);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">无序：[<span class="number">371</span>, <span class="number">390</span>, <span class="number">408</span>, <span class="number">41</span>, <span class="number">329</span>, <span class="number">410</span>, <span class="number">588</span>, <span class="number">316</span>, <span class="number">573</span>, <span class="number">205</span>]</span><br><span class="line">有序：[<span class="number">41</span>, <span class="number">205</span>, <span class="number">316</span>, <span class="number">329</span>, <span class="number">371</span>, <span class="number">390</span>, <span class="number">408</span>, <span class="number">410</span>, <span class="number">573</span>, <span class="number">588</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、Java-Set-to-Stream"><a href="#7、Java-Set-to-Stream" class="headerlink" title="7、Java Set to Stream"></a>7、Java Set to Stream</h2><p>下面是一个示例，说明如何将Java Set转换为Stream并根据我们的要求执行某些操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">      Set&lt;String&gt; a=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">      a.add(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">      a.add(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">      a.add(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">      a.add(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">      a.add(<span class="string">&quot;o&quot;</span>);</span><br><span class="line">      <span class="comment">//将set转换为stream并且进行遍历输出</span></span><br><span class="line">      a.stream().forEach(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 输出结果：</span></span><br><span class="line"><span class="comment">   * e</span></span><br><span class="line"><span class="comment">   * h</span></span><br><span class="line"><span class="comment">   * l</span></span><br><span class="line"><span class="comment">   * o</span></span><br><span class="line"><span class="comment">   */</span></span><br></pre></td></tr></table></figure><h2 id="8、Java-Set-常用操作"><a href="#8、Java-Set-常用操作" class="headerlink" title="8、Java Set 常用操作"></a>8、Java Set 常用操作</h2><p>在Java Set上我们最常用的操作是<strong>add</strong>，<strong>addAll</strong>，<strong>clear</strong>，<strong>size</strong>等。下面是一个简单的Java Set 示例，显示了常用的方法用法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">     Set&lt;String&gt; a=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">     a.add(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">     a.add(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">     a.add(<span class="string">&quot;L&quot;</span>);</span><br><span class="line">     System.out.println(<span class="string">&quot;a:&quot;</span>+ Arrays.toString(a.toArray()));</span><br><span class="line">     Set&lt;String&gt; b=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">     b.add(<span class="string">&quot;O&quot;</span>);</span><br><span class="line">     b.add(<span class="string">&quot;U&quot;</span>);</span><br><span class="line">     <span class="comment">//将b中的元素全部添加到a中</span></span><br><span class="line">     a.addAll(b);</span><br><span class="line">     System.out.println(<span class="string">&quot;将b中的元素全部添加到a中:&quot;</span>+Arrays.toString(a.toArray()));</span><br><span class="line">     <span class="comment">//清空</span></span><br><span class="line">     b.clear();</span><br><span class="line">     <span class="comment">//输出a的长度</span></span><br><span class="line">     System.out.println(<span class="string">&quot;输出b的长度:&quot;</span>+a.size());</span><br><span class="line">     <span class="comment">//这里清空a</span></span><br><span class="line">     a.clear();</span><br><span class="line">     a.add(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">     a.add(<span class="string">&quot;W&quot;</span>);</span><br><span class="line">     <span class="comment">//这里用contains方法看一下是否包含某一个元素</span></span><br><span class="line">     System.out.println(<span class="string">&quot;判断是否包含W：&quot;</span>+a.contains(<span class="string">&quot;W&quot;</span>));</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a:[E, H, L]</span><br><span class="line">将b中的元素全部添加到a中:[E, U, H, L, O]</span><br><span class="line">输出b的长度:<span class="number">5</span></span><br><span class="line">判断是否包含W：<span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9、Java-Set-Iterator"><a href="#9、Java-Set-Iterator" class="headerlink" title="9、Java Set Iterator"></a>9、Java Set Iterator</h2><p>下面是一个例子，展示了如何迭代Java Set。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">       Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           set.add(i);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取迭代器</span></span><br><span class="line">       <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> set.iterator();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//简单迭代</span></span><br><span class="line">       System.out.println(<span class="string">&quot;迭代集合元素：&quot;</span>);</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (<span class="type">int</span>) iterator.next();</span><br><span class="line">           System.out.print(i + <span class="string">&quot; &quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用迭代器修改 set 元素</span></span><br><span class="line">       iterator = set.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">           <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (<span class="type">int</span>) iterator.next();</span><br><span class="line">           <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">               iterator.remove();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println();</span><br><span class="line">       System.out.println(<span class="string">&quot;使用迭代器修改set元素以后：&quot;</span> + set);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">迭代集合元素：</span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line">使用迭代器修改set元素以后：[<span class="number">1</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（五）：ListIterator 源码分析</title>
      <link href="/2020/03/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AListIterator%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/03/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AListIterator%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、ListIterator-接口简述"><a href="#1、ListIterator-接口简述" class="headerlink" title="1、ListIterator 接口简述"></a>1、ListIterator 接口简述</h2><p>在Java中，ListIterator 是Collection API中的一个接口。 它扩展了Iterator接口。它是一个双向迭代器。 为了支持前向和后向迭代和CRUD操作，它具有以下方法。 我们可以将这个Iterator用于所有List实现的类，如ArrayList，CopyOnWriteArrayList，LinkedList，Stack，Vector等。</p><h2 id="2、ListIterator-接口类图"><a href="#2、ListIterator-接口类图" class="headerlink" title="2、ListIterator 接口类图"></a>2、ListIterator 接口类图</h2><p><img src="https://s1.ax1x.com/2020/03/31/GKdmvQ.png"></p><h2 id="3、ListIterator-接口方法摘要"><a href="#3、ListIterator-接口方法摘要" class="headerlink" title="3、ListIterator 接口方法摘要"></a>3、ListIterator 接口方法摘要</h2><p>Java ListIterator 接口包含以下几个方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void add(E e)</td><td>将指定的元素插入列表中</td></tr><tr><td>boolean hasNext()</td><td>如果此列表迭代器在向前遍历列表时还有更多元素，则返回true</td></tr><tr><td>boolean hasPrevious()</td><td>如果此列表迭代器在反向遍历列表时还有更多元素，则返回true</td></tr><tr><td>E next()</td><td>返回列表中的下一个元素并前移光标位置</td></tr><tr><td>int nextIndex()</td><td>返回下一个元素的索引</td></tr><tr><td>E previous()</td><td>返回列表中的上一个元素并向后移动光标位置。</td></tr><tr><td>int previousIndex()</td><td>返回后续调用previous（）返回的元素的索引。</td></tr><tr><td>void remove()</td><td>从列表中删除next（）或previous（）的最后一个元素。</td></tr><tr><td>void set(E e)</td><td>用指定的元素替换next（）或previous（）返回的最后一个元素</td></tr></tbody></table><h2 id="4、ListIterator-应用基本示例"><a href="#4、ListIterator-应用基本示例" class="headerlink" title="4、ListIterator 应用基本示例"></a>4、ListIterator 应用基本示例</h2><h3 id="4-1、如何获得ListIterator？"><a href="#4-1、如何获得ListIterator？" class="headerlink" title="4.1、如何获得ListIterator？"></a>4.1、如何获得ListIterator？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span></span><br><span class="line">它返回此列表中元素的列表迭代器。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListIteratorDemo</span> </span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        names.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 ListIterator 对象</span></span><br><span class="line">        ListIterator&lt;String&gt; listIterator = names.listIterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ListIterator遍历:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(listIterator.hasNext())&#123;</span><br><span class="line">            System.out.println(listIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;for循环遍历:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String name: names)&#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ListIterator遍历:</span><br><span class="line">Apple</span><br><span class="line">Orange</span><br><span class="line">Banana</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>循环遍历:</span><br><span class="line">Apple</span><br><span class="line">Orange</span><br><span class="line">Banana</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2、ListIterator双向迭代示例"><a href="#4-2、ListIterator双向迭代示例" class="headerlink" title="4.2、ListIterator双向迭代示例"></a>4.2、ListIterator双向迭代示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BiDirectinalListIteratorDemo</span> </span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        names.add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">        names.add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取 ListIterator 对象</span></span><br><span class="line">        ListIterator&lt;String&gt; listIterator = names.listIterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正向遍历元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正向遍历:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(listIterator.hasNext())&#123;</span><br><span class="line">            System.out.println(listIterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反向遍历元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;反向遍历元素:&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(listIterator.hasPrevious())&#123;</span><br><span class="line">            System.out.println(listIterator.previous());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">正向遍历:</span><br><span class="line">Apple</span><br><span class="line">Orange</span><br><span class="line">Banana</span><br><span class="line">反向遍历元素:</span><br><span class="line">Banana</span><br><span class="line">Orange</span><br><span class="line">Apple</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、Java迭代器的类型"><a href="#5、Java迭代器的类型" class="headerlink" title="5、Java迭代器的类型"></a>5、Java迭代器的类型</h2><p>我们知道Java有四个游标：Enumeration，Iterator，ListIterator和Spliterator。 我们将它们分为两种主要类型，如下所示：</p><p>🌂单向迭代器<br>仅支持正向迭代。 例如，Enumeration，Iterator等都是单项迭代器</p><p>🌂双向迭代器<br>支持正向和反向迭代。 例如，ListIterator 就 是双向迭代器。</p><h2 id="6、Java-ListIterator-内部是如何工作的？"><a href="#6、Java-ListIterator-内部是如何工作的？" class="headerlink" title="6、Java ListIterator 内部是如何工作的？"></a>6、Java ListIterator 内部是如何工作的？</h2><p>由上文我们知道，Java ListIterator 是一个双向迭代器，为了支持此功能，它有两组方法以实现该功能。</p><p>1、正向迭代方法<br>🌂hasNext())<br>🌂next()<br>🌂nextIndex()</p><p>2、反向迭代方法<br>🌂hasPrevious()<br>🌂previous()<br>🌂previousIndex()</p><h3 id="6-1、正向迭代实现分析"><a href="#6-1、正向迭代实现分析" class="headerlink" title="6.1、正向迭代实现分析"></a>6.1、正向迭代实现分析</h3><p>正向迭代实现的分析可参见前一篇文章：Java集合框架（四）：Iterator 源码分析<br><img src="https://s1.ax1x.com/2020/03/31/GKdZ8S.png"></p><h3 id="6-2、反向迭代实现分析"><a href="#6-2、反向迭代实现分析" class="headerlink" title="6.2、反向迭代实现分析"></a>6.2、反向迭代实现分析</h3><p><img src="https://s1.ax1x.com/2020/03/31/GKdKDs.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">names.add(<span class="string">&quot;E-1&quot;</span>);</span><br><span class="line">names.add(<span class="string">&quot;E-2&quot;</span>);</span><br><span class="line">names.add(<span class="string">&quot;E-3&quot;</span>);</span><br><span class="line">................</span><br><span class="line">names.add(<span class="string">&quot;E-n&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用 LinkedList 创建一个ListIterator对象，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ListIterator&lt;String&gt; namesIterator = names.listLterator();</span><br></pre></td></tr></table></figure><p>我们假设当前 namesIterator 迭代器如下所示：<br><img src="https://s1.ax1x.com/2020/03/31/GKdA4f.png"></p><p>这里 ListIterator 的Cursor指向List的第一个元素的前边。 现在我们运行以下代码：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namesIterator.hasPrevious();</span><br><span class="line"> namesIterator.previous();</span><br></pre></td></tr></table></figure><br><img src="https://s1.ax1x.com/2020/03/31/GKdkUP.png"><br>当我们运行上面的代码时，ListIterator的Cursor指向LinkedList中的最后一个元素，如上图所示。 接着，我们运行以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">namesIterator.hasPrevious();</span><br><span class="line">namesIterator.previous();</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/31/GKdlEq.png"><br>当我们运行上面的代码时，ListIterator 的 Cursor 指向List中最后一个元素的前一个元素，如上图所示。 循环此过程以将ListIterator的Cursor传递到LinkedList的第一个元素。<br><img src="https://s1.ax1x.com/2020/03/31/GKdFEt.png"><br>在读取第一个元素后，如果我们继续执行下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">namesIterator.hasPrevious();</span><br></pre></td></tr></table></figure><p>它将返回 false，以终止循环，至此反向遍历完成。<br><img src="https://s1.ax1x.com/2020/03/31/GKdVC8.png"></p><h2 id="7、Java-ListIterator-局限性"><a href="#7、Java-ListIterator-局限性" class="headerlink" title="7、Java ListIterator 局限性"></a>7、Java ListIterator 局限性</h2><p>与Iterator相比，Java ListIterator有许多优点。 但是，它仍然存在以下一些限制。</p><p>🌂它是Iterator唯一的List实现类。</p><p>🌂与Iterator不同，它不适用于整个Collection API。</p><p>🌂与Spliterator相比，它不支持元素的并行迭代。</p><p>🌂与Spliterator相比，它不支持更好的性能来迭代大量数据。</p><h2 id="8、ListIterator-与-Iterator-的区别"><a href="#8、ListIterator-与-Iterator-的区别" class="headerlink" title="8、ListIterator 与 Iterator 的区别"></a>8、ListIterator 与 Iterator 的区别</h2><table><thead><tr><th>Iterator</th><th>ListIterator</th></tr></thead><tbody><tr><td>在Java 1.2中引入</td><td>在Java 1.2中引入</td></tr><tr><td>它是整个Collection API的迭代器</td><td>它仅用于List 及其实现类</td></tr><tr><td>它仅支持单项迭代</td><td>它是双向迭代器，支持正反向迭代</td></tr><tr><td>它仅支持READ 和 DELETE 操作</td><td>它支持CRUD操作</td></tr><tr><td>可以使用iterator（）方法获取Iterator</td><td>可以使用listIterator（）方法获取ListIterator对象</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（四）：Iterator 源码分析</title>
      <link href="/2020/03/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AIterator%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/03/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AIterator%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Java-Iterator-简述"><a href="#1、Java-Iterator-简述" class="headerlink" title="1、Java Iterator 简述"></a>1、Java Iterator 简述</h2><p>Iterator迭代器的定义：<strong>迭代器</strong>（Iterator）模式，又叫做<strong>游标</strong>（Cursor）模式。GOF给出的定义是，提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。迭代器通常被称为“<strong>轻量级</strong>”对象，因为创建它的代价小。</p><p>在Java中，Iterator是 java.util 包中** Collection** 框架中的接口。 它是一个Java Cursor，用于迭代一组对象。<br>🌂它用于逐个遍历集合对象元素。<br>🌂它自 Java 1.2 被引入使用<br>🌂它适用于所有 Collection 类。 所以它也被称为通用 Java Cursor。<br>🌂它支持READ和REMOVE操作</p><h2 id="2、Java-4种-Cursors"><a href="#2、Java-4种-Cursors" class="headerlink" title="2、Java 4种 Cursors"></a>2、Java 4种 Cursors</h2><p>Java Cursor 是一个<strong>迭代器</strong>，用于逐个迭代或遍历或检索Collection或Stream对象的元素。<br>Java支持以下<strong>四种</strong>不同的** Cursor**<br><img src="https://s1.ax1x.com/2020/03/30/GnIws1.png"></p><h2 id="3、Java-Iterator-类图"><a href="#3、Java-Iterator-类图" class="headerlink" title="3、Java Iterator 类图"></a>3、Java Iterator 类图</h2><p>如下面的类图所示，Java Iterator有四种方法。 我们已经熟悉前四种方法。 Oracle公司在Java SE 8版本中为此接口添加了第四种方法。<br><img src="https://s1.ax1x.com/2020/03/30/GnIUz9.png"></p><h2 id="4、Java-Iterator-方法"><a href="#4、Java-Iterator-方法" class="headerlink" title="4、Java Iterator 方法"></a>4、Java Iterator 方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查集合中是否还有元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回迭代的下一个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException 如果没有可迭代的元素将抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    E <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *将迭代器新返回的元素删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对每个剩余元素执行给定操作，直到所有元素都被处理或操作抛出异常。</span></span><br><span class="line"><span class="comment">     * 如果指定了该顺序，则操作按迭代顺序执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> E&gt; action)</span> &#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、Iterator使用示例"><a href="#5、Iterator使用示例" class="headerlink" title="5、Iterator使用示例"></a>5、Iterator使用示例</h2><p>简单的应用事例，对一个元素为字符串类型的List集合进行遍历，我们显式获取集合的迭代器进行遍历，只将第一个元素直接输出，其余元素做指定的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="string">&quot;item&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; listIterator = list.iterator();</span><br><span class="line">        <span class="comment">//判断是否还有元素</span></span><br><span class="line">        <span class="keyword">while</span> (listIterator.hasNext()) &#123;</span><br><span class="line">            System.err.println(listIterator.next());</span><br><span class="line">            <span class="comment">//对剩下的元素执行指定操作</span></span><br><span class="line">            listIterator.forEachRemaining((String consumer) -&gt; &#123;</span><br><span class="line">                System.err.println(consumer.concat(<span class="string">&quot;-test&quot;</span>));</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">item0</span><br><span class="line">item1-test</span><br><span class="line">item2-test</span><br><span class="line">item3-test</span><br><span class="line">item4-test</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6、自定义类迭代器"><a href="#6、自定义类迭代器" class="headerlink" title="6、自定义类迭代器"></a>6、自定义类迭代器</h2><p>定义一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> empid;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> String designation;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">int</span> empid, String ename, String designation, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empid = empid;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">        <span class="built_in">this</span>.designation = designation;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEmpid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesignation</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> designation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empid + <span class="string">&quot;\t&quot;</span> + ename + <span class="string">&quot;\t&quot;</span> + designation + <span class="string">&quot;\t&quot;</span> + salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义一个对象集合 Employees 并实现 Iterable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employees</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; emps = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employees</span><span class="params">()</span> &#123;</span><br><span class="line">        emps = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        emps.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1001</span>, <span class="string">&quot;黄一&quot;</span>, <span class="string">&quot;组长&quot;</span>, <span class="number">250000L</span>));</span><br><span class="line">        emps.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1002</span>, <span class="string">&quot;李二&quot;</span>, <span class="string">&quot;开发&quot;</span>, <span class="number">150000L</span>));</span><br><span class="line">        emps.add(<span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1003</span>, <span class="string">&quot;王三&quot;</span>, <span class="string">&quot;测试&quot;</span>, <span class="number">150000L</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;Employee&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> emps.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试对象迭代 EmployeesTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeesTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employees</span> <span class="variable">emps</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employees</span>();</span><br><span class="line">        <span class="keyword">for</span>(Object emp : emps)&#123;</span><br><span class="line">            System.out.println(emp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>输出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1001</span>黄一组长<span class="number">250000.0</span></span><br><span class="line"><span class="number">1002</span>李二开发<span class="number">150000.0</span></span><br><span class="line"><span class="number">1003</span>王三测试<span class="number">150000.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、Java-Iterator-内部是如何工作的？"><a href="#7、Java-Iterator-内部是如何工作的？" class="headerlink" title="7、Java Iterator 内部是如何工作的？"></a>7、Java Iterator 内部是如何工作的？</h2><p>我们将尝试分析 <strong>Java Iterator</strong> 及其方法如何在内部工作的，在此 我们借助** LinkedList** 对象来理解此功能。</p><p>首先，初始化一个对象** LinkedList**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">names.add(<span class="string">&quot;E-1&quot;</span>);</span><br><span class="line">names.add(<span class="string">&quot;E-2&quot;</span>);</span><br><span class="line">names.add(<span class="string">&quot;E-3&quot;</span>);</span><br><span class="line">................</span><br><span class="line">names.add(<span class="string">&quot;E-n&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取对象** names** 的迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; namesIterator = names.iterator();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们假设，此时 <strong>namesIterator</strong> 迭代器如下，此时迭代器的 cursor 指向第一元素之前的位置：<br><img src="https://s1.ax1x.com/2020/03/30/GnINRJ.png"><br>我们执行如下代码：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namesIterator.hasNext();</span><br><span class="line">  namesIterator.next();</span><br></pre></td></tr></table></figure><p>此时 namesIterator 的 cursor 已经指向了第一个元素，如下图：<br><img src="https://s1.ax1x.com/2020/03/30/GnIYiF.png"><br>我们再次执行如下代码，此时 namesIterator 的 cursor 会执行下一个元素，我们循环此操作，当 cursor 指向最后一个元素时，namesIterator.hasNext() 将会返回 false，此时元素迭代完成，如下图：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">namesIterator.hasNext();</span><br><span class="line"> namesIterator.next();</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/30/GnIdMR.png"><br>在观察了以上过程之后，我们会发现 Java Iterator 仅支持 Forward Direction Iteration（正向迭代），如下图所示。 所以它也被称为正向迭代。<br><img src="https://s1.ax1x.com/2020/03/30/Gnjlp6.png"></p><h2 id="8、Iterator总结"><a href="#8、Iterator总结" class="headerlink" title="8、Iterator总结"></a>8、Iterator总结</h2><p>Java中的Iterator功能比较简单，并且只能单向移动：</p><p>🌂 方法iterator()将返回一个Iterator。首次调用next()方法时，它将返回第一个元素</p><p>🌂 next() 返回下一个元素</p><p>🌂 hasNext() 检查集合中是否还有元素</p><p>🌂 remove() 将迭代器新返回的元素删除</p><p>🌂 forEachRemaining() 对每个剩余的元素执行指定的操作</p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（三）：Collection 源码分析</title>
      <link href="/2020/03/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ACollection%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2020/03/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ACollection%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>本文我们主要学习Java集合框架的根接口<strong>Collection</strong>，通过本文我们可以进一步了解Collection的属性及提供的方法。在介绍Collection接口之前我们不得不先学习一下<strong>Iterable</strong>，因为Collection接口<strong>继承</strong>了它。</p><h2 id="Collection接口类图"><a href="#Collection接口类图" class="headerlink" title="Collection接口类图"></a>Collection接口类图</h2><p>从类图中我们看到Collection接口继承了Iterable接口<br><img src="https://s1.ax1x.com/2020/03/30/GnI0qx.png"></p><h2 id="Iterable源码分析"><a href="#Iterable源码分析" class="headerlink" title="Iterable源码分析"></a>Iterable源码分析</h2><p>由类图我们可以发现，Iterable接口有<strong>三个方法</strong>，其中两个方法使用default修饰的，这是jdk1.8的新特性，允许接口中有默认实现方法，其实现类中可以有选择的重写这部分方法，下面我们看一下每个方法的作用是什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#返回元素类型为T的迭代器，有了这个迭代器就可以对集合中元素进行遍历</span><br><span class="line">Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">#遍历集合中的元素并对元素进行执行操作，直到遍历完成或抛出异常</span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; action)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(action);</span><br><span class="line">    <span class="keyword">for</span> (T t : <span class="built_in">this</span>) &#123;</span><br><span class="line">         action.accept(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#Spliterator（splitable iterator可分割迭代器），对集合进行并行遍历</span><br><span class="line"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Iterable接口总结："><a href="#Iterable接口总结：" class="headerlink" title="Iterable接口总结："></a>Iterable接口总结：</h2><p>默认为所有集合类添加了两个方法，<br>一个是<strong>遍历并处理集合元素</strong><br>一个是<strong>可分割迭代器，与方法iterator相比，一个是顺序遍历，一个是并行遍历</strong></p><h2 id="Collection接口源码分析"><a href="#Collection接口源码分析" class="headerlink" title="Collection接口源码分析"></a>Collection接口源码分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查询操作，以下方法属于查询操作</span></span><br><span class="line">#返回集合中元素数量，如果元素数量大于Integer.MAX_VALUE将返回Integer.MAX_VALUE</span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">#如果集合中没有元素，将返回<span class="literal">true</span>，否则返回<span class="literal">false</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">#如果集合中包含指定的元素，则返回<span class="literal">true</span>，否则<span class="literal">false</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line">#返回该集合中元素的迭代器。对于返回元素的顺序，没有任何保证。</span><br><span class="line">Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">#如果此集合对其迭代器返回的元素的顺序有任何保证，则该方法必须以相同的顺序返回元素。</span><br><span class="line">#这个方法必须分配一个新数组，即使这个集合是由数组组成的。</span><br><span class="line">#这个方法充当集合与数组之间转换的桥梁</span><br><span class="line">Object[] toArray();</span><br><span class="line"></span><br><span class="line">#返回一个包含集合中所有元素的数组</span><br><span class="line">#如果集合中的元素类型与指定数组类型相匹配则直接按照元素中数组类型返回</span><br><span class="line">#否则，将使用指定数组的运行时类型和该集合的大小分配新的数组。</span><br><span class="line">#如果此集合对其迭代器返回的元素的顺序有任何保证，则该方法必须以相同的顺序返回元素。</span><br><span class="line">#T:返回数组的类型</span><br><span class="line">#a:如果该数组足够大可以容纳集合中所有元素，则使用该数组存储，否则将根据集合大小和元素类型重新创建一个数组</span><br><span class="line">&lt;T&gt; T[] toArray(T[] a);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改操作，以下方法属于修改操作</span></span><br><span class="line"></span><br><span class="line">#向集合中添加元素，如果该元素在集合中已经存在则返回<span class="literal">false</span>，否则返回<span class="literal">true</span></span><br><span class="line">#集合本身对添加的元素会有所限制，比如有些集合拒绝添加<span class="literal">null</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>;</span><br><span class="line"></span><br><span class="line">#从集合中删除指定元素，如果指定的元素存在集合中并完成了删除操作，则返回<span class="literal">true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量操作</span></span><br><span class="line"></span><br><span class="line"> #如果集合中包含指定的所有元素，则返回<span class="literal">true</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span>;</span><br><span class="line"></span><br><span class="line">#将指定集合中的所有元素添加到此集合</span><br><span class="line">#如果在运行过程中修改指定的集合，则该操作的行为是未定义的</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span>;</span><br><span class="line"></span><br><span class="line">#从当前集合中移除指定集合中的所有元素</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"># <span class="meta">@since</span> <span class="number">1.8</span></span><br><span class="line">#删除该集合中满足给定谓词的所有元素</span><br><span class="line">#在迭代期间抛出的任何异常都会传递给调用者</span><br><span class="line"><span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">removeIf</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> E&gt; filter)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(filter);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">removed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">final</span> Iterator&lt;E&gt; each = iterator();</span><br><span class="line">    <span class="keyword">while</span> (each.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter.test(each.next())) &#123;</span><br><span class="line">            each.remove();</span><br><span class="line">            removed = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#只保留集合中指定的元素</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span>;</span><br><span class="line"></span><br><span class="line">#清空集合中所有元素</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较和散列</span></span><br><span class="line"></span><br><span class="line">#比较指定对象与当前集合是否相等</span><br><span class="line">#<span class="meta">@see</span> Object#equals(Object)</span><br><span class="line">#<span class="meta">@see</span> Set#equals(Object)</span><br><span class="line">#<span class="meta">@see</span> List#equals(Object)</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span>;</span><br><span class="line"></span><br><span class="line">#<span class="meta">@see</span> Object#hashCode()</span><br><span class="line">#<span class="meta">@see</span> Object#equals(Object)</span><br><span class="line">#返回当前对象的哈希值</span><br><span class="line"><span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#<span class="meta">@since</span> <span class="number">1.8</span></span><br><span class="line">#创建一个集合的并行迭代器</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">default</span> Spliterator&lt;E&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Spliterators.spliterator(<span class="built_in">this</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">#<span class="meta">@since</span> <span class="number">1.8</span></span><br><span class="line">#将当前集合作为数据源，创建一个序列流</span><br><span class="line"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title function_">stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#<span class="meta">@since</span> <span class="number">1.8</span></span><br><span class="line">#将当前集合作为数据源，创建一个可并行计算的序列流</span><br><span class="line"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title function_">parallelStream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（二）：整体概览</title>
      <link href="/2020/03/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%95%B4%E4%BD%93%E6%A6%82%E8%A7%88/"/>
      <url>/2020/03/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%95%B4%E4%BD%93%E6%A6%82%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h2 id="Java集合框架简述"><a href="#Java集合框架简述" class="headerlink" title="Java集合框架简述"></a>Java集合框架简述</h2><p>Java中的集合类是一种工具类，就像是容器，存储任意数量的具有共同属性的对象，集合框架是一个用来代表和操纵集合的统一架构，包含如下部分：</p><h2 id="1、接口："><a href="#1、接口：" class="headerlink" title="1、接口："></a>1、接口：</h2><p>接口是代表集合的抽象数据类型，接口允许集合独立操纵其代表的细节。java.util.Collection是集合框架的顶级接口，它包含了一些重要的方法，比如：size(), iterator(), add(), remove(), clear()，集合类中都会实现这些方法。还有一些其它的重要接口，java.util.List, java.util.Set, java.util.Queue 和 java.util.Map。Map接口是一个独立的接口，它没有实现接口Collection，但它是结合框架重要的一部分。所有集合框架接口都在java.util包中。<br><img src="https://s1.ax1x.com/2020/03/29/GZMUud.jpg"></p><p><strong>下图中虚线为接口，红色为实现类</strong><br><img src="https://s1.ax1x.com/2020/03/29/GZMaDA.png"></p><table><thead><tr><th>序号</th><th>接口描述</th></tr></thead><tbody><tr><td>1</td><td>Collection 接口是最基本的集合接口，一个 Collection 代表一组 Object，即 Collection 的元素, Java不提供直接继承自Collection的类，      只提供继承于的子接口(如List和set)。</td></tr><tr><td>2</td><td>List接口是一个有序的 Collection，使用此接口能够精确的控制每个元素插入的位置，能够通过索引(元素在List中位置，类似于数组的下标)来访问List中的元素，第一个元素的索引为 0，而且允许有相同的元素。</td></tr><tr><td>3</td><td>Set 具有与 Collection 完全一样的接口，只是行为上不同，Set 不保存重复的元素。</td></tr><tr><td>4</td><td>SortedSet继承于Set保存有序的集合。</td></tr><tr><td>5</td><td>Map将唯一的键映射到值。</td></tr><tr><td>6</td><td>Map.Entry描述在一个Map中的一个元素（键&#x2F;值对）。是一个Map的内部类。</td></tr><tr><td>7</td><td>SortedMap继承于Map，使Key保持在升序排列。</td></tr><tr><td>8</td><td>Enumeration这是一个传统的接口和定义的方法，通过它可以枚举（一次获得一个）对象集合中的元素。这个传统接口已被迭代器取代。</td></tr></tbody></table><h3 id="Set和List的区别"><a href="#Set和List的区别" class="headerlink" title="Set和List的区别"></a>Set和List的区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Set 接口实例存储的是无序的，不重复的数据。List 接口实例存储的是有序的，可以重复的元素。</span><br><span class="line"></span><br><span class="line">2. Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变 &lt;实现类有HashSet,TreeSet&gt;。</span><br><span class="line"></span><br><span class="line">3. List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长List的长度。查找元素效率高，插入删除效率低，因为会引起其他元素位置改变 &lt;实现类有ArrayList,LinkedList,Vector&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、实现类"><a href="#2、实现类" class="headerlink" title="2、实现类"></a>2、实现类</h2><p>是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构。<br><img src="https://s1.ax1x.com/2020/03/29/GZMtjH.jpg"></p><table><thead><tr><th>序号</th><th>类描述</th></tr></thead><tbody><tr><td>1</td><td>AbstractCollection 实现了大部分的集合接口。</td></tr><tr><td>2</td><td>AbstractList 继承于AbstractCollection 并且实现了大部分List接口。</td></tr><tr><td>3</td><td>AbstractSequentialList 继承于 AbstractList ，提供了对数据元素的链式访问而不是随机访问。</td></tr><tr><td>4</td><td>LinkedList该类实现了List接口，允许有null（空）元素。主要用于创建链表数据结构，该类没有同步方法，如果多个线程同时访问一个List，则必须自己实现访问同步，解决方法就是在创建List时候构造一个同步的List。例如： Listlist&#x3D;Collections.synchronizedList(newLinkedList(…)); LinkedList 查找效率低。</td></tr><tr><td>5</td><td>ArrayList该类也是实现了List的接口，实现了可变大小的数组，随机访问和遍历元素时，提供更好的性能。该类也是非同步的,在多线程的情况下不要使用。ArrayList 增长当前长度的50%，插入删除效率低。</td></tr><tr><td>6</td><td>AbstractSet 继承于AbstractCollection 并且实现了大部分Set接口。</td></tr><tr><td>7</td><td>HashSet该类实现了Set接口，不允许出现重复元素，不保证集合中元素的顺序，允许包含值为null的元素，但最多只能一个。</td></tr><tr><td>8</td><td>LinkedHashSet   具有可预知迭代顺序的 Set 接口的哈希表和链接列表实现。</td></tr><tr><td>9</td><td>TreeSet该类实现了Set接口，可以实现排序等功能。</td></tr><tr><td>10</td><td>AbstractMap 实现了大部分的Map接口。</td></tr><tr><td>11</td><td>HashMap HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。该类实现了Map接口，根据键的HashCode值存储数据，具有很快的访问速度，最多允许一条记录的键为null，不支持线程同步。</td></tr><tr><td>12</td><td>TreeMap 继承了AbstractMap，并且使用一颗树。</td></tr><tr><td>13</td><td>WeakHashMap 继承AbstractMap类，使用弱密钥的哈希表。</td></tr><tr><td>14</td><td>LinkedHashMap 继承于HashMap，使用元素的自然顺序对元素进行排序.</td></tr><tr><td>15</td><td>IdentityHashMap 继承AbstractMap类，比较文档时使用引用相等。</td></tr></tbody></table><h2 id="Java集合框架优点"><a href="#Java集合框架优点" class="headerlink" title="Java集合框架优点"></a>Java集合框架优点</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、减少开发工作</span><br><span class="line">它提供了几乎所有常见类型的集合和用于迭代和操作数据的有用方法，因此，我们可以更专注于业务逻辑，而不是设计我们的集合api</span><br><span class="line"></span><br><span class="line">2、提高代码质量</span><br><span class="line">使用经过良好测试的核心集合类可以提高我们的程序质量，提高了代码的健壮性和可用性</span><br><span class="line"></span><br><span class="line">3、可重用性和互操作性</span><br><span class="line"></span><br><span class="line">4、降低维护成本</span><br><span class="line">通过使用JDK附带的集合类，可以降低代码维护成本</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Java基础和数据结构学习有一段时间了，开始学习一下框架，到时候在用的时候也轻松多了，正所谓梦想还是要有的，万一哪一天就实现了呢，以梦为马，不负韶华！</p><p>——————————————————————————–致最努力的我们！<br><img src="https://s2.ax1x.com/2020/02/29/3y97qI.png"></p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架（一）：大纲</title>
      <link href="/2020/03/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%BA%B2/"/>
      <url>/2020/03/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%BA%B2/</url>
      
        <content type="html"><![CDATA[<p><a href="ttp://ur868q.coding-pages.com/2020/03/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%A4%A7%E7%BA%B2/"><strong>Java集合框架（一）：大纲</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/03/29/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E6%95%B4%E4%BD%93%E6%A6%82%E8%A7%88/#Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%BC%98%E7%82%B9"><strong>Java集合框架（二）：整体概览</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/03/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9ACollection%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（三）：Collection 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/03/30/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AIterator%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（四）：Iterator 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/03/31/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AListIterator%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（五）：ListIterator 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9ASet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#1%E3%80%81Set-%E7%AE%80%E8%BF%B0"><strong>JavaJava集合框架（六）：Set 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9ASortedSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（七）：SortedSet 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/03/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9AList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（八）：List 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B9%9D%EF%BC%89%EF%BC%9AQueue%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（九）：Queue 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%EF%BC%89%EF%BC%9ADeque%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十）：Deque 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十一）：Map 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%BA%8C%EF%BC%89%EF%BC%9ASortedMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十二）：SortedMap 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%89%EF%BC%89%EF%BC%9AHashSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十三）：HashSet 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%9B%9B%EF%BC%89%EF%BC%9ALinkedHashSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十四）：LinkedHashSet 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/04/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%BA%94%EF%BC%89%EF%BC%9ATreeSet%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十五）：TreeSet 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/05/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AD%EF%BC%89%EF%BC%9AArrayList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/#4-1-6%E3%80%81size"><strong>Java集合框架（十六）：ArrayList 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/06/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B8%83%EF%BC%89%EF%BC%9ALinkedList%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十七）：LinkedList 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/12/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E5%85%AB%EF%BC%89%EF%BC%9AHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十八）：HashMap 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/16/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E5%8D%81%E4%B9%9D%EF%BC%89%EF%BC%9ALinkedHashMap%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（十九）：LinkedHashMap 源码分析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/04/16/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%E5%8D%81%EF%BC%89%EF%BC%9ATreeMap%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"><strong>Java集合框架（二十）：TreeMap 源码解析</strong></a></p><p><a href="http://ur868q.coding-pages.com/2020/05/01/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9AHashTable%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"><strong>Java集合框架（二十一）：HashTable 源码分析</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> java集合框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java File操作汇总</title>
      <link href="/2020/03/29/Java%20File%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/"/>
      <url>/2020/03/29/Java%20File%E6%93%8D%E4%BD%9C%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="1、创建文件"><a href="#1、创建文件" class="headerlink" title="1、创建文件"></a>1、创建文件</h2><p>🌂boolean java.io.File.createNewFile() throws IOException用来创建文件，如果文件存在，创建失败，返回false；</p><p>🌂🌂new File(“a.txt”);并不创建文件实体，只是创建一个指向“a.txt”的引用。</p><p>🌂🌂路径分隔符：File.separator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//new File()就相当于是C语言中定义一个指向“a.txt”的文件指针</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建文件:boolean java.io.File.createNewFile() throws IOException</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> f1.createNewFile();</span><br><span class="line"><span class="comment">//第二次将会创建失败false，这里和流不一样</span></span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (Exception e) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//目录分隔符：File.separator，相当于“\\”跨平台。</span></span><br><span class="line"><span class="comment">//File f2 = new File(&quot;E:\\tmp&quot;,&quot;b.txt&quot;);</span></span><br><span class="line"><span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:&quot;</span>+File.separator+<span class="string">&quot;tmp&quot;</span>,<span class="string">&quot;b.txt&quot;</span>);</span><br><span class="line">System.out.println(f2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、删除文件"><a href="#2、删除文件" class="headerlink" title="2、删除文件"></a>2、删除文件</h2><p>🌂delete()：删除文件成功返回true，删除失败返回false（ boolean java.io.File.delete()  ）</p><p>🌂🌂deleteOnExit()：程序退出时，自动删除文件。一般用于对程序创建的临时文件进行操作，退出时删除。（ void java.io.File.deleteOnExit()  ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> f1.createNewFile();</span><br><span class="line"><span class="comment">//删除文件：boolean java.io.File.delete()</span></span><br><span class="line">f1.delete();</span><br><span class="line"><span class="comment">//程序退出时，自动删除：void java.io.File.deleteOnExit()</span></span><br><span class="line"><span class="comment">//f1.deleteOnExit();</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (Exception e) </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、判断文件是否存在"><a href="#3、判断文件是否存在" class="headerlink" title="3、判断文件是否存在"></a>3、判断文件是否存在</h2><p>exists()：判断文件是否存在（ boolean java.io.File.exists() ）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;not.txt&quot;</span>);</span><br><span class="line"><span class="comment">//判断文件是否存在：boolean java.io.File.exists()</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> f1.exists();</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4、创建文件夹"><a href="#4、创建文件夹" class="headerlink" title="4、创建文件夹"></a>4、创建文件夹</h2><p>🌂mkdir()：只能创建“一级目录”（boolean java.io.File.mkdir()）；</p><p>🌂🌂mkdirs()：可以创建多级目录（boolean java.io.File.mkdirs()）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">File</span> <span class="variable">dir1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">dir2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a\\b\\c\\d&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建文件目录(即文件夹)：boolean java.io.File.mkdir()</span></span><br><span class="line"><span class="comment">//该方法只能创建“一级”目录</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span>  dir1.mkdir();</span><br><span class="line">System.out.println(b);</span><br><span class="line"><span class="comment">//创建多级文件夹：boolean java.io.File.mkdirs()</span></span><br><span class="line">b =  dir2.mkdirs();</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (Exception e) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5、文件类型判断"><a href="#5、文件类型判断" class="headerlink" title="5、文件类型判断"></a>5、文件类型判断</h2><p>🌂exists()：判断文件是否存在，注意：一定要先判断这个；</p><p>🌂🌂isDirectory()：判断是否为文件夹；</p><p>🌂🌂🌂isFile()：判断是否为文件；</p><p>🌂🌂🌂🌂isHidden()：判断是否为隐藏文件；</p><p>🌂🌂🌂🌂🌂isAbsolute()：判断是否为绝对路径，这里不管文件是否存在都能判断。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\abc.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> (f.exists())</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断文件是否是文件夹</span></span><br><span class="line"><span class="keyword">if</span> (f.isDirectory())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件夹&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断文件是否是文件</span></span><br><span class="line"><span class="keyword">if</span> (f.isFile())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为隐藏文件</span></span><br><span class="line"><span class="keyword">if</span> (f.isHidden())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;隐藏文件&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为绝对路径，不管文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> (f.isAbsolute())</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;是绝对路径&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (Exception e) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、获取文件信息"><a href="#6、获取文件信息" class="headerlink" title="6、获取文件信息"></a>6、获取文件信息</h2><p>🌂getName()：获取文件名；</p><p>🌂🌂getParent()：获取文件父目录；</p><p>🌂🌂🌂getPath()：获取文件路径；</p><p>🌂🌂🌂🌂getAbsolutePath()：获取文件绝对路径；</p><p>🌂🌂🌂🌂🌂lastModified()：获得文件最后一次被修改的时间；</p><p>🌂🌂🌂🌂🌂🌂length()：获取文件大小；</p><p>🌂🌂🌂🌂🌂🌂🌂renameTo()：文件剪切，将文件f1剪切然后粘贴到f2（相当于右键f1-&gt;剪切-&gt;粘贴-&gt;f2所在目录）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;abc.txt&quot;</span>);</span><br><span class="line"><span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Java\\test.txt&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获得文件名</span></span><br><span class="line">System.out.println(f1.getName());</span><br><span class="line"><span class="comment">//获得绝对路径中的父目录，如：File(&quot;abc.txt&quot;)则该返回为null</span></span><br><span class="line">System.out.println(f1.getParent());</span><br><span class="line"><span class="comment">//获得相对路径</span></span><br><span class="line">System.out.println(f1.getPath());</span><br><span class="line"><span class="comment">//获得绝对路径</span></span><br><span class="line">System.out.println(f1.getAbsolutePath());</span><br><span class="line"><span class="comment">//获得文件最后一次被修改的时间</span></span><br><span class="line">System.out.println(f1.lastModified());</span><br><span class="line"><span class="comment">//获得文件大小</span></span><br><span class="line">System.out.println(f1.length());</span><br><span class="line"><span class="comment">//文件剪切，将文件f1剪切然后粘贴到f2（相当于右键f1-&gt;剪切-&gt;粘贴-&gt;f2所在目录）</span></span><br><span class="line">f1.renameTo(f2);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">catch</span> (Exception e) </span><br><span class="line">&#123;</span><br><span class="line">System.out.println(e.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7、获取目录下文件名"><a href="#7、获取目录下文件名" class="headerlink" title="7、获取目录下文件名"></a>7、获取目录下文件名</h2><p>🌂listRoots()：获取系统盘符；</p><p>🌂🌂list()：获取“X:\”目录下的所有文件名，包括隐藏文件和文件夹（调用list()方法时，必须先封装一个目录，且必须存在的目录。）</p><p>🌂🌂🌂list(FilenameFilter filter)：列出文件名的时候，可以进行过滤操作（如：列出后缀名为.txt的文件）。</p><p>🌂🌂🌂🌂listFiles()：列出目录下文件名，不包括文件夹。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FilenameFilter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//1.获得系统有效盘符</span></span><br><span class="line">File[] files = File.listRoots();</span><br><span class="line"><span class="keyword">for</span> (File f : files)</span><br><span class="line">System.out.println(f.toString());</span><br><span class="line">System.out.println(<span class="string">&quot;——————————————————————&quot;</span>);</span><br><span class="line"><span class="comment">//2.获得C:\\目录下的所有文件名，包括隐藏文件和文件夹</span></span><br><span class="line"><span class="comment">//调用list()方法时，必须先封装一个目录，且必须存在的目录。</span></span><br><span class="line"><span class="type">File</span> <span class="variable">fnFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;C:\\&quot;</span>);</span><br><span class="line">String[] strings = fnFile.list();</span><br><span class="line"><span class="keyword">for</span> (String s : strings)</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(<span class="string">&quot;——————————————————————&quot;</span>);</span><br><span class="line"><span class="comment">//3.调用list()方法，列出后缀名为.txt的文件</span></span><br><span class="line">strings = fnFile.list(<span class="keyword">new</span> <span class="title class_">FilenameFilter</span>() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">accept</span><span class="params">(File dir, String name)</span> &#123;</span><br><span class="line"><span class="comment">//找出后缀名为.txt的文件名</span></span><br><span class="line"><span class="keyword">return</span> name.endsWith(<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (String s : strings)</span><br><span class="line">System.out.println(s);</span><br><span class="line">System.out.println(<span class="string">&quot;——————————————————————&quot;</span>);</span><br><span class="line"><span class="comment">//4.获取C:\\目录下的文件夹，不包括文件夹</span></span><br><span class="line">files = fnFile.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File f : files)</span><br><span class="line">System.out.println(f.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8、递归打印所有文件名"><a href="#8、递归打印所有文件名" class="headerlink" title="8、递归打印所有文件名"></a>8、递归打印所有文件名</h2><p><strong>注意</strong>：测试中，有些隐藏文件名不能访问还是其他的原因，当在打印根目录（如：”C:\“）下的所有文件名时，会有个叫“System Volume Information”的隐藏文件夹，访问失败，所以以下代码中，不访问隐藏文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">File</span> <span class="variable">dirFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Dol&quot;</span>);</span><br><span class="line">showDir(dirFile,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showDir</span><span class="params">(File dir,<span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(printSpace(level)+<span class="string">&quot;文件夹：&quot;</span>+dir.getName());</span><br><span class="line">level += <span class="number">4</span>;</span><br><span class="line">File[] file = dir.listFiles();</span><br><span class="line"><span class="keyword">for</span> (File f : file)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//递归进入所有非隐藏文件夹</span></span><br><span class="line"><span class="keyword">if</span> (f.isDirectory() &amp;&amp; !f.isHidden())</span><br><span class="line">showDir(f,level);</span><br><span class="line"><span class="comment">//打印文件名</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">System.out.println(printSpace(level)+f.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现分层次打印，补充空格</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title function_">printSpace</span><span class="params">(<span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">StringBuffer</span> <span class="variable">space</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; level; ++i)</span><br><span class="line">&#123;</span><br><span class="line">space.append(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> space;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9、递归删除整个文件夹"><a href="#9、递归删除整个文件夹" class="headerlink" title="9、递归删除整个文件夹"></a>9、递归删除整个文件夹</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">File</span> <span class="variable">dirFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;E:\\Dol&quot;</span>);</span><br><span class="line">deleteDir(dirFile,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteDir</span><span class="params">(File dir,<span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line">File[] file = dir.listFiles();</span><br><span class="line"><span class="comment">//循环递归删除文件夹里面的所有内容</span></span><br><span class="line"><span class="keyword">for</span> (File f : file)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//递归进入所有非隐藏文件夹</span></span><br><span class="line"><span class="keyword">if</span> (f.isDirectory() &amp;&amp; !f.isHidden())</span><br><span class="line">deleteDir(f,level);</span><br><span class="line"><span class="comment">//删除文件</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">f.delete();</span><br><span class="line">System.out.println(f.getName()+<span class="string">&quot;——已删除&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除该文件夹</span></span><br><span class="line">dir.delete();</span><br><span class="line">System.out.println(dir.getName()+<span class="string">&quot;——已删除&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10、Properties类"><a href="#10、Properties类" class="headerlink" title="10、Properties类"></a>10、Properties类</h2><h3 id="1）常用的基本操作，设置键值，获取值。"><a href="#1）常用的基本操作，设置键值，获取值。" class="headerlink" title="1）常用的基本操作，设置键值，获取值。"></a>1）常用的基本操作，设置键值，获取值。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//Properties是HashTable的子类，里面存放的都是键值对的字符串</span></span><br><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//设置键值</span></span><br><span class="line">prop.setProperty(<span class="string">&quot;Dolphin&quot;</span>, <span class="string">&quot;海豚&quot;</span>);</span><br><span class="line">prop.setProperty(<span class="string">&quot;Dol&quot;</span>, <span class="string">&quot;CSDN&quot;</span>);</span><br><span class="line"><span class="comment">//获取</span></span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> prop.getProperty(<span class="string">&quot;Dolphin&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;@@@@value@@@@&quot;</span>+value);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个集合</span></span><br><span class="line">Set&lt;String&gt; nameSet = prop.stringPropertyNames();</span><br><span class="line"><span class="keyword">for</span> (String s : nameSet)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(s+<span class="string">&quot;:&quot;</span>+prop.getProperty(s));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2）读取配置文件"><a href="#2）读取配置文件" class="headerlink" title="2）读取配置文件"></a>2）读取配置文件</h3><p>读取配置文件，并对配置文件进行修改，修改后再保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line"><span class="comment">//Properties加载的文件必须为键值对，#注释的不会被加载</span></span><br><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;pz.txt&quot;</span>);</span><br><span class="line">prop.load(fis);</span><br><span class="line"><span class="comment">//添加一个键值对</span></span><br><span class="line">prop.setProperty(<span class="string">&quot;Dol&quot;</span>, <span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="comment">//对键值对进行修改</span></span><br><span class="line">prop.setProperty(<span class="string">&quot;Dol&quot;</span>, <span class="string">&quot;321&quot;</span>);</span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;pz.txt&quot;</span>);</span><br><span class="line"><span class="comment">//保存配置文件</span></span><br><span class="line"><span class="comment">//void java.util.Properties.store(OutputStream arg0, String arg1) throws IOException</span></span><br><span class="line"><span class="comment">//第二个参数为注释，可写可不写，写入时会自动添加#</span></span><br><span class="line">prop.store(fos, <span class="string">&quot;comment&quot;</span>);</span><br><span class="line"></span><br><span class="line">prop.list(System.out);</span><br><span class="line">fis.close();</span><br><span class="line">fos.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11、SequenceInputStream类：连接多个流"><a href="#11、SequenceInputStream类：连接多个流" class="headerlink" title="11、SequenceInputStream类：连接多个流"></a>11、SequenceInputStream类：连接多个流</h2><p>说明：Enumeration（列举）<br>public interface Enumeration<E>实现 Enumeration 接口的对象，它生成一系列元素，一次生成一个。连续调用 nextElement 方法将返回一系列的连续元素。<br>例如，要输出 Vector<E> v 的所有元素，可使用以下方法：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();)</span><br><span class="line">  System.out.println(e.nextElement());</span><br></pre></td></tr></table></figure><br>这些方法主要通过向量的元素、哈希表的键以及哈希表中的值进行枚举。枚举也用于将输入流指定到 SequenceInputStream 中。<br><strong>注</strong>：此接口的功能与 Iterator 接口的功能是重复的。此外，Iterator 接口添加了一个可选的移除操作，并使用较短的方法名。新的实现应该优先考虑使用 Iterator 接口而不是 Enumeration 接口。<br>有两个方法：<br>🌂hasMoreElements() 测试此枚举是否包含更多的元素。<br>🌂🌂nextElement() 如果此枚举对象至少还有一个可提供的元素，则返回此枚举的下一个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.SequenceInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//将多个流加入集合</span></span><br><span class="line">Vector&lt;FileInputStream&gt; vector = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;FileInputStream&gt;();</span><br><span class="line">vector.add(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\1.txt&quot;</span>));</span><br><span class="line">vector.add(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\2.txt&quot;</span>));</span><br><span class="line">vector.add(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\3.txt&quot;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">//java.util.Enumeration&lt;FileInputStream&gt;用法见说明</span></span><br><span class="line">Enumeration&lt;FileInputStream&gt; en = vector.elements();</span><br><span class="line"><span class="comment">//连接多个流</span></span><br><span class="line"><span class="type">SequenceInputStream</span> <span class="variable">sis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SequenceInputStream</span>(en);</span><br><span class="line"><span class="comment">//启动输出流</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;E:\\4.txt&quot;</span>);</span><br><span class="line"><span class="comment">//开始文件拷贝</span></span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((len=sis.read(buf))!=-<span class="number">1</span>)</span><br><span class="line">fos.write(buf,<span class="number">0</span>,len);</span><br><span class="line"><span class="comment">//关闭资源</span></span><br><span class="line">fos.close();</span><br><span class="line">sis.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12、对象序列化实现Serializable接口"><a href="#12、对象序列化实现Serializable接口" class="headerlink" title="12、对象序列化实现Serializable接口"></a>12、对象序列化实现Serializable接口</h2><p>🌂添加序列号；</p><p>🌂🌂静态成员变量不可序列化；</p><p>🌂🌂🌂堆内存变量要想不被序列化，可以加transient关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//序列化，必须实现Serializable接口，该接口不需要覆盖方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//记得添加序列化号</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">42L</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//堆内存变量可序列化</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"><span class="comment">//如果不想将堆内存里面的变量序列化，如下声明就可以了</span></span><br><span class="line"><span class="comment">//transient int age;</span></span><br><span class="line"><span class="comment">//注意，静态成员变量不可序列化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&quot;male&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String n, <span class="type">int</span> a, String s)</span></span><br><span class="line">&#123;</span><br><span class="line">name = n;</span><br><span class="line">age = a;</span><br><span class="line">sex = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//覆盖toString()方便println()打印</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> name+<span class="string">&quot;:&quot;</span>+age+<span class="string">&quot;:&quot;</span>+sex;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">WriteOut</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;obj.txt&quot;</span>));</span><br><span class="line">oos.writeObject(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Dolphin&quot;</span>, <span class="number">20</span>,<span class="string">&quot;female&quot;</span>));</span><br><span class="line">oos.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ReadIn</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;obj.txt&quot;</span>));</span><br><span class="line"><span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> (Person)ois.readObject();</span><br><span class="line">ois.close();</span><br><span class="line">System.out.println(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里直接抛出一个较大的异常Exception（IOException的基类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//注意：以下函数需要分两次运行，每次只运行一个，方便观察运行效果</span></span><br><span class="line"><span class="comment">//WriteOut();</span></span><br><span class="line">ReadIn();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13、管道流"><a href="#13、管道流" class="headerlink" title="13、管道流"></a>13、管道流</h2><p>🌂平时两个流读写都是通过内存变量，进行数据操作的；</p><p>🌂🌂这里引入管道流，开启两个线程，一个读取流，一个写入流，直接将两个流对接上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.PipedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PipedOutputStream;</span><br><span class="line"><span class="comment">//实现Runnable方法，多线程</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Read</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> PipedInputStream in;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Read</span><span class="params">(PipedInputStream in)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.in = in;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//如果流中无数据，read()进入等待状态</span></span><br><span class="line"><span class="keyword">while</span> ((len=in.read(buf))!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(buf);</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;管道流读取失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Write</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> PipedOutputStream out;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Write</span><span class="params">(PipedOutputStream in)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.out = out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out.write(<span class="string">&quot;Piped lai la...&quot;</span>.getBytes());</span><br><span class="line">out.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;管道流输出失败&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PipedStreamDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">PipedInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedInputStream</span>();</span><br><span class="line"><span class="type">PipedOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PipedOutputStream</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Read</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Read</span>(in);</span><br><span class="line"><span class="type">Write</span> <span class="variable">w</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Write</span>(out);</span><br><span class="line"><span class="comment">//开启两线程</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(r).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(w).start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14、RandomAccessFile类"><a href="#14、RandomAccessFile类" class="headerlink" title="14、RandomAccessFile类"></a>14、RandomAccessFile类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.RandomAccessFile;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RafDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Read</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;raf.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line"><span class="type">byte</span>[] buf= <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">raf.read(buf);</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf);</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">age = raf.readInt();</span><br><span class="line"></span><br><span class="line">raf.close();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;网名：&quot;</span>+name);</span><br><span class="line">System.out.println(<span class="string">&quot;年龄：&quot;</span>+age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Write</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">raf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;raf.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">raf.write(<span class="string">&quot;海豚&quot;</span>.getBytes());</span><br><span class="line">raf.writeInt(<span class="number">20</span>);</span><br><span class="line">raf.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">Write();</span><br><span class="line">Read();</span><br><span class="line"><span class="comment">//调整指针位置</span></span><br><span class="line"><span class="comment">//raf.seek(pos);</span></span><br><span class="line"><span class="comment">//跳过字节数</span></span><br><span class="line"><span class="comment">//raf.skipBytes(n);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15、DataStream类"><a href="#15、DataStream类" class="headerlink" title="15、DataStream类"></a>15、DataStream类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.DataInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataStreamDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//写数据</span></span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">out.writeInt(<span class="number">123</span>);</span><br><span class="line">out.writeDouble(<span class="number">56.88</span>);</span><br><span class="line">out.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">out.close();</span><br><span class="line"><span class="comment">//读数据</span></span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.txt&quot;</span>));</span><br><span class="line"><span class="type">int</span> <span class="variable">nInt</span> <span class="operator">=</span> in.readInt();</span><br><span class="line"><span class="type">double</span> <span class="variable">nDou</span> <span class="operator">=</span> in.readDouble();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> in.readBoolean();</span><br><span class="line">in.close();</span><br><span class="line"><span class="comment">//显示</span></span><br><span class="line">System.out.println(<span class="string">&quot;nInt:&quot;</span>+nInt);</span><br><span class="line">System.out.println(<span class="string">&quot;nDou:&quot;</span>+nDou);</span><br><span class="line">System.out.println(<span class="string">&quot;b:&quot;</span>+b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="16、ByteArrayStream类"><a href="#16、ByteArrayStream类" class="headerlink" title="16、ByteArrayStream类"></a>16、ByteArrayStream类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.dol.sn;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.print.attribute.standard.Sides;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteArrayStreamDemo</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="string">&quot;Dolphin&quot;</span>.getBytes());</span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// int java.io.ByteArrayInputStream.read() 从此输入流中读取下一个数据字节</span></span><br><span class="line"><span class="keyword">while</span> ((len=in.read())!=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">out.write(len);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(out.size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 流(Stream)、文件(File)和IO</title>
      <link href="/2020/03/29/Java%20%E6%B5%81(Stream)%E3%80%81%E6%96%87%E4%BB%B6(File)%E5%92%8CIO/"/>
      <url>/2020/03/29/Java%20%E6%B5%81(Stream)%E3%80%81%E6%96%87%E4%BB%B6(File)%E5%92%8CIO/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-流-Stream-、文件-File-和IO"><a href="#Java-流-Stream-、文件-File-和IO" class="headerlink" title="Java 流(Stream)、文件(File)和IO"></a>Java 流(Stream)、文件(File)和IO</h2><p>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。<br>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。<br>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。<br>Java 为 I&#x2F;O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。<br>但本节讲述最基本的和流与 I&#x2F;O 相关的功能。我们将通过一个个例子来学习这些功能。</p><h3 id="读取控制台输入"><a href="#读取控制台输入" class="headerlink" title="读取控制台输入"></a>读取控制台输入</h3><p>Java 的控制台输入由 System.in 完成。<br>为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。<br>下面是创建 BufferedReader 的基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> </span><br><span class="line">                      <span class="title class_">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure><p>BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。</p><h3 id="从控制台读取多字符输入"><a href="#从控制台读取多字符输入" class="headerlink" title="从控制台读取多字符输入"></a>从控制台读取多字符输入</h3><p>从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">read</span><span class="params">( )</span> <span class="keyword">throws</span> <span class="type">IOExceptionBufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> </span><br><span class="line">                      <span class="title class_">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure><p>每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。<br>下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 “q”。<br>BRRead.java 文件代码：<br>&#x2F;&#x2F;使用 BufferedReader 在控制台读取字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BRRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="comment">// 使用 System.in 创建 BufferedReader</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;输入字符, 按下 &#x27;q&#x27; 键退出。&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取字符</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            c = (<span class="type">char</span>) br.read();</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125; <span class="keyword">while</span> (c != <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> </span><br><span class="line">                      <span class="title class_">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure><h3 id="从控制台读取字符串"><a href="#从控制台读取字符串" class="headerlink" title="从控制台读取字符串"></a>从控制台读取字符串</h3><p>从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。<br>它的一般格式是：<br>String readLine( ) throws IOException<br>下面的程序读取和显示字符行直到你输入了单词”end”。<br>&#x2F;&#x2F;使用 BufferedReader 在控制台读取字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BRRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="comment">// 使用 System.in 创建 BufferedReader</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;输入字符, 按下 &#x27;q&#x27; 键退出。&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取字符</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            c = (<span class="type">char</span>) br.read();</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125; <span class="keyword">while</span> (c != <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK 5 后的版本我们也可以使用 Java Scanner 类来获取控制台的输入。</p><h3 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h3><p>下面的例子用 write() 把字符 “A” 和紧跟着的换行符输出到屏幕：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//演示 System.out.write().</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        b = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        System.out.write(b);</span><br><span class="line">        System.out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。</p><h3 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> file;</span><br><span class="line"><span class="comment">//文件名 :fileStreamTest2.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fileStreamTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">// OutputStream f=new FileOutputStream(&quot;files.txt&quot;);</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;files.txt&quot;</span>);</span><br><span class="line">       <span class="type">FileOutputStream</span> <span class="variable">fop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">        <span class="comment">// 构建FileOutputStream对象,文件不存在会自动新建</span></span><br><span class="line"></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fop, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk</span></span><br><span class="line"></span><br><span class="line">        writer.append(<span class="string">&quot;中文输入&quot;</span>);</span><br><span class="line">        <span class="comment">// 写入到缓冲区</span></span><br><span class="line"></span><br><span class="line">        writer.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 换行</span></span><br><span class="line"></span><br><span class="line">        writer.append(<span class="string">&quot;English&quot;</span>);</span><br><span class="line">        <span class="comment">// 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入</span></span><br><span class="line"></span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="comment">// 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉</span></span><br><span class="line"></span><br><span class="line">        fop.close();</span><br><span class="line">        <span class="comment">// 关闭输出流,释放系统资源</span></span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        <span class="comment">// 构建FileInputStream对象</span></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fip, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建InputStreamReader对象,编码与写入相同</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">while</span> (reader.ready()) &#123;</span><br><span class="line">            sb.append((<span class="type">char</span>) reader.read());</span><br><span class="line">            <span class="comment">// 转成char加到StringBuffer对象中</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="comment">// 关闭读取流</span></span><br><span class="line"></span><br><span class="line">        fip.close();</span><br><span class="line">        <span class="comment">// 关闭输入流,释放系统资源</span></span><br><span class="line">        File files;</span><br><span class="line">        System.out.println(<span class="string">&quot;目录f的路径是：&quot;</span> + f.getPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录f的绝对路径是：&quot;</span> + f.getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">&quot;目录f的绝对路径F是：&quot;</span> + f.getAbsoluteFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件f的名字是：&quot;</span> + f.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件f能读吗：&quot;</span> + f.canRead());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件f能写吗：&quot;</span> + f.canWrite());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件f规范路径字符串：&quot;</span> + f.getCanonicalPath());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件f规范路径File对象：&quot;</span> + f.getCanonicalFile());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件f的父路径字符串：&quot;</span> + f.getParent());</span><br><span class="line">        System.out.println(<span class="string">&quot;文件f的父路径File对象：&quot;</span> + f.getParentFile());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql错误</title>
      <link href="/2020/03/17/mysql%E9%94%99%E8%AF%AF/"/>
      <url>/2020/03/17/mysql%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql-建表时遇到-Err-1050-Table-‘users’-already-exists异常解决方法"><a href="#MySql-建表时遇到-Err-1050-Table-‘users’-already-exists异常解决方法" class="headerlink" title="MySql 建表时遇到[Err] 1050 - Table ‘users’ already exists异常解决方法"></a>MySql 建表时遇到[Err] 1050 - Table ‘users’ already exists异常解决方法</h2><h4 id="首先看一下出现这个的代码："><a href="#首先看一下出现这个的代码：" class="headerlink" title="首先看一下出现这个的代码："></a>首先看一下出现这个的代码：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course</span><br><span class="line">(Cno <span class="type">CHAR</span>(<span class="number">4</span>)<span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Cname <span class="type">CHAR</span>(<span class="number">40</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> Cpno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(Cpno)<span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>点击运行之后会出现[Err] 1050 - Table ‘users’ already exists异常解决方法这个错误提示，对此应该怎么解决呢，很简单</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> Course</span><br><span class="line">(Cno <span class="type">CHAR</span>(<span class="number">4</span>)<span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"> Cname <span class="type">CHAR</span>(<span class="number">40</span>)<span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> Cpno <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line"> Ccredit <span class="type">SMALLINT</span>,</span><br><span class="line"> <span class="keyword">FOREIGN</span> KEY(Cpno)<span class="keyword">REFERENCES</span> Course(Cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>至此完美解决</p><h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>错误原因：重复创建了表格。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之数组遍历&amp;反转&amp;修改</title>
      <link href="/2020/03/16/Java%E4%B9%8B%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86/"/>
      <url>/2020/03/16/Java%E4%B9%8B%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这个特别简单，是有同学私信，才写这个的</p><h2 id="1、字符串的遍历"><a href="#1、字符串的遍历" class="headerlink" title="1、字符串的遍历"></a>1、字符串的遍历</h2><p>在Java中，字符串提供了提取字符的方法<strong>charAt</strong>，这个方法会返回一个char，因此我们可以利用这一点来实现字符串的遍历；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span><span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.length();i++) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">System.out.println(letter);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先呢通过这个方法对字符串进行遍历，得到一个新的，原理很简单</p><h2 id="2、字符串的反转"><a href="#2、字符串的反转" class="headerlink" title="2、字符串的反转"></a>2、字符串的反转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_3</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span><span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> reverse(str);</span><br><span class="line">printArr(str);</span><br><span class="line">printArr(str2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(String str)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;str.length();i++) &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">letter</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">System.out.print(letter);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String s)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span><span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;i&gt;=<span class="number">0</span>;i--) &#123;</span><br><span class="line">a= a + s.charAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、字符串的修改"><a href="#2、字符串的修改" class="headerlink" title="2、字符串的修改"></a>2、字符串的修改</h2><p>用的方法就是使用replace，它可以在字符串中查找并替换指定的字串。例如下面的代码讲把“aaa”替换为“bbb”；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">text = text.replace(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">System.out.println(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java中的Scanner</title>
      <link href="/2020/03/15/java%E4%B8%AD%E7%9A%84Scanner/"/>
      <url>/2020/03/15/java%E4%B8%AD%E7%9A%84Scanner/</url>
      
        <content type="html"><![CDATA[<h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><p>它提供了输入数据的方法、包含在被称为“实用类”的<strong>java.util</strong>包中；<br>在使用前需要创建一个Scanner对象；<br>声明一个名为in的Scanner变量，并新建一个Scanner对象以便从System.in中获取输入；<br>🌂：Scanner in &#x3D; new Scanner(System.in);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String line;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;小黄说:&quot;</span>);</span><br><span class="line">line = in.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;系统检测到小黄说了：&quot;</span>+line);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这之间我发现nextline与next都是接收String类型；那它们究竟有什么区别呢？<br>下面用代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_1</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">String line;</span><br><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;Type something(nextline)：&quot;</span>);</span><br><span class="line">line = in.nextLine();</span><br><span class="line">System.out.println(<span class="string">&quot;You said：&quot;</span>+line);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">&quot;Type something(next)：&quot;</span>);</span><br><span class="line">line = in.next();</span><br><span class="line">System.out.println(<span class="string">&quot;You said：&quot;</span>+line);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比如两个都输入 wo ai ni</span></span><br><span class="line"><span class="comment">//很明显看出差别</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>next()方法读取到空白符就结束l；</p><p>nextLine()读取到回车结束也就是“\r”；</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之方法</title>
      <link href="/2020/03/14/Java%E4%B9%8B%E6%96%B9%E6%B3%95/"/>
      <url>/2020/03/14/Java%E4%B9%8B%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="1、方法的基本定义"><a href="#1、方法的基本定义" class="headerlink" title="1、方法的基本定义"></a>1、方法的基本定义</h2><p>修饰符 返回值类型 方法名（参数列表）{<br>方法体<br>[return 返回值]<br>}<br>🌂比如下面这个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line"><span class="type">int</span> result;</span><br><span class="line"><span class="keyword">if</span>(num1&gt;num2) &#123;</span><br><span class="line">result = num1;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">result = num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2、方法的使用"><a href="#2、方法的使用" class="headerlink" title="2、方法的使用"></a>2、方法的使用</h2><p>Add:this代表本类对象<br>哪个对象调用这个方法this就是它；<br>比如Person p1 &#x3D; new Person(); 此时this代表p1；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Person.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;冲冲冲！！！&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;我是&quot;</span>+name+<span class="string">&quot;今年&quot;</span>+age+<span class="string">&quot;岁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当局部变量与成员变量重名的时候用this区分 </span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;<span class="comment">//将局部变量赋值给成员变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Personbtest.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersonbTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.setName(<span class="string">&quot;hw&quot;</span>);    <span class="comment">//调用方法</span></span><br><span class="line">p1.setAge(<span class="number">21</span>);</span><br><span class="line">p1.talk();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、方法中的形参与实参"><a href="#3、方法中的形参与实参" class="headerlink" title="3、方法中的形参与实参"></a>3、方法中的形参与实参</h2><p><strong>形参</strong>：隶属于方法体，是方法的局部变量<br>在调用方法时，实参和形参在数量、类型、顺序上必须保持一致；</p><h2 id="4、方法的重载"><a href="#4、方法的重载" class="headerlink" title="4、方法的重载"></a>4、方法的重载</h2><p><strong>三要素：</strong>必须在同一个类；必须方法名相同；必须参数列表不同（个数与类型）<br>注意：重载定义与返回值无关<br>🌂比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">float</span> <span class="title function_">add</span><span class="params">(<span class="type">float</span> a,<span class="type">float</span> b)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5、构造方法"><a href="#5、构造方法" class="headerlink" title="5、构造方法"></a>5、构造方法</h2><p>构造方法就算再每一个类中定义的，并且是再使用new关键字实例化一个新对象的时候默认调用的方法。<br>构造方法的功能是对新创建对象的成员变量赋值<br>语法结构：访问修饰符 类名（[参数列表]）{<br>功能代码<br>}</p><p><strong>注意：</strong><br>1、构造方法的名次必须与所属类类名一致<br>2、构造方法无返回值，也不可以使用void<br>3、构造方法可以被重载<br>4、构造方法不能被static和final修饰<br>5、构造方法不能被继承，子类使用父类的构造方法需要使用super关键字<br>规定：如果某一个类中，没有显式的定义一个构造方法，那系统会默认给其一个无参的构造方法，并且方法体式空的构造方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="type">int</span> age;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">System.out.println(<span class="string">&quot;构造方法Person(int x)被调用&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;age=&quot;</span>+<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造方法Person()被调用&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造方法Person(String name,int age)被调用&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;name=&quot;</span>+name+<span class="string">&quot;age=&quot;</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造方法的私有化：仅仅在当前类可以使用！！！主要用于完成单例模式；</p><h2 id="6、在方法中调用方法"><a href="#6、在方法中调用方法" class="headerlink" title="6、在方法中调用方法"></a>6、在方法中调用方法</h2><p>1、 如果调用本类的方法,直接使用方法名（[实际]）<br>2、如果调用的是其他类的方法，还是需要创建对象，然后通过对象名.方法（[实参]）的形式调用 ；<br>3、如果调用的方法是静态的，可以通过类名.方法名（[实参]）或接口名.方法名([实参]);<br>🌂快捷键：Alt+Shift+s 封装Getters和Setters；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;我是&quot;</span>+name+<span class="string">&quot;,今年：&quot;</span>+age+<span class="string">&quot;岁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span> &#123;</span><br><span class="line">talk();</span><br><span class="line"><span class="comment">//this.talk();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7、方法的递归调用"><a href="#7、方法的递归调用" class="headerlink" title="7、方法的递归调用"></a>7、方法的递归调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++) &#123;</span><br><span class="line">result += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addRecursion</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n+addRecursion(n-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8、代码块"><a href="#8、代码块" class="headerlink" title="8、代码块"></a>8、代码块</h2><p>格式：{ 语句}<br>分为四种；<br>1、普通代码块；<br>2、构造代码块；<br>3、静态代码块；<br>4、同步代码块；<br>&#x2F;&#x2F;普通代码块：方法名后或方法体内用一对“{}”括起来的数据库；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalCodeBlock</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;普通代码块内，x=&quot;</span>+x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;构造代码块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GzCodeBlock2</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line"><span class="comment">//构造代码块  </span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">x= <span class="number">100</span>;</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无参构造方法</span></span><br><span class="line">GzCodeBlock2()&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造&quot;</span>);</span><br><span class="line">name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造方法</span></span><br><span class="line">GzCodeBlock2(String name)&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;hh&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;welcome&quot;</span>+name);</span><br><span class="line">System.out.println(<span class="string">&quot;x=&quot;</span>+x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;静态代码块<br>加一个static即可；执行一次；</p><p>&#x2F;&#x2F;同步代码块<br>以后再写</p><h2 id="9、方法和数组"><a href="#9、方法和数组" class="headerlink" title="9、方法和数组"></a>9、方法和数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">in</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;---调用changeReferVAlue前---&quot;</span>);</span><br><span class="line">printArr(arr);</span><br><span class="line">changeReferValue(in, arr);</span><br><span class="line">System.out.println(<span class="string">&quot;---调用changeReferVAlue后---&quot;</span>);</span><br><span class="line">print(in, arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeReferValue</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span>[] myArr)</span> &#123;</span><br><span class="line">a+=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++) &#123;</span><br><span class="line">myArr[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;</span><br><span class="line">System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> in,<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;in:&quot;</span>+in);</span><br><span class="line">System.out.println(<span class="string">&quot;arr:&quot;</span>);</span><br><span class="line">printArr(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回数组的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayReturn</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] arr) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length-i-<span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span>arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr,String msg)</span> &#123;</span><br><span class="line">System.out.println(msg);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i:arr) &#123;</span><br><span class="line">System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="type">int</span> arrNew[];</span><br><span class="line">printArr(arr,<span class="string">&quot;排序前&quot;</span>);</span><br><span class="line">arrNew = sort(arr);</span><br><span class="line">printArr(arrNew, <span class="string">&quot;排序后&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10、与数组有关的操作方法"><a href="#10、与数组有关的操作方法" class="headerlink" title="10、与数组有关的操作方法"></a>10、与数组有关的操作方法</h2><h3 id="1、数组的克隆"><a href="#1、数组的克隆" class="headerlink" title="1、数组的克隆"></a>1、数组的克隆</h3><p>克隆对象返回的是一个新的对象，而不是已有对象的引用<br>克隆对象与new操作符是有区别的，克隆对象是拷贝某个对象的当前信息，而不是对象的初始化信息；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrraytMethod</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//克隆内容相同，地址不同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr= &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">54</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">65</span>,<span class="number">7</span>&#125;;</span><br><span class="line">printArr(arr);</span><br><span class="line">System.out.println(arr);</span><br><span class="line"><span class="type">int</span>[] arrNew = arr.clone();</span><br><span class="line">printArr(arrNew);</span><br><span class="line">System.out.println(arrNew);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、利用系统类库排序"><a href="#2、利用系统类库排序" class="headerlink" title="2、利用系统类库排序"></a>2、利用系统类库排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrraytMethod2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">System.out.print(arr[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用Arrays的sort方法，默认从小到大排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] arr= &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">89</span>,<span class="number">54</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">65</span>,<span class="number">7</span>&#125;;</span><br><span class="line">System.out.println(<span class="string">&quot;排序前&quot;</span>);</span><br><span class="line">printArr(arr);</span><br><span class="line">Arrays.sort(arr);</span><br><span class="line">System.out.println(<span class="string">&quot;排序后&quot;</span>);</span><br><span class="line">printArr(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11、除去一个数组中的0"><a href="#11、除去一个数组中的0" class="headerlink" title="11、除去一个数组中的0"></a>11、除去一个数组中的0</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EX10_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] oldArr = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> getValueNumFromArray(oldArr, <span class="number">0</span>);</span><br><span class="line"><span class="type">int</span>[] newArr = <span class="keyword">new</span> <span class="title class_">int</span>[oldArr.length-count];</span><br><span class="line">copyValue(oldArr, newArr);</span><br><span class="line">printArray(newArr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getValueNumFromArray</span><span class="params">(<span class="type">int</span>[] arr,<span class="type">int</span> val)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr[i]==val) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">copyValue</span><span class="params">(<span class="type">int</span>[] arr1,<span class="type">int</span>[] arr2)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(arr1[i]!=<span class="number">0</span>) &#123;</span><br><span class="line">arr2[j] = arr1[i];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">System.out.println(array[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-两个数之间的随机数"><a href="#12-两个数之间的随机数" class="headerlink" title="12.两个数之间的随机数"></a>12.两个数之间的随机数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EX10_2</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">17</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">System.out.println(getRandom(num1, num2));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> (<span class="type">int</span>)Math.random()*(num2-num1)+num1;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL实现</title>
      <link href="/2020/03/13/AVL%E5%AE%9E%E7%8E%B0%20/"/>
      <url>/2020/03/13/AVL%E5%AE%9E%E7%8E%B0%20/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>前面是Avl树的介绍写的比较详细，这一篇主要写怎么实现</p><h2 id="最简单的旋转"><a href="#最简单的旋转" class="headerlink" title="最简单的旋转"></a>最简单的旋转</h2><p>依次插入1 2 3节点，1的左子树为空高度为0，而右子树高度为2，旋转后，左右高度都为1<br><img src="https://s2.ax1x.com/2020/03/06/3LAHAg.png"></p><h2 id="单旋转"><a href="#单旋转" class="headerlink" title="单旋转"></a>单旋转</h2><p>依次插入6 3 7 1 4，插入2时，树的平衡被破坏<br><img src="https://s2.ax1x.com/2020/03/06/3LAbNQ.png"><br><img src="https://s2.ax1x.com/2020/03/06/3LAqhj.png"></p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>获取k1节点&#x3D;k2的左边节点<br>设置k2的左边节点为k1的右边节点Y<br>设置k1的右边节点为k2<br>重新计算k2和k1的高度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">rotateWithLeftChild</span><span class="params">(AvlNode&lt;T&gt; k2)</span> &#123;</span><br><span class="line">       <span class="type">AvlNode</span> <span class="variable">k1</span> <span class="operator">=</span> k2.left;</span><br><span class="line">       k2.left = k1.right;</span><br><span class="line">       k1.right = k2;</span><br><span class="line">       k2.height = Math.max(height(k2.left), height(k2.right)) + <span class="number">1</span>;</span><br><span class="line">       k1.height = Math.max(height(k1.left), k2.height) + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> k1;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="双旋转"><a href="#双旋转" class="headerlink" title="双旋转"></a>双旋转</h2><p>依次插入6 2 7 1 4，插入3时，树的平衡被破坏<br><img src="https://s2.ax1x.com/2020/03/06/3LATHS.png"><br>下面的图解C节点实际上应该没有，因为插入B的时候已经影响平衡<br><img src="https://s2.ax1x.com/2020/03/06/3LAoB8.png"></p><h3 id="步骤：-1"><a href="#步骤：-1" class="headerlink" title="步骤："></a>步骤：</h3><p>k3的左边子树进行一次右边的单旋转<br>k3进行一次左边的单旋转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">doubleWithLeftChild</span><span class="params">(AvlNode&lt;T&gt; k3)</span> &#123;</span><br><span class="line">       k3.left = rotateWithRightChild(k3.left);</span><br><span class="line">       <span class="keyword">return</span> rotateWithLeftChild(k3);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>平衡二叉树实现的大部分过程和二叉查找树是一样的，区别就在于插入和删除之后要判断树左右子树高度之差是否大于1，如果大于1需要进行旋转维持平衡<br>其它的两种插入影响平衡的情况和以上两种刚好相反</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h2 id="树节点"><a href="#树节点" class="headerlink" title="树节点"></a>树节点</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 二叉树;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AvlNode</span>&lt;T&gt; &#123;</span><br><span class="line">    T element;</span><br><span class="line">    <span class="type">int</span> height;</span><br><span class="line">    AvlNode&lt;T&gt; left;</span><br><span class="line">    AvlNode&lt;T&gt; right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AvlNode</span><span class="params">(T element)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(element, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AvlNode</span><span class="params">(T element, AvlNode&lt;T&gt; left, AvlNode&lt;T&gt; right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.element = element;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">        <span class="built_in">this</span>.height = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="平衡代码"><a href="#平衡代码" class="headerlink" title="平衡代码"></a>平衡代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">balance</span><span class="params">(AvlNode&lt;T&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (height(t.left) - height(t.right) &gt; ALLOWED_IMBALANCE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height(t.left.left) &gt;= height(t.left.right)) &#123;</span><br><span class="line">                t = rotateWithLeftChild(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t = doubleWithLeftChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (height(t.right) - height(t.left) &gt; ALLOWED_IMBALANCE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height(t.right.right) &gt;= height(t.right.left)) &#123;</span><br><span class="line">                t = rotateWithRightChild(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t = doubleWithRightChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.height = Math.max(height(t.left), height(t.right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 二叉树;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 皖</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AvlTree</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;? <span class="built_in">super</span> T&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        root = insert(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        root = remove(x, root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">findMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> findMin(root).element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x 插入节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t 父节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">insert</span><span class="params">(T x, AvlNode&lt;T&gt; t)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果根节点为空，则当前x节点为根及诶单</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AvlNode</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小于当前根节点 将x插入根节点的左边</span></span><br><span class="line">        <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            t.left = insert(x, t.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//大于当前根节点 将x插入根节点的右边</span></span><br><span class="line">            t.right = insert(x, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> balance(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ALLOWED_IMBALANCE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">balance</span><span class="params">(AvlNode&lt;T&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (height(t.left) - height(t.right) &gt; ALLOWED_IMBALANCE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height(t.left.left) &gt;= height(t.left.right)) &#123;</span><br><span class="line">                t = rotateWithLeftChild(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t = doubleWithLeftChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (height(t.right) - height(t.left) &gt; ALLOWED_IMBALANCE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (height(t.right.right) &gt;= height(t.right.left)) &#123;</span><br><span class="line">                t = rotateWithRightChild(t);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                t = doubleWithRightChild(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.height = Math.max(height(t.left), height(t.right)) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">doubleWithRightChild</span><span class="params">(AvlNode&lt;T&gt; k3)</span> &#123;</span><br><span class="line">        k3.right = rotateWithLeftChild(k3.right);</span><br><span class="line">        <span class="keyword">return</span> rotateWithRightChild(k3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">rotateWithRightChild</span><span class="params">(AvlNode&lt;T&gt; k2)</span> &#123;</span><br><span class="line">        <span class="type">AvlNode</span> <span class="variable">k1</span> <span class="operator">=</span> k2.right;</span><br><span class="line">        k2.right = k1.left;</span><br><span class="line">        k1.left = k2;</span><br><span class="line">        k2.height = Math.max(height(k2.right), height(k2.left)) + <span class="number">1</span>;</span><br><span class="line">        k1.height = Math.max(height(k1.right), k2.height) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> k1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">doubleWithLeftChild</span><span class="params">(AvlNode&lt;T&gt; k3)</span> &#123;</span><br><span class="line">        k3.left = rotateWithRightChild(k3.left);</span><br><span class="line">        <span class="keyword">return</span> rotateWithLeftChild(k3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">rotateWithLeftChild</span><span class="params">(AvlNode&lt;T&gt; k2)</span> &#123;</span><br><span class="line">        <span class="type">AvlNode</span> <span class="variable">k1</span> <span class="operator">=</span> k2.left;</span><br><span class="line">        k2.left = k1.right;</span><br><span class="line">        k1.right = k2;</span><br><span class="line">        k2.height = Math.max(height(k2.left), height(k2.right)) + <span class="number">1</span>;</span><br><span class="line">        k1.height = Math.max(height(k1.left), k2.height) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> k1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">height</span><span class="params">(AvlNode&lt;T&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t == <span class="literal">null</span> ? -<span class="number">1</span> : t.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x    节点</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t    父节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">remove</span><span class="params">(T x, AvlNode&lt;T&gt; t)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == t) &#123;</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">compareResult</span> <span class="operator">=</span> x.compareTo(t.element);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//小于当前根节点</span></span><br><span class="line">        <span class="keyword">if</span> (compareResult &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            t.left = remove(x, t.left);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (compareResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//大于当前根节点</span></span><br><span class="line">            t.right = remove(x, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="literal">null</span> &amp;&amp; t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//找到右边最小的节点</span></span><br><span class="line">            t.element = findMin(t.right).element;</span><br><span class="line">            <span class="comment">//当前节点的右边等于原节点右边删除已经被选为的替代节点</span></span><br><span class="line">            t.right = remove(t.element, t.right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t = (t.left != <span class="literal">null</span>) ? t.left : t.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> balance(t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找最小节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">findMin</span><span class="params">(AvlNode&lt;T&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.left == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> findMin(root.left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找最大节点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root 根节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> AvlNode&lt;T&gt; <span class="title function_">findMax</span><span class="params">(AvlNode&lt;T&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> findMax(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTree</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点为空&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printTree(root);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTree</span><span class="params">(AvlNode&lt;T&gt; root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.print(root.element);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != root.left) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;左边节点&quot;</span> + root.left.element);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != root.right) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;右边节点&quot;</span> + root.right.element);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">            printTree(root.left);</span><br><span class="line">            printTree(root.right);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 二叉树;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="type">AvlTree</span> <span class="variable">testTree</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AvlTree</span>();</span><br><span class="line">            testTree.insert(<span class="number">36</span>);</span><br><span class="line">            testTree.insert(<span class="number">22</span>);</span><br><span class="line">            testTree.insert(<span class="number">16</span>);</span><br><span class="line">            testTree.insert(<span class="number">45</span>);</span><br><span class="line">            testTree.insert(<span class="number">28</span>);</span><br><span class="line">            testTree.insert(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">            testTree.printTree();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之数组</title>
      <link href="/2020/03/12/java%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
      <url>/2020/03/12/java%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>这里是复习没啥好说的，随便复习一下概念和写几个实例，一下子就懂了！</p><h2 id="一、一维数组"><a href="#一、一维数组" class="headerlink" title="一、一维数组"></a>一、一维数组</h2><p><strong>定义：</strong>类型[ ] 数组名 &#x3D; new 类型[长度]；<br>数组中存有默认值0，而在引用类型[ ]中为null;</p><p>如果在定义前，已经知道数组里存放的内容，那可以简单定义为：<br>类型[ ] 数组名 &#x3D; {值1，值2，…，值n}；<br>类型[ ] 数组名 &#x3D; new 类型[ ]{值1，值2，…，值n}；</p><p>Add:<br>动态初始化如：int[ ] array &#x3D; new int[4];<br>静态初始化如：int[] array &#x3D; new int[]{1,2,3,4};<br>但是像int[] array &#x3D; new int[3]{1，2，3};就是错误的写法<br>这样也是错的，int[ ] array；array[ ] &#x3D; {1,2,3};也是错的！！！</p><p><strong>而这样是可以的：把String names[ ] &#x3D; new String[ ]{“加油”，“冲呀”}；<br>拆为：String names[ ] ；和 names[ ] &#x3D; new String[ ]{“加油”，“冲呀”}；</strong></p><p>这里老师拓展了一个知识点：就是创建一个随机的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;    <span class="comment">//导入包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span>[] a = <span class="literal">null</span>;</span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[rand.nextInt(<span class="number">10</span>)]; <span class="comment">//开辟内存空间，长度是[0，10）的随机数</span></span><br><span class="line">System.out.println(<span class="string">&quot;数组的长度：&quot;</span>+a.length);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++) &#123;</span><br><span class="line">a[i] = rand.nextInt(<span class="number">100</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;a[&quot;</span>+i+<span class="string">&quot;]=&quot;</span>+a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>🌂另外，Java按引用传值的方式也有点不太一样！！！<br>Add:两个数组对应同一个内存区域！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst_1</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] nums1 = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] nums2 = nums1;  <span class="comment">//这里其实把nums1中记录的数组的地址传给了nums2</span></span><br><span class="line"><span class="comment">//现在遍历两个数组</span></span><br><span class="line">System.out.println(<span class="string">&quot;第一个数组&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x:nums1) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第二个数组&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:nums2) &#123;</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//现在 修改下第二个数组中元素值</span></span><br><span class="line">nums2[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;第一个数组&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x:nums1) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;第二个数组&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> y:nums2) &#123;</span><br><span class="line">System.out.println(y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果为：</span><br><span class="line">第一个数组</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">第二个数组</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">第一个数组</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">第二个数组</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这里再来一个简单的比较最大最小值的代码！！！</span><br><span class="line">```java</span><br><span class="line"></span><br><span class="line">package demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class Tst_1 &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int nums[] = &#123;100,5,41,79,58,1000,9854,121&#125;;</span><br><span class="line">int max = nums[0];</span><br><span class="line">int min = nums[0];</span><br><span class="line">for(int i=1;i&lt;nums.length;i++) &#123;</span><br><span class="line">if(nums[i]&gt;max) &#123;</span><br><span class="line">max = nums[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;nums.length;i++) &#123;</span><br><span class="line">if(nums[i]&lt;min) &#123;</span><br><span class="line">min = nums[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(&quot;该数组中最大值为：%d，最小值为：%d&quot;,max,min);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、二维数组"><a href="#二、二维数组" class="headerlink" title="二、二维数组"></a>二、二维数组</h2><p>定义：数据类型[ ][ ] 数组名 &#x3D; new int[行数][列数];<br>如：int[ ][ ] array &#x3D; new int [3][2];或者int[ ][ ] array; array &#x3D; new int[3][2];<br>实质我感觉就像是数组的数组<br>下面举一个行数列数都定了的二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[][] nums;</span><br><span class="line">nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums[i].length;j++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;nums[&quot;</span>+i+<span class="string">&quot;][&quot;</span>+j+<span class="string">&quot;]=&quot;</span>+nums[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再举例列数不定（一定记得用new初始化）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[][] nums = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][];</span><br><span class="line">nums[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">nums[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">nums[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums[i].length;j++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;nums[&quot;</span>+i+<span class="string">&quot;][&quot;</span>+j+<span class="string">&quot;]=&quot;</span>+nums[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🌂如果知道数组中存的值还可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[][] nums = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums[i].length;j++) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;nums[&quot;</span>+i+<span class="string">&quot;][&quot;</span>+j+<span class="string">&quot;]=&quot;</span>+nums[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面补充一道例题，计算某个员工的工资总额</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span>[][] nums = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">System.out.printf(<span class="string">&quot;第%d个人的销售总额为：&quot;</span>,(i+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums[i].length;j++) &#123;</span><br><span class="line">sum += nums[i][j];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">sum = <span class="number">0</span>;   <span class="comment">//清零便于下一次计算</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、多维数组"><a href="#三、多维数组" class="headerlink" title="三、多维数组"></a>三、多维数组</h2><p>定义：数据类型[ ][ ]…[] 数组名 &#x3D; new int[ ][ ]…[];<br>类似的写法，没啥可说的！！！</p><h2 id="四、拓展"><a href="#四、拓展" class="headerlink" title="四、拓展"></a>四、拓展</h2><h3 id="4-1-Java中null的使用：可以为引用类型赋值，作为初始值4-1-Java中null的使用：可以为引用类型赋值，作为初始值"><a href="#4-1-Java中null的使用：可以为引用类型赋值，作为初始值4-1-Java中null的使用：可以为引用类型赋值，作为初始值" class="headerlink" title="4.1 Java中null的使用：可以为引用类型赋值，作为初始值4.1 Java中null的使用：可以为引用类型赋值，作为初始值"></a>4.1 Java中null的使用：可以为引用类型赋值，作为初始值4.1 Java中null的使用：可以为引用类型赋值，作为初始值</h3><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">name = <span class="string">&quot;冲冲冲&quot;</span>;</span><br><span class="line">System.out.println(name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>🌂如果想要比较两个字符串：可以使用a.equals(b)或b.equals(a);返回一个布尔类型；<br>🌂另外如果报错信息出现NullPointerException则考虑是空对象；</p><h3 id="4-2冒泡排序（参考曾经学c的思路）"><a href="#4-2冒泡排序（参考曾经学c的思路）" class="headerlink" title="4.2冒泡排序（参考曾经学c的思路）"></a>4.2冒泡排序（参考曾经学c的思路）</h3><p>1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst_3</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">900</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">58</span>, <span class="number">34</span>, <span class="number">76</span>, <span class="number">32</span>, <span class="number">43</span>, <span class="number">56</span>, -<span class="number">70</span>, <span class="number">35</span>, -<span class="number">234</span>, <span class="number">532</span>, <span class="number">543</span>, <span class="number">2500</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n;  <span class="comment">//存放数组a中元素的个数</span></span><br><span class="line">    <span class="type">int</span> buf;  <span class="comment">//交换数据时用于存放中间数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length-<span class="number">1</span> ;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;a.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]&lt;a[j+<span class="number">1</span>]) &#123;</span><br><span class="line">buf = a[j];</span><br><span class="line">a[j] = a[j+<span class="number">1</span>];</span><br><span class="line">a[j+<span class="number">1</span>] = buf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x:a) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="·4-3复习下随机数（乱序）"><a href="#·4-3复习下随机数（乱序）" class="headerlink" title="·4.3复习下随机数（乱序）"></a>·4.3复习下随机数（乱序）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> demo;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tst_4</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> buf;</span><br><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[random.nextInt(<span class="number">10</span>)];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++) &#123;</span><br><span class="line">nums[i] = random.nextInt(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length-<span class="number">1</span> ;i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nums.length-i-<span class="number">1</span>;j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(random.nextBoolean()) &#123;</span><br><span class="line">buf = nums[j];</span><br><span class="line">nums[j] = nums[j+<span class="number">1</span>];</span><br><span class="line">nums[j+<span class="number">1</span>] = buf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> x:nums) &#123;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之程序控制结构</title>
      <link href="/2020/03/09/java%E4%B9%8B%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2020/03/09/java%E4%B9%8B%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="一、选择结构-了解下就好"><a href="#一、选择结构-了解下就好" class="headerlink" title="一、选择结构(了解下就好)"></a>一、选择结构(了解下就好)</h2><h3 id="1-1条件分支（if与if-else语句）"><a href="#1-1条件分支（if与if-else语句）" class="headerlink" title="1.1条件分支（if与if-else语句）"></a>1.1条件分支（if与if-else语句）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">那就先说说<span class="keyword">if</span>语句，其实没啥好讲的<span class="keyword">if</span>（条件为真）执行，否则不执行！！！</span><br><span class="line">记住就行，没啥太过于纠结和不懂的地方！！</span><br><span class="line"><span class="keyword">package</span> demo1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Right1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Right2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">程序运行结果为Right1</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-if-else语句"><a href="#1-2-if-else语句" class="headerlink" title="1.2 if-else语句"></a>1.2 if-else语句</h3><pre><code>基本部分： if（true）&#123;执行这里&#125; else&#123;执行这里（条件为假）&#125;</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>很通俗，下一个！！！</p><h3 id="1-3多条件的if-else"><a href="#1-3多条件的if-else" class="headerlink" title="1.3多条件的if-else"></a>1.3多条件的if-else</h3><pre><code>if(判断条件1)&#123;-------语句块1；&#125;else if(判断条件2)&#123;--------语句块2&#125;else&#123;--------语句块3&#125;这里不再过多叙述！！！</code></pre><p>1.4多重选择—switch语句</p><p>&#96;</p><pre><code>switch(表达式)&#123;case 值1:语句块1;break;case 值2:语句块2;break;…default:语句块n；break;&#125;`</code></pre><p>其中其表达式类型为整型（long除外），字符型，枚举类型</p><h2 id="二、循环结构（了解下就好）"><a href="#二、循环结构（了解下就好）" class="headerlink" title="二、循环结构（了解下就好）"></a>二、循环结构（了解下就好）</h2><h3 id="2-1-while循环（当型循环）"><a href="#2-1-while循环（当型循环）" class="headerlink" title="2.1 while循环（当型循环）"></a>2.1 while循环（当型循环）</h3><pre><code>while(判断条件)&#123;------代码块&#125;</code></pre><h3 id="2-2-do-while循环（不多说了）"><a href="#2-2-do-while循环（不多说了）" class="headerlink" title="2.2 do-while循环（不多说了）"></a>2.2 do-while循环（不多说了）</h3><h3 id="2-3-for循环（也不想学，和c语言里面一模一样的结构）"><a href="#2-3-for循环（也不想学，和c语言里面一模一样的结构）" class="headerlink" title="2.3 for循环（也不想学，和c语言里面一模一样的结构）"></a>2.3 for循环（也不想学，和c语言里面一模一样的结构）</h3><h3 id="2-4-foreach循环：用来循环遍历一个数组或集合框架"><a href="#2-4-foreach循环：用来循环遍历一个数组或集合框架" class="headerlink" title="2.4 foreach循环：用来循环遍历一个数组或集合框架"></a>2.4 foreach循环：用来循环遍历一个数组或集合框架</h3><p>for（类型 迭代类型:数组或集合）{<br>                    代码块<br>    }<br>毕竟我没接触过这个举个例子方便我以后回来复习看看</p><pre><code>实现数组的遍历，有一说一还挺方便哈哈哈public static void main(String[] args) &#123;        int arr[] = &#123;1,2,3,4,5&#125;;        for(int item:arr) &#123;            System.out.println(item);        &#125;&#125;</code></pre><h3 id="2-5-嵌套循环（不多说表面意思）"><a href="#2-5-嵌套循环（不多说表面意思）" class="headerlink" title="2.5 嵌套循环（不多说表面意思）"></a>2.5 嵌套循环（不多说表面意思）</h3><h2 id="三、循环的跳转"><a href="#三、循环的跳转" class="headerlink" title="三、循环的跳转"></a>三、循环的跳转</h2><p><strong>break;continue;return;</strong><br>这里注意一下这三个的关系就行，作用自己敲一遍就理解了</p><h3 id="3-1-break-：跳出所在的循环（switch、for、while）"><a href="#3-1-break-：跳出所在的循环（switch、for、while）" class="headerlink" title="3.1 break ：跳出所在的循环（switch、for、while）"></a>3.1 break ：跳出所在的循环（switch、for、while）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-2-contiue-结束本次循环进入下一次循环"><a href="#3-2-contiue-结束本次循环进入下一次循环" class="headerlink" title="3.2 contiue:结束本次循环进入下一次循环"></a>3.2 contiue:结束本次循环进入下一次循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-3-return-离开语句所在的方法"><a href="#3-3-return-离开语句所在的方法" class="headerlink" title="3.3 return:离开语句所在的方法"></a>3.3 return:离开语句所在的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AVL介绍</title>
      <link href="/2020/03/04/AVL%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/03/04/AVL%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="AVL树概念"><a href="#AVL树概念" class="headerlink" title="AVL树概念"></a>AVL树概念</h2><p>  AVL树是带有平衡条件的<strong>二叉查找树</strong>。这个平衡条件必须要容易保持。而且要保证它的<strong>深度</strong>是<em>O(logN)</em>.<br>    AVL的条件是左右树的高度差（平衡因子）<strong>不大于1</strong>；并且它的每个子树也都是平衡二叉树。<br>    对于平衡二叉树的最小个数，n0&#x3D;0;n1&#x3D;1;nk&#x3D;n(k-1)+n(k-2)+1;(求法可以类比斐波那契！)<br>    难点：AVL是一颗二叉排序树，用什么样的规则或者规律让它能够在复杂度不太高的情况下实现动态平衡呢？</p><p><img src="https://s2.ax1x.com/2020/03/04/3oZR0J.jpg"></p><h2 id="不平衡概况"><a href="#不平衡概况" class="headerlink" title="不平衡概况"></a>不平衡概况</h2><p><img src="https://s2.ax1x.com/2020/03/04/3oZ4t1.png"></p><p>如果简单的以单节点看，大致有上面四种情形，并且他们的最后结果也是有的有所相近。只是：上下会变动。该在左面的还在左面，该在右面的还在右面。</p><p><img src="https://s2.ax1x.com/2020/03/04/3oZW79.png"></p><p>这只是针对在底部，对于可能出现的平衡要首先搞清楚：</p><p><img src="https://s2.ax1x.com/2020/03/04/3oZ5fx.png"></p><p>所以针对四种不平衡，可能出现在底部，也可能出现在头，也可能出现在某个中间节点导致不平衡。 而我们只需要研究其首次不平衡点，解决之后整棵树即继续平衡。当然，在实际解决肯定会带上递归的思想解决问题。</p><h2 id="四种平衡旋转方式"><a href="#四种平衡旋转方式" class="headerlink" title="四种平衡旋转方式"></a>四种平衡旋转方式</h2><h3 id="RR平衡旋转-左单旋转"><a href="#RR平衡旋转-左单旋转" class="headerlink" title="RR平衡旋转(左单旋转)"></a>RR平衡旋转(左单旋转)</h3><p><img src="https://s2.ax1x.com/2020/03/04/3oZhkR.png"></p><p>出现这种情况的原因是节点的右侧的右侧较深这时候不平衡节点需要左旋。再细看过程。</p><p>再左旋的过程中，root(oldroot)节点下沉，中间节点(newroot)上浮.而其中中间节点(newroot)的右侧依然不变。<br>它上浮左侧所以需要指向根节点(oldroot)(毕竟一棵树)。但是这样newroot原来左侧节点H空缺。而我们需要仍然让整个树完整并且满足二叉排序树的规则。<br>而刚好本来oldroot右侧指向newroot变成oldroot被newroot左侧指向。所以oldroot右侧空缺，刚好这个位置满足在oldroot的右侧。在newroot的左侧。.所以我们将H插入在这个位置。<br>其中H可能为NULL。不过不影响操作！</p><p><img src="https://s2.ax1x.com/2020/03/04/3oZop6.png"></p><h5 id="而左旋的代码可以表示为："><a href="#而左旋的代码可以表示为：" class="headerlink" title="而左旋的代码可以表示为："></a>而左旋的代码可以表示为：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> node <span class="title function_">getRRbanlance</span><span class="params">(node oldroot)</span> &#123;<span class="comment">//右右深，需要左旋</span></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">node newroot=oldroot.right;</span><br><span class="line">oldroot.right=newroot.left;</span><br><span class="line">newroot.left=oldroot;</span><br><span class="line">oldroot.height=Math.max(getHeight(oldroot.left),getHeight(oldroot.right))+<span class="number">1</span>;</span><br><span class="line">newroot.height=Math.max(getHeight(newroot.left),getHeight(newroot.right))+<span class="number">1</span>;<span class="comment">//原来的root的高度需要从新计算</span></span><br><span class="line"><span class="keyword">return</span> newroot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="LL平衡旋转-右单旋转"><a href="#LL平衡旋转-右单旋转" class="headerlink" title="LL平衡旋转(右单旋转)"></a>LL平衡旋转(右单旋转)</h3><p>而右旋和左旋相反，但是思路相同，根据上述进行替换即可！</p><p><img src="https://s2.ax1x.com/2020/03/04/3oZT1K.png"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> node <span class="title function_">getLLbanlance</span><span class="params">(node oldroot)</span> &#123;<span class="comment">//LL小，需要右旋转</span></span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">node newroot=oldroot.left;</span><br><span class="line">oldroot.left=newroot.right;</span><br><span class="line">newroot.right=oldroot;</span><br><span class="line">oldroot.height=Math.max(getHeight(oldroot.left),getHeight(oldroot.right))+<span class="number">1</span>;</span><br><span class="line">newroot.height=Math.max(getHeight(newroot.left),getHeight(newroot.right))+<span class="number">1</span>;<span class="comment">//原来的root的高度需要从新金酸</span></span><br><span class="line"><span class="keyword">return</span> newroot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RL平衡旋转-先右后左双旋转"><a href="#RL平衡旋转-先右后左双旋转" class="headerlink" title="RL平衡旋转(先右后左双旋转)"></a>RL平衡旋转(先右后左双旋转)</h3><p><strong>产生不平衡的条件原因是：</strong></p><p>root节点右侧左侧节点的深度高些，使得与左侧的差大于1.这个与我们前面看到的左旋右旋不同的是因为它的结构不能直接变一下就可以完成。<br>因为对于右左结构，中间的最大，两侧的最小。但是下面的比上面大(下面在上面右侧)所以如果平衡的话，那么右左的R.L应该在中间，而R应该在右侧。原来的root在左侧。<br>所以节点的变化浮动比较大，而且需要妥善处理各个子节点的移动使其满足二叉排序树的性质！<br>期间考虑树高度变化即可！<br>这种双旋转其实也很简单。不要被外表唬住。基于前面的单旋转，双旋转有两种具体逻辑思路。</p><h4 id="思路1：两次旋转RR-LL"><a href="#思路1：两次旋转RR-LL" class="headerlink" title="思路1：两次旋转RR,LL"></a>思路1：两次旋转RR,LL</h4><p><img src="https://s2.ax1x.com/2020/03/04/3oeKjU.png"></p><p>根据上图所圈的，先对底部使得底部的大小关系变化，使其在满足二叉平衡树的条件下还满足RR结构的二叉树。所以只需要对右节点R先进行右旋,再对ROOT进行左旋即可。</p><h4 id="思路2：直接分析"><a href="#思路2：直接分析" class="headerlink" title="思路2：直接分析"></a>思路2：直接分析</h4><p>根据初始和结果的状态，然后分析各个节点变化顺序。手动操作这些节点即可！</p><p>首先根据ROOT,R,R.L三个节点变化。R.L肯定要在最顶层。左右分别指向ROOT和R。那么这其中R.left，ROOT.right发生变化(原来分别是R,L和R)暂时为空。而刚好根据左右大小关系可以补上R.L的左右节点。<br>这样思考整棵树也可以完成平衡，但是要考虑树的高度变化。</p><p><img src="https://s2.ax1x.com/2020/03/04/3oelB4.png"></p><h5 id="代码为：-注释部分为方案1"><a href="#代码为：-注释部分为方案1" class="headerlink" title="代码为：(注释部分为方案1)"></a>代码为：(注释部分为方案1)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> node <span class="title function_">getRLbanlance</span><span class="params">(node oldroot)</span> &#123;<span class="comment">//右左深</span></span><br><span class="line"><span class="comment">//node newroot=oldroot.right.left;</span></span><br><span class="line"><span class="comment">//oldroot.right.left=newroot.right;</span></span><br><span class="line"><span class="comment">//newroot.right=oldroot.right;</span></span><br><span class="line"><span class="comment">//oldroot.right=newroot.left;</span></span><br><span class="line"><span class="comment">//newroot.left=oldroot;</span></span><br><span class="line"><span class="comment">//oldroot.height=Math.max(getHeight(oldroot.left),getHeight(oldroot.right))+1;</span></span><br><span class="line"><span class="comment">//newroot.right.height=Math.max(getHeight(newroot.right.left),getHeight(newroot.right.right))+1;</span></span><br><span class="line"><span class="comment">//newroot.height=Math.max(getHeight(oldroot.left),getHeight(newroot.right))+1;//原来的root的高度需要从新金酸</span></span><br><span class="line">oldroot.right =getLLbanlance(oldroot.right);</span><br><span class="line">oldroot.height=Math.max(getHeight(oldroot.left), getHeight(oldroot.right))+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> getRRbanlance(oldroot);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="LR平衡旋转-先左后右单旋转"><a href="#LR平衡旋转-先左后右单旋转" class="headerlink" title="LR平衡旋转(先左后右单旋转)"></a>LR平衡旋转(先左后右单旋转)</h3><p>根据上述RL修改即可</p><p><img src="https://s2.ax1x.com/2020/03/04/3oeucT.png"></p><h5 id="代码为："><a href="#代码为：" class="headerlink" title="代码为："></a>代码为：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> node <span class="title function_">getLRbanlance</span><span class="params">(node oldroot)</span> &#123;</span><br><span class="line">oldroot.left =getRRbanlance(oldroot.left);</span><br><span class="line">oldroot.height=Math.max(getHeight(oldroot.left), getHeight(oldroot.right))+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> getLLbanlance(oldroot);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之二叉排序(查找)树</title>
      <link href="/2020/03/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F(%E6%9F%A5%E6%89%BE)%E6%A0%91/"/>
      <url>/2020/03/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F(%E6%9F%A5%E6%89%BE)%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面介绍学习的大多是线性表相关的内容，把指针搞懂后其实也没有什么难度。规则相对是简单的。<br>再数据结构中树、图才是数据结构标志性产物，(线性表大多都现成api可以使用),因为树的难度相比线性表大一些并且树的拓展性很强，你所知道的树、二叉树、二叉排序树，AVL树，线索二叉树、红黑树、B数、线段树等等高级数据结构。然而二叉排序树是所有的基础，所以彻底搞懂二叉排序树也是非常重要的。</p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p><img src="https://s2.ax1x.com/2020/03/01/32PwHH.png"></p><h3 id="二叉树也是树的一种，而二叉排序树又是二叉树的一种。"><a href="#二叉树也是树的一种，而二叉排序树又是二叉树的一种。" class="headerlink" title="二叉树也是树的一种，而二叉排序树又是二叉树的一种。"></a>二叉树也是树的一种，而二叉排序树又是二叉树的一种。</h3><p>树是递归的，将树的任何一个节点以及节点下的节点都能组合成一个新的树。并且很多操作基于递归完成。<br>🌂<strong>根节点：</strong> 最上面的那个节点(root)，根节点没有前驱节点，只有子节点（0个或多个都可以）<br>🌂<strong>层数：</strong> 一般认为根节点是第1层(有的也说第0层)。而树的高度就是层数最高(上图层数开始为1)节点的层数<br>🌂<strong>节点关系:</strong> 父节点：就是链接该节点的上一层节点,孩子节点:和父节点对应，上下关系。而祖先节点是父节点的父节点(或者祖先）节点。兄弟节点：拥有同一个父节点的节点们！<br>🌂<strong>度：</strong> 节点的度就是节点拥有孩子节点的个数(是孩子不是子孙).而树的度(最大)节点的度。同时，如果度大于0就成为分支节点,度等于0就成为叶子节点（没有子孙）。</p><h2 id="相关性质："><a href="#相关性质：" class="headerlink" title="相关性质："></a>相关性质：</h2><p>🌂~树的节点数&#x3D;所有节点度数+1.<br>🌂度为m的树第i层最多有mi-1个节点。(i&gt;&#x3D;1)<br>🌂高度而h的m叉树最多（mh-1）&#x2F;(m-1)个节点(等比数列求和)<br>🌂n个节点的m叉树最小高度[logm(n(m-1)+1)]</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>二叉树是一树的一种，但应用比较多，所以需要深入学习。二叉树的每个节点最多只有两个节点。</p><p><strong>二叉树与度为2的树的区别</strong>：</p><p>🌂🌂度为2的的树必须有三个节点以上，二叉树可以为空。<br>🌂🌂二叉树的度不一定为2：比如说斜树。<br>🌂🌂二叉树有左右节点区分，而度为2的树没有左右节点的区分。</p><h4 id="几种特殊二叉树："><a href="#几种特殊二叉树：" class="headerlink" title="几种特殊二叉树："></a>几种特殊二叉树：</h4><p><strong>满二叉树。高度为n的满二叉树有2n-1个节点</strong></p><p><img src="https://s2.ax1x.com/2020/03/01/32PNjO.png"></p><p><strong>完全二叉树：上面一层全部满，最下一层从左到右顺序排列</strong></p><p><img src="https://s2.ax1x.com/2020/03/01/32PdDe.png"></p><p>二叉排序树：树按照一定规则插入排序(本文详解)。<br>平衡二叉树：树上任意节点左子树和右子树深度差距不超过1.</p><h2 id="二叉树性质："><a href="#二叉树性质：" class="headerlink" title="二叉树性质："></a>二叉树性质：</h2><p>相比树，二叉树的性质就是树的性质更加具体化。</p><p>非空二叉树叶子节点数&#x3D;度为2的节点树+1.本来一个节点如果度为1.那么一直延续就一个叶子，但如果出现一个度为2除了延续原来的一个节点，会多出一个节点需要维系。所以到最后会多出一个叶子。<br>非空第i层最多有2i-1个节点。<br>高为h的树最多有2h-1个节点(等比求和)。<br>完全二叉树若从左往右，从上到下编号如图：<br><img src="https://s2.ax1x.com/2020/03/01/32PauD.png"></p><h2 id="二叉排序-搜索-树"><a href="#二叉排序-搜索-树" class="headerlink" title="二叉排序(搜索)树"></a>二叉排序(搜索)树</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><strong>前面铺垫那么多，咱们言归正传，详细实现一个二叉排序树。首先要了解二叉排序树的规则：</strong></p><p>🌂 从任意节点开始，节点左侧节点值总比节点右侧值要小。<br>例如。一个二叉排序树依次插入15，6，23，7，4，71，5，50会形成下图顺序</p><p><img src="https://s2.ax1x.com/2020/03/01/32PY36.png"></p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>🌂🌂🌂首先二叉排序树是由若干节点构成。</p><p>对于<strong>node</strong>需要这些属性：<strong>left</strong>，<strong>right</strong>，和<strong>value</strong>。其中left和right是左右指针，而value是储存的数据，这里用*int *类型。<br>node类构造为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">node</span> &#123;<span class="comment">//结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span> node left;</span><br><span class="line"><span class="keyword">public</span> node right;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">node</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">node</span><span class="params">(<span class="type">int</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.value=value;</span><br><span class="line"><span class="built_in">this</span>.left=<span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.right=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">node</span><span class="params">(<span class="type">int</span> value,node l,node r)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">this</span>.value=value;</span><br><span class="line"><span class="built_in">this</span>.left=l;</span><br><span class="line"><span class="built_in">this</span>.right=r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>~既然节点构造好了，那么就需要节点等其他信息构造成树。有了链表构造经验，很容易得知一棵树最主要的还是root根节点。<br>所以树的构造为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line">node root;<span class="comment">//根</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinarySortTree</span><span class="params">()</span></span><br><span class="line">&#123;root=<span class="literal">null</span>;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeEmpty</span><span class="params">()</span><span class="comment">//变空</span></span><br><span class="line">&#123;root=<span class="literal">null</span>;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span><span class="comment">//查看是否为空</span></span><br><span class="line">&#123;<span class="keyword">return</span> root==<span class="literal">null</span>;&#125;</span><br><span class="line"><span class="comment">//各种方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/03/01/32PtgK.png"></p><h2 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h2><p>既然已经构造号一棵树，那么就需要实现主要的方法。因为二叉排序树中每个节点都能看作一棵树。所以我们创建方法的是时候加上节点参数(也就是函数对每一个节点都能有效)</p><p>findmax(),findmin()</p><p>🌂<strong>findmin()找到最小节点</strong>：<br>因为所有节点的最小都是往左插入，所以只需要找到最左侧的返回即可。</p><p>🌂<strong>findmax()找到最大节点：</strong><br>因为所有节点大的都是往右面插入，所以只需要找到最右侧的返回即可。<br>代码使用递归函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> node <span class="title function_">findmin</span><span class="params">(node t)</span><span class="comment">//查找最小返回值是node，调用查看结果时需要.value</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="literal">null</span>) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t.left==<span class="literal">null</span>) &#123;<span class="keyword">return</span> t;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>(findmin(t.left));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> node <span class="title function_">findmax</span><span class="params">(node t)</span><span class="comment">//查找最大</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(t==<span class="literal">null</span>) &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t.right==<span class="literal">null</span>) &#123;<span class="keyword">return</span> t;&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span>(findmax(t.right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/03/01/32PBEd.png"></p><h3 id="isContains-int-x"><a href="#isContains-int-x" class="headerlink" title="isContains(int x)"></a>isContains(int x)</h3><p><strong>这里的意思是查找二叉查找树中是否存在x</strong>。</p><p>假设我们我们插入x，那么如果存在x我们一定会在查找插入路径的过程中遇到x。因为你可以如果已经存在的点，再它的前方会走一次和它相同的步骤。也就是说前面固定，我来1w次x，那么x都会到达这个位置。那么我们直接进行查找比较即可！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isContains</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">//是否存在</span></span><br><span class="line">&#123;</span><br><span class="line">node current=root;</span><br><span class="line"><span class="keyword">if</span>(root==<span class="literal">null</span>) &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;</span><br><span class="line"><span class="keyword">while</span>(current.value!=x&amp;&amp;current!=<span class="literal">null</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x&lt;current.value) &#123;current=current.left;&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;current.value) &#123;current=current.right;&#125;</span><br><span class="line"><span class="keyword">if</span>(current==<span class="literal">null</span>) &#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125;<span class="comment">//在里面判断如果超直接返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果在这个位置判断是否为空会导致current.value不存在报错</span></span><br><span class="line"> <span class="keyword">if</span>(current.value==x) &#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="insert-int-x"><a href="#insert-int-x" class="headerlink" title="insert(int x)"></a>insert(int x)</h3><p>插入的思想和前面isContains类似。找到自己的位置(空位置)插入。但是又不太一样。你可能会疑问为什么不直接找到最后一个空，然后将current赋值过去current&#x3D;new node(x)。这样的化current就相当于指向一个new node(x)节点。和树就脱离关系，所以要提前判定是否为空，若为空将它的left或者right赋值即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> node <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">// 插入 t是root的引用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">node</span> <span class="variable">current</span> <span class="operator">=</span> root;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">root = <span class="keyword">new</span> <span class="title class_">node</span>(x);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; current.value) &#123;</span><br><span class="line"><span class="keyword">if</span> (current.left == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> current.left = <span class="keyword">new</span> <span class="title class_">node</span>(x);&#125;</span><br><span class="line"><span class="keyword">else</span> current = current.left;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; current.value) &#123;</span><br><span class="line"><span class="keyword">if</span> (current.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> current.right = <span class="keyword">new</span> <span class="title class_">node</span>(x);&#125;</span><br><span class="line"><span class="keyword">else</span> current = current.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> current;<span class="comment">//其中用不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="delete-int-x"><a href="#delete-int-x" class="headerlink" title="delete(int x)"></a>delete(int x)</h3><p><strong><strong>删除操作算是一个相对较难理解的操作了。</strong><br>删除节点规则：</strong></p><p>先找到这个点。这个点用这个点的子树可以补上的点填充该点，然后在以这个点为头删除替代的子节点（调用递归）然后在添加到最后情况（只有一个分支，等等）。<br>首先要找到移除的位置，然后移除的那个点分类讨论，如果有两个儿子，就选右边儿子的最左侧那个点替代，然后再子树删除替代的那个点。如果是一个节点，判断是左空还是右空，将这个点指向不空的那个。不空的那个就替代了这个节点。入股左右都是空，那么他自己变空null就删除了。</p><p>🌂<strong>删除的节点没有子孙:</strong><br>这种情况不需要考虑，直接删除即可。(途中红色点)。另节点&#x3D;null即可。</p><p><img src="https://s2.ax1x.com/2020/03/01/32k78I.png"></p><p>🌂🌂<strong>左节点为空、右节点为空：</strong></p><p>此种情况也很容易，直接将删除点的子节点放到被删除位置即可。<br><img src="https://s2.ax1x.com/2020/03/01/32Pr4I.png"></p><p>🌂🌂🌂<strong>左右节点均不空</strong></p><p>这种情况相对是复杂的。因为这涉及到一个策略问题。</p><p><img src="https://s2.ax1x.com/2020/03/01/32PDUA.png"></p><p>如果拿19或者71节点填补。虽然可以保证部分侧大于小于该节点，但是会引起合并的混乱.比如你若用71替代23节点。那么你需要考虑三个节点(19,50,75)之间如何处理，还要考虑他们是否满，是否有子女。这是个极其复杂的过程。<br>首先，我们要分析我们要的这个点的属性：能够继承被删除点的所有属性。如果取左侧节点(例如17)那么首先能满足所有右侧节点都比他大（右侧比左侧大）。那么就要再这边选一个最大的点让左半枝都比它小。我们分析左支最大的点一定是子树最右侧！<br>如果这个节点是最底层我们很好考虑，可以直接替换值，然后将最底层的点删除即可。但是如果这个节点有左枝。我们该怎么办？<br>这个分析起来也不难，用递归的思想啊。我们删除这个节点，用可以满足的节点替换了。会产生什么样的后果？</p><p><img src="https://s2.ax1x.com/2020/03/01/32PyCt.png"></p><p>多出个用过的19节点，转化一下，在左子树中删除19的点！那么这个问题又转化为删除节点的问题，查找左子树中有没有能够替代19这个点的。</p><p><strong>所以整个删除算法流程为：</strong></p><p><img src="https://s2.ax1x.com/2020/03/01/32P68P.png"></p><p><strong>代码为：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> node <span class="title function_">remove</span><span class="params">(<span class="type">int</span> x, node t)</span><span class="comment">// 删除节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; t.value) &#123;</span><br><span class="line">t.left = remove(x, t.left);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; t.value) &#123;</span><br><span class="line">t.right = remove(x, t.right);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="literal">null</span> &amp;&amp; t.right != <span class="literal">null</span>)<span class="comment">// 左右节点均不空</span></span><br><span class="line">&#123;</span><br><span class="line">t.value = findmin(t.right).value;<span class="comment">// 找到右侧最小值替代</span></span><br><span class="line">t.right = remove(t.value, t.right);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="comment">// 左右单空或者左右都空</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t.left == <span class="literal">null</span> &amp;&amp; t.right == <span class="literal">null</span>) &#123;</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">t = t.right;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="literal">null</span>) &#123;</span><br><span class="line">t = t.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p><strong>二叉排序树完整代码为：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> 二叉树;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySortTree</span> &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span> &#123;<span class="comment">// 结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> value;</span><br><span class="line"><span class="keyword">public</span> node left;</span><br><span class="line"><span class="keyword">public</span> node right;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">node</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">node</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.value = value;</span><br><span class="line"><span class="built_in">this</span>.left = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">node</span><span class="params">(<span class="type">int</span> value, node l, node r)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.value = value;</span><br><span class="line"><span class="built_in">this</span>.left = l;</span><br><span class="line"><span class="built_in">this</span>.right = r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">node root;<span class="comment">// 根</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BinarySortTree</span><span class="params">()</span> &#123;</span><br><span class="line">root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeEmpty</span><span class="params">()</span><span class="comment">// 变空</span></span><br><span class="line">&#123;</span><br><span class="line">root = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span><span class="comment">// 查看是否为空</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> root == <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> node <span class="title function_">findmin</span><span class="params">(node t)</span><span class="comment">// 查找最小返回值是node，调用查看结果时需要.value</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> (findmin(t.left));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> node <span class="title function_">findmax</span><span class="params">(node t)</span><span class="comment">// 查找最大</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125; <span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> (findmax(t.right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isContains</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">// 是否存在</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">node</span> <span class="variable">current</span> <span class="operator">=</span> root;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (current.value != x &amp;&amp; current != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; current.value) &#123;</span><br><span class="line">current = current.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &gt; current.value) &#123;</span><br><span class="line">current = current.right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="comment">// 在里面判断如果超直接返回</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果在这个位置判断是否为空会导致current.value不存在报错</span></span><br><span class="line"><span class="keyword">if</span> (current.value == x) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> node <span class="title function_">insert</span><span class="params">(<span class="type">int</span> x)</span><span class="comment">// 插入 t是root的引用</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">node</span> <span class="variable">current</span> <span class="operator">=</span> root;</span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">root = <span class="keyword">new</span> <span class="title class_">node</span>(x);</span><br><span class="line"><span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; current.value) &#123;</span><br><span class="line"><span class="keyword">if</span> (current.left == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> current.left = <span class="keyword">new</span> <span class="title class_">node</span>(x);&#125;</span><br><span class="line"><span class="keyword">else</span> current = current.left;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; current.value) &#123;</span><br><span class="line"><span class="keyword">if</span> (current.right == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> current.right = <span class="keyword">new</span> <span class="title class_">node</span>(x);&#125;</span><br><span class="line"><span class="keyword">else</span> current = current.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> current;<span class="comment">//其中用不到</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> node <span class="title function_">remove</span><span class="params">(<span class="type">int</span> x, node t)</span><span class="comment">// 删除节点</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x &lt; t.value) &#123;</span><br><span class="line">t.left = remove(x, t.left);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &gt; t.value) &#123;</span><br><span class="line">t.right = remove(x, t.right);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="literal">null</span> &amp;&amp; t.right != <span class="literal">null</span>)<span class="comment">// 左右节点均不空</span></span><br><span class="line">&#123;</span><br><span class="line">t.value = findmin(t.right).value;<span class="comment">// 找到右侧最小值替代</span></span><br><span class="line">t.right = remove(t.value, t.right);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="comment">// 左右单空或者左右都空</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (t.left == <span class="literal">null</span> &amp;&amp; t.right == <span class="literal">null</span>) &#123;</span><br><span class="line">t = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.right != <span class="literal">null</span>) &#123;</span><br><span class="line">t = t.right;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t.left != <span class="literal">null</span>) &#123;</span><br><span class="line">t = t.left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法—递归算法(从阶乘、斐波那契到汉诺塔的递归图解)</title>
      <link href="/2020/02/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95(%E4%BB%8E%E9%98%B6%E4%B9%98%E3%80%81%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%88%B0%E6%B1%89%E8%AF%BA%E5%A1%94%E7%9A%84%E9%80%92%E5%BD%92%E5%9B%BE%E8%A7%A3)/"/>
      <url>/2020/02/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%94%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95(%E4%BB%8E%E9%98%B6%E4%B9%98%E3%80%81%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%88%B0%E6%B1%89%E8%AF%BA%E5%A1%94%E7%9A%84%E9%80%92%E5%BD%92%E5%9B%BE%E8%A7%A3)/</url>
      
        <content type="html"><![CDATA[<h2 id="递归介绍"><a href="#递归介绍" class="headerlink" title="递归介绍"></a>递归介绍</h2><h3 id="递归："><a href="#递归：" class="headerlink" title="递归："></a>递归：</h3><p>就是函数自己调用自己。 子问题须与原始问题为同样的事，或者更为简单；<br>递归通常可以简单的处理子问题，但是不一定是最好的。</p><p>对于递归要分清以下概念：</p><p>🌂自己调用自己<br>🌂递归通常不在意具体操作，只关心初始条件和上下层的变化关系。<br>🌂递归函数需要有临界停止点，即递归不能无限制的执行下去。通常这个点为必须经过的一个数。<br>🌂递归通常能被其他方案替代(栈、数组正向求)。</p><h2 id="递归求阶乘"><a href="#递归求阶乘" class="headerlink" title="递归求阶乘"></a>递归求阶乘</h2><p>🌂求 n!&#x3D;n*(n-1)*—–<em>1&#x3D;n!&#x3D;n</em>(n-1)<br>所以阶乘的上下级的关系很容易找到。我们假设一个函数jiecheng(n)为求阶乘的函数。<br>这个阶乘，你可以这样命名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">      System.out.println(jiecheng(<span class="number">8</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 求n的阶乘</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jiecheng</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="comment">//0的阶乘为1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n*jiecheng(n-<span class="number">1</span>);<span class="comment">//return n*(n-1)*jiecheng(n-2)=-------</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行流程为这样：<br><img src="https://s2.ax1x.com/2020/02/29/3yC2Os.gif"></p><h2 id="递归求斐波那契"><a href="#递归求斐波那契" class="headerlink" title="递归求斐波那契"></a>递归求斐波那契</h2><p>按照上述思想，我们假设求斐波那契设成F(n)；<br>首先，斐波那契的公式为：</p><p>F[n]&#x3D;F[n-1]+F<a href="n%3E=3,F%5B1%5D=1,F%5B2%5D=1">n-2</a><br>也就是除了n&#x3D;1和2特殊以外，其他均是可以使用递推式。<br>那么递推实现的代码为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(ss(<span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ss</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>||n==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ss(n-<span class="number">1</span>)+ss(n-<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其实它的调用流程为：<br><img src="https://s2.ax1x.com/2020/02/29/3yiQPK.gif"></p><h2 id="递归解决汉诺塔"><a href="#递归解决汉诺塔" class="headerlink" title="递归解决汉诺塔"></a>递归解决汉诺塔</h2><h6 id="汉诺塔是经典递归问题："><a href="#汉诺塔是经典递归问题：" class="headerlink" title="汉诺塔是经典递归问题："></a>汉诺塔是经典递归问题：</h6><p><code>🌂🌂相传在古印度圣庙中，有一种被称为汉诺塔(Hanoi)的游戏。该游戏是在一块铜板装置上，有三根杆(编号A、B、C)，在A杆自下而上、由大到小按顺序放置64个金盘(如下图)。游戏的目标：把A杆上的金盘全部移到C杆上，并仍保持原有顺序叠好。操作规则：每次只能移动一个盘子，并且在移动过程中三根杆上都始终保持大盘在下，小盘在上，操作过程中盘子可以置于A、B、C任一杆上。 </code><br><img src="https://s2.ax1x.com/2020/02/29/3yFPeA.png"></p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><p><img src="https://s2.ax1x.com/2020/02/29/3yFGWT.png"></p><p>🌂果A只有一个（A-&gt;C）<br>🌂A有两个（A-&gt;B）,(A-&gt;C),(B-&gt;C)<br>🌂果A有三个（A-&gt;C）,(A-&gt;B),(C-&gt;B),(A-&gt;C),(B-&gt;A),(B-&gt;C),(A-&gt;C).<br>🌂更多，那么将会爆炸式增长。<br><img src="https://s2.ax1x.com/2020/02/29/3yFwwR.gif"></p><p>可以发现每增加一步，其中的步骤会多很多。但是不妨这样想：</p><p>🌂当有1个要从A-&gt;C时，且已知移动方式。使用函数表示move（a-&gt;c）。同理其他move操作。<br>——-省略中间若干步骤不看，用递归思想看问题</p><p><strong>分析</strong>：n个从a—&gt;c和n-1个a—&gt;c有什么联系？(hannuo(n)—&gt;hannuo(n-1)有啥关系)<br>假设有n个盘子</p><p>🌂hannuo(n-1)之后n-1个盘子从A—&gt;C.</p><p><img src="https://s2.ax1x.com/2020/02/29/3yFclD.png"></p><p>🌂此时剩下底下最大的，只能移动到B，move(A,B)</p><p><img src="https://s2.ax1x.com/2020/02/29/3yF5kt.png"></p><p>🌂那么你是否发现什么眉目了，只需原先的huannuo(n-1)相同操作从C—&gt;B即可完成转移到B；那么我们的之前函数应该写成hannuo(n-1,A,C)但是又用到B，所以把B传进来hannuo(n-1,A,B,C)先表示为从n-1个从A(借助B执行若干操作)转到C。</p><p><img src="https://s2.ax1x.com/2020/02/29/3yFb6g.png"></p><p>🌂这一系列操作使得将n个盘子从A—&gt;B但是我们要的是A—&gt;C才是需要的hannuo(n,A,B,C);那么我们只需要更改下hannuo(n-1,—-)顺序就好啦！<br>经过上面分析，那么完整的操作为：</p><pre><code class="java">public class hannuota &#123;    static void move(char a,char b)    &#123;        System.out.println(&quot;移动最上层的&quot;+ a+ &quot;到&quot;+ b+ &quot;\t&quot;);    &#125;    static void hannuota(int n,char a,char b,char c)//主要分析每一大步对于下一步需要走的。    &#123;        if(n==1) &#123;move(a,c);&#125;//从a移到c        else        &#123;            hannuota(n-1,a,c,b);//将n-1个从a借助c移到b            move(a,c); //将第n（最后一个）从a移到c。            hannuota(n-1,b,a,c);//再将n-1个从b借助a移到c        &#125;    &#125;    public static void main(String[] args)    &#123;        hannuota(3,&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);    &#125;&#125;### ```### 总结🌂🌂其实递归在某些场景的效率是很低下的。尤其是斐波那契.从图你就可以发现一个简单的操作有多次重复。因为它的递归调用俩个自己.那么它的递归的膨胀率是指数级别的，重复了大量相同计算。当然这种问题也有优化方案的：从前往后打表计算，采用类似动态规划的思想。从前往后考虑。比如斐波那契F[n]=F[n-1]+F[n-2];那么我用数组储存。从第三项开始F[3]=F[2]+F[1](均已知)，再F[4]=F[3]+F[2]-----这样，时间复杂度是O(N),线性的。当然，对于阶乘那种递归虽然时间是没有减少，但是如果需要多次访问一个阶乘，那么可以采用同样思想(打表)解决问题。</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之运算符、表达式和语句</title>
      <link href="/2020/02/07/java%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%AF%AD%E5%8F%A5/"/>
      <url>/2020/02/07/java%E4%B9%8B%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8C%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a>一、运算符</h1><h2 id="1-1、赋值运算符（“-”）——太简单不深入了"><a href="#1-1、赋值运算符（“-”）——太简单不深入了" class="headerlink" title="1.1、赋值运算符（“&#x3D;”）——太简单不深入了"></a>1.1、赋值运算符（“&#x3D;”）——太简单不深入了</h2><pre><code>    但是还是提醒一下，左边必须是变量！！！避免0=1；的低级错误！！！</code></pre><h2 id="1-2、一元运算符"><a href="#1-2、一元运算符" class="headerlink" title="1.2、一元运算符"></a>1.2、一元运算符</h2><pre><code>                   +/- ------正（负）号                    ！  ------ NOT，非                    ~   ------代表取补码                    ++ ------ 自增运算符                    --   ------ 自减运算符</code></pre><p>🌂下面补充下补码的知识（百度查的，能看懂）</p><p>在计算机系统中，数值一律用补码来表示（存储）。<br>主要原因：使用补码，可以将符号位和其它位统一处理；同时，减法也可按加法来处理。另外，两个用补码表示的数相加时，如果最高位（符号位）有进位，则进位被舍弃。<br>其中，正数的补码是它本身，而负整数的补码，将其原码除符号位外的所有位取反（0变1，1变0，符号位为1不变）后加1；<br>例如：求-5的补码。<br>-5对应正数5（00000101）→所有位取反（11111010）→加1(11111011)<br>所以-5的补码是11111011。</p><h2 id="1-3-算数运算符不多说（-、-、-、-、-），还是太简单了！！！"><a href="#1-3-算数运算符不多说（-、-、-、-、-），还是太简单了！！！" class="headerlink" title="1.3 算数运算符不多说（+、-、*、&#x2F;、%），还是太简单了！！！"></a>1.3 算数运算符不多说（+、-、*、&#x2F;、%），还是太简单了！！！</h2><h2 id="1-4-逻辑运算符（只对布尔类型进行操作并返回布尔类型数据）"><a href="#1-4-逻辑运算符（只对布尔类型进行操作并返回布尔类型数据）" class="headerlink" title="1.4 逻辑运算符（只对布尔类型进行操作并返回布尔类型数据）"></a>1.4 逻辑运算符（只对布尔类型进行操作并返回布尔类型数据）</h2><p>&amp;&amp;&#x2F;&amp; —— 与<br>|| &#x2F; | —— 或<br>！ —— 非</p><p>Java中&amp;&amp;和&amp;都是表示与的逻辑运算符，都表示逻辑运输符and，当两边的表达式都为true的时候，整个运算结果才为true，否则为false。<br>&amp;&amp;的短路功能，当第一个表达式的值为false的时候，则不再计算第二个表达式；&amp;则两个表达式都执行。<br>&amp;可以用作位运算符，当&amp;两边的表达式不是Boolean类型的时候，&amp;表示按位操作。<br>还是举一个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">1</span>&lt;<span class="number">0</span> &amp;&amp; <span class="number">1</span>/<span class="number">0</span>==<span class="number">0</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="number">1</span>&lt;<span class="number">0</span> &amp; <span class="number">1</span>/<span class="number">0</span>==<span class="number">0</span>;</span><br><span class="line">然后输出，会发现第一个<span class="number">1</span>&lt;<span class="number">0</span>得到<span class="literal">false</span>不看后面的条件了</span><br><span class="line">而第二个语句 在判断前面为假了以后 后面也会进行判断 但是后面是一个除<span class="number">0</span>错误，所以会报错，具体参看上面的引用部分，不再多讲</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="二、表达式"><a href="#二、表达式" class="headerlink" title="二、表达式"></a>二、表达式</h1><p>不想多说，C语言里面接触多了，就总结一点点</p><h2 id="2-1-算术表达式"><a href="#2-1-算术表达式" class="headerlink" title="2.1 算术表达式"></a>2.1 算术表达式</h2><p>a+&#x3D;b； &#x2F;&#x2F;a &#x3D; a + b;<br>a-&#x3D;b++; &#x2F;&#x2F;a &#x3D; a - b b &#x3D; b + 1;<br>但有一说一没必要像这样 早晚把人绕死！！！</p><h2 id="2-2-关系表达式（不讲！！！）"><a href="#2-2-关系表达式（不讲！！！）" class="headerlink" title="2.2 关系表达式（不讲！！！）"></a>2.2 关系表达式（不讲！！！）</h2><h2 id="2-3-逻辑表达式-（不讲！！！）"><a href="#2-3-逻辑表达式-（不讲！！！）" class="headerlink" title="2.3 逻辑表达式 （不讲！！！）"></a>2.3 逻辑表达式 （不讲！！！）</h2><h2 id="2-4-赋值表达式-（“-”不多说）"><a href="#2-4-赋值表达式-（“-”不多说）" class="headerlink" title="2.4 赋值表达式 （“&#x3D;”不多说）"></a>2.4 赋值表达式 （“&#x3D;”不多说）</h2><h2 id="2-5-表达式的类型转换"><a href="#2-5-表达式的类型转换" class="headerlink" title="2.5 表达式的类型转换"></a>2.5 表达式的类型转换</h2><p>原则：<br>（1）占用字节较少的数据类型转换成字节数较多的数据类型；<br>（2）字符类型会转换成int类型；<br>（3）int类型会转换成float类型；<br>（4）若表达式中其中一个类型为double，另一个操作数也会转double；<br>（5）布尔类型不能转换为其它类型；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="type">short</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">5.3f</span>;</span><br><span class="line"><span class="type">double</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">6.28</span>;</span><br><span class="line">System.out.print(<span class="string">&quot;(ch/a)-(d/f)-(a+b) = &quot;</span>);</span><br><span class="line">System.out.println((ch/a)-(d/f)-(a+b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出 (ch/a)-(d/f)-(a+b) = -51.18490561773532</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><h2 id="3-1-和-以及-和-的关系（上面已经提过了-可以往上翻找找看）"><a href="#3-1-和-以及-和-的关系（上面已经提过了-可以往上翻找找看）" class="headerlink" title="3.1 &amp;和&amp;&amp;以及||和|的关系（上面已经提过了 可以往上翻找找看）"></a>3.1 &amp;和&amp;&amp;以及||和|的关系（上面已经提过了 可以往上翻找找看）</h2><h2 id="3-2-递增递减运算符"><a href="#3-2-递增递减运算符" class="headerlink" title="3.2 递增递减运算符"></a>3.2 递增递减运算符</h2><p>++1 1++ –1 1–；</p><h2 id="3-3-位运算"><a href="#3-3-位运算" class="headerlink" title="3.3 位运算"></a>3.3 位运算</h2><p>小技巧：任何数与0000 0001进行或运算后，第一位将变成1；<br>任何数与1111 1110进行与运算后，第一位将变成0；<br>然后看到一些题目：（就敲出来给大家看看）</p><h3 id="①一个三目运算符的简单操作"><a href="#①一个三目运算符的简单操作" class="headerlink" title="①一个三目运算符的简单操作"></a>①一个三目运算符的简单操作</h3><p>&#x2F;&#x2F;一个三目运算符的简单操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">ret</span> <span class="operator">=</span> ((<span class="number">12345679</span>*<span class="number">9</span>)&gt;<span class="number">97654321</span>*<span class="number">3</span>)?<span class="literal">true</span>:<span class="literal">false</span>; </span><br><span class="line">System.out.println(ret);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="②生成一个随机字母"><a href="#②生成一个随机字母" class="headerlink" title="②生成一个随机字母"></a>②生成一个随机字母</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">double</span> <span class="variable">rand</span> <span class="operator">=</span> Math.random(); <span class="comment">//值为[0,1)的随机数</span></span><br><span class="line">System.out.println(rand);</span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> (<span class="type">char</span>)(<span class="number">97</span>+(<span class="type">int</span>)(Math.random()*<span class="number">26</span>));</span><br><span class="line"><span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> (<span class="type">char</span>)(<span class="number">65</span>+(<span class="type">int</span>)(Math.random()*<span class="number">26</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;小写字母：&quot;</span>+c1);</span><br><span class="line">System.out.println(<span class="string">&quot;大写字母：&quot;</span>+c2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="③随机生成一个小写字母并转换为大写"><a href="#③随机生成一个小写字母并转换为大写" class="headerlink" title="③随机生成一个小写字母并转换为大写"></a>③随机生成一个小写字母并转换为大写</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">97</span>+(<span class="type">int</span>)(Math.random()*<span class="number">26</span>);</span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> (num&gt;=<span class="number">97</span>&amp;&amp;num&lt;=<span class="number">122</span>)?(<span class="type">char</span>)(num-<span class="number">32</span>):<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;转换前：&quot;</span>+(<span class="type">char</span>)num);</span><br><span class="line">System.out.println(<span class="string">&quot;转换后：&quot;</span>+ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之数据类型</title>
      <link href="/2020/02/07/java%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/02/07/java%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、各种数据类型所占空间（没必要去记忆，了解即可）"><a href="#一、各种数据类型所占空间（没必要去记忆，了解即可）" class="headerlink" title="一、各种数据类型所占空间（没必要去记忆，了解即可）"></a>一、各种数据类型所占空间（没必要去记忆，了解即可）</h1><h3 id="①基本"><a href="#①基本" class="headerlink" title="①基本"></a>①基本</h3><p>字 节——byte——1字节<br>短整型——short——2字节<br>整 型—— int ——4字节<br>长整型—— long——8字节<br>布尔型——boolean—1bit<br>单精度—— float ——4字节<br>双精度——double——8字节<br>字 符—— char ——2字节</p><h3 id="②包装类"><a href="#②包装类" class="headerlink" title="②包装类"></a>②包装类</h3><p>整数类型对应的包装类<br>为什么引入包装类？万物即对象，而像byte、short等不是对象，所以由包装类引入对象的概念；<br>通常在后面加一个.可以得到其属性；<br>详细见下面的代码<br>byte——Byte<br>short——Short<br>int——Integer<br>long—–Long<br>float—–Float<br>double—–Double<br>char——Character</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">byte</span> <span class="variable">byte_max</span> <span class="operator">=</span> Byte.MAX_VALUE;   <span class="comment">//最大值</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">byte_min</span> <span class="operator">=</span> Byte.MIN_VALUE;   <span class="comment">//最小值</span></span><br><span class="line">System.out.println(<span class="string">&quot;the maximum of byte is &quot;</span>+byte_max);</span><br><span class="line">System.out.println(<span class="string">&quot;the minimum of byte is &quot;</span>+byte_min);</span><br><span class="line">System.out.println(<span class="string">&quot;byte对应的比特位&quot;</span>+Byte.SIZE); </span><br><span class="line">System.out.println(<span class="string">&quot;byte对应的类型&quot;</span>+Byte.TYPE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>小补充在Java中数字默认是int类型；所以在初始化赋值long类型时候应该 long 变量 = 1L;（L小写也可）int num = 1; //定义一个int类型long num1 = 1;//设计自动转换，因为在java中默认数字为int类型long num 2 = 2L;//定义一个long类型char ch = 91; 代表ch为’a‘;当要查看 字符对应的ASCII码时可以int ch2 = &#39;a&#39;;同理可以查看中文的GBK码表，此编码表也兼容ASCII码；这里同时拓展一下Unicode：将所有国家的编码表融合到一个表中</code></pre><h2 id="🌂布尔类型（没啥好说的）"><a href="#🌂布尔类型（没啥好说的）" class="headerlink" title="🌂布尔类型（没啥好说的）"></a>🌂布尔类型（没啥好说的）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">System.out.println(b1);</span><br><span class="line">System.out.println(b2);</span><br></pre></td></tr></table></figure><h1 id="二、数据类型转换（也没啥好说的前面说过）"><a href="#二、数据类型转换（也没啥好说的前面说过）" class="headerlink" title="二、数据类型转换（也没啥好说的前面说过）"></a>二、数据类型转换（也没啥好说的前面说过）</h1><p>但注意区别下这个的结果&#96;&#96;&#96;java<br>int a &#x3D; 55,b &#x3D; 9;<br>        float g,h;<br>        g&#x3D;a&#x2F;b;<br>        h&#x3D;(float)a&#x2F;b;<br>        System.out.println(g);   &#x2F;&#x2F;6.0<br>        System.out.println(h); &#x2F;&#x2F;6.111111</p><h1 id="三、基本数据类型的默认值三、基本数据类型的默认值"><a href="#三、基本数据类型的默认值三、基本数据类型的默认值" class="headerlink" title="三、基本数据类型的默认值三、基本数据类型的默认值"></a>三、基本数据类型的默认值三、基本数据类型的默认值</h1><p><code>成员变量有默认值，而局部变量没有</code><br>下面即为成员变量的默认值：<br>byte—(byte)0；<br>short—(short)0;<br>int—0;<br>long—0L;<br>float—0.0F;<br>double—0.0D;<br>char— ’ ‘或\u0000(也代表空，它为Unicode字符) 打印时像这样使用’\u0000‘<br>boolean—false;</p><h1 id="四、拓展"><a href="#四、拓展" class="headerlink" title="四、拓展"></a>四、拓展</h1><p>🌂（布尔类型）在c\c++中规定所有非零数即为真，零为假；而在Java中，布尔变量只有true与false两个变量，除此之外没有其他的任何值，因而它和任何数字都无关；</p><h3 id="①打印int类型中最小值到最大值是否为偶数"><a href="#①打印int类型中最小值到最大值是否为偶数" class="headerlink" title="①打印int类型中最小值到最大值是否为偶数"></a>①打印int类型中最小值到最大值是否为偶数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.MIN_VALUE;i&lt;=Integer.MAX_VALUE;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isEven</span> <span class="operator">=</span> (i%<span class="number">2</span>==<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;i = &quot;</span>+i+<span class="string">&quot;,isEven = &quot;</span>+isEven);</span><br><span class="line">也等价于System.out.println(<span class="string">&quot;i=%d,isEven=%b&quot;</span>,i,isEven);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="②拼接符号的使用"><a href="#②拼接符号的使用" class="headerlink" title="②拼接符号的使用"></a>②拼接符号的使用</h3><p>🌂“+”的功能:加法运算与拼接符号<br>加法运算：只有数字的时候，结果得到数字；<br>拼接符号：有字符串的时候，与字符串进行相加，得到字符串；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">       <span class="type">int</span> <span class="variable">x2</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">       System.out.println(x1+x2);      <span class="comment">//7</span></span><br><span class="line">       System.out.println(x1+x2+<span class="string">&quot;1&quot;</span>);  <span class="comment">//71</span></span><br><span class="line">       System.out.println(x1+x2+<span class="string">&quot;K&quot;</span>);  <span class="comment">//7K</span></span><br><span class="line">       System.out.println(<span class="string">&quot;A&quot;</span>+x1+x2);  <span class="comment">//A52</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>解释一下最后一个：<br>“A”+x1为字符串与数字相加得到“A5”这个字符串再与x2相加得到字符串“A52”；</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java之常量与变量</title>
      <link href="/2020/02/07/java%E4%B9%8B%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/"/>
      <url>/2020/02/07/java%E4%B9%8B%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-常量："><a href="#1-常量：" class="headerlink" title="1.常量："></a>1.常量：</h2><h3 id="1-1声明常量"><a href="#1-1声明常量" class="headerlink" title="1.1声明常量"></a>1.1声明常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语法： final 数据类型 常量名称 = 值</span></span><br><span class="line"><span class="comment"> * 规范：常量名称通常使用大写字母，比如PI、YEAR等等</span></span><br><span class="line"><span class="comment"> * 规则：常量名称符合标识符的要求，只能用字母、数字、_、$组成，不能以数字开头、不能使用关键词</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">int</span> YUAR=<span class="number">365</span>;   <span class="comment">//定义在main里面不需要加ststic，若定义在外面则需要加</span></span><br><span class="line">        System.out.println(<span class="string">&quot;一年有：&quot;</span>+YUAR+<span class="string">&quot;天&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;两年有：&quot;</span>+YUAR*<span class="number">2</span>+<span class="string">&quot;天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若把YUAR定义在main外面则需要加static</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若把YUAR定义在外面则为：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> YUAR=<span class="number">365</span>;   <span class="comment">//定义在main外面需要加ststic</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一年有：&quot;</span>+YUAR+<span class="string">&quot;天&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;两年有：&quot;</span>+YUAR*<span class="number">2</span>+<span class="string">&quot;天&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h2><h3 id="2-1声明变量"><a href="#2-1声明变量" class="headerlink" title="2.1声明变量"></a>2.1声明变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">       <span class="comment">//改变a的值</span></span><br><span class="line">        a=<span class="number">11</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2变量的作用范围"><a href="#2-2变量的作用范围" class="headerlink" title="2.2变量的作用范围"></a>2.2变量的作用范围</h3><p>按作用范围分类：成员变量和局部变量</p><h4 id="1-成员变量"><a href="#1-成员变量" class="headerlink" title="1.成员变量"></a>1.成员变量</h4><p>在类体中定义的变量，作用范围为整个类，这个类中都可以访问到定义的这个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4_2</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;   <span class="comment">//即为成员变量---在类体中定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-局部变量"><a href="#2-局部变量" class="headerlink" title="2.局部变量"></a>2.局部变量</h4><p>在一个函数（方法）或代码块中定义的变量<br>特点：局部变量在方法或代码块被执行的时候创建，在结束时被销毁<br><code>下面给一个简单的例子</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4_2</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">//以下就是一个块</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">System.out.println(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>; <span class="comment">//因为在上面执行结束后 代码块就被销毁了</span></span><br><span class="line">System.out.println(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">System.out.println(<span class="string">&quot;b+&quot;</span>+b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">b=<span class="number">2</span></span><br><span class="line">a=<span class="number">1</span></span><br><span class="line">b+<span class="number">3</span></span><br></pre></td></tr></table></figure><pre><code>成员变量可以与局部变量重名其调用服从“就近原则”下面给出一个例子如果不删除int var = 2，结果会显示 2，删除后则为1；</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4_2</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">var</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">var</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;the value of var = &quot;</span>+<span class="keyword">var</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">例二：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4_2</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">var</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">var</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;the value of var = &quot;</span>+<span class="keyword">var</span>);</span><br><span class="line">pt();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;the value of var = &quot;</span>+<span class="keyword">var</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java复习</title>
      <link href="/2020/02/05/java%E5%A4%8D%E4%B9%A0/"/>
      <url>/2020/02/05/java%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>java相信很多小伙伴儿都不会陌生，我也是大一下学期开始学习Java的，到现在位置基本忘记的差不多了（虽然经常拿出来看)，所以打算罗列出一个大纲，写一些博客，闲的时候拿出来看看，大致如下：</p><p>🌂Java基础<br>🌂常量与变量<br>🌂数据类型<br>🌂运算符，表达式，语句<br>🌂程序控制结构<br>🌂数<br>🌂类和对象<br>🌂方法<br>🌂枚举<br>🌂输入类（Scancer)<br>🌂复制数组以及创建随机数组<br>🌂字符串的遍历以及字符串的反转<br>🌂字符串是否可修改（字符串修改问题）<br>🌂子串<br>🌂在字符串中查找字符<br>🌂字符串的比较以及compareTo方法的使用<br>🌂字符串格式设置(附：print、printf以及println区别)<br>🌂Java实现杨辉三角<br>🌂关于随机数的一个Java面试题目<br>🌂回形数（简便方法）<br>🌂Math.random的使用<br>🌂数组的复制、反转、查找（线性查找、二分法）<br>🌂排序算法(冒泡排序、快速排序)<br>🌂总结常见的数组异常（越界与空指针）</p><p>正所谓，台上一分钟，台下十年功，一日不敲代码，如隔世秋，很多时候在这些东西都容易忘记得，就得自己花时间多捣鼓捣鼓，虽说我很菜，但是我很爱，这么别人没权力剥夺呀，敲自己的代码，管别人怎么说，该吃苦的年纪，不要选择安逸！</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python之循环中的那些事儿</title>
      <link href="/2020/02/05/python%E4%B9%8B%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2020/02/05/python%E4%B9%8B%E5%BE%AA%E7%8E%AF%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<p>盘点python中的循环也就那么回事，废话不罗嗦，下面一起看看吧！</p><h5 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h5><p>Python中if语句的一般形式如下所示：<br>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">       statement_block_1</span><br><span class="line">   <span class="keyword">elif</span> condition_2:</span><br><span class="line">       statement_block_2</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">       statement_block_3</span><br></pre></td></tr></table></figure><br>·如果 “condition_1” 为 True 将执行 “statement_block_1” 块语句<br>·如果 “condition_1” 为False，将判断 “condition_2”<br>·如果”condition_2” 为 True 将执行 “statement_block_2” 块语句<br>·如果 “condition_2” 为False，将执行”statement_block_3”块语句</p><p>Python 中用 elif 代替了 else if，所以if语句的关键字为：if – elif – else。</p><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p>1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。<br>2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。<br>3、在Python中没有switch – case语句。</p><h6 id="直接上代码："><a href="#直接上代码：" class="headerlink" title="直接上代码："></a>直接上代码：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入狗的年龄：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span>  age&lt;=<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你在逗我吧！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age==<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;想当人类14岁&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age==<span class="number">2</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相当于人类22岁&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> age&gt;<span class="number">2</span>:</span><br><span class="line">    sui=<span class="number">22</span>+(age-<span class="number">2</span>)*<span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;相当于人类&quot;</span>,sui)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入狗的年龄：<span class="number">5</span></span><br><span class="line">相当于人类 <span class="number">37</span></span><br></pre></td></tr></table></figure><h5 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h5><p>在嵌套 if 语句中，可以把 if…elif…else 结构放在另外一个 if…elif…else 结构中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:</span><br><span class="line">    语句</span><br><span class="line">    <span class="keyword">if</span> 表达式<span class="number">2</span>:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">elif</span> 表达式<span class="number">3</span>:</span><br><span class="line">        语句</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        语句</span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">4</span>:</span><br><span class="line">    语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    语句</span><br></pre></td></tr></table></figure><p>下面看一个例子吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">num=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个数字：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> num%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;你输入的数字可以整除 2 和 3&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;你输入的数字可以整除 2，但不能整除 3&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">3</span>==<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;你输入的数字可以整除 3，但不能整除 2&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>  (<span class="string">&quot;你输入的数字不能整除 2 和 3&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入一个数字：<span class="number">6</span></span><br><span class="line">你输入的数字可以整除 <span class="number">2</span> 和 <span class="number">3</span></span><br></pre></td></tr></table></figure><h5 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h5><p>同样需要注意冒号和缩进。另外，在 Python 中没有 do..while 循环。<br>以下实例使用了 while 来计算 1 到 100 的总和：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"> </span><br><span class="line">n = <span class="number">100</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">counter = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1 到 %d 之和为: %d&quot;</span> % (n,<span class="built_in">sum</span>))</span><br></pre></td></tr></table></figure><p>执行结果为：<br><code>1 到 100 之和为: 5050</code></p><h5 id="for-语句"><a href="#for-语句" class="headerlink" title="for 语句"></a>for 语句</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"> </span><br><span class="line">sites = [<span class="string">&quot;Baidu&quot;</span>, <span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Taobao&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> site <span class="keyword">in</span> sites:</span><br><span class="line">    <span class="keyword">if</span> site == <span class="string">&quot;Runoob&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;HW!&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;循环数据 &quot;</span> + site)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有循环数据!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;完成循环!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">循环数据 Baidu</span><br><span class="line">循环数据 Google</span><br><span class="line">HW!</span><br><span class="line">完成循环!</span><br></pre></td></tr></table></figure><p>进行循环嵌套原理一样，稍加理解即可。</p>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之----print、算术运算符、字符串、字符串运算符、input、类型转换</title>
      <link href="/2020/02/05/Python%E4%B9%8B-print%E3%80%81%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81input%E3%80%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>/2020/02/05/Python%E4%B9%8B-print%E3%80%81%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%90%E7%AE%97%E7%AC%A6%E3%80%81input%E3%80%81%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="第一个程序："><a href="#第一个程序：" class="headerlink" title="第一个程序："></a>第一个程序：</h2><h5 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Hwllo world&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h6 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h6><pre><code>Hwllo worldHello world</code></pre><p>🌂：另外在python当中，单引号与双引号是一样的意思，都是表示字符串；</p><h5 id="print"><a href="#print" class="headerlink" title="print"></a>print</h5><p>在Python中使用print 函数产生输出。这会在屏幕上显示某些内容的文本表示形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;h\nw&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">519</span>+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">h</span><br><span class="line">w</span><br><span class="line">520</span><br></pre></td></tr></table></figure><h5 id="Python中的算术运算符"><a href="#Python中的算术运算符" class="headerlink" title="Python中的算术运算符"></a>Python中的算术运算符</h5><p>首先±&#x2F;<em>这些基本运算以及求模%便不必多讲，python中如果使用幂运算就要使用两个</em>号<br><code>如：2**3 （2^3）</code><br>我们假定两个不同的变量a&#x3D;10，b&#x3D;30，那么b &#x2F; a 输出结果 2<br>而取整除 - 返回商的整数部分（向下取整）</p><p>考虑以下代码：</p><pre><code>print(9 / 2)print(9 // 2)</code></pre><p>最后输出结果分别为4.5与4</p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>我们可以使用引号(‘或”)来创建字符串</p><pre><code>var1 = &#39;hello world&#39;var2 = &quot;hello world&quot;</code></pre><p>但是有一字符不能直接包含在字符串中。<br>例如，双引号不能直接包含在双引号字符串中；<br>此类字符必须通过在其前面加上反斜杠来转义。（\“）<br>🌂：Python提供了一种简便的方法，可以避免手动编写“ \ n”来对字符串中的换行符进行转义。用三组引号创建一个字符串，然后按Enter为您自动转义换行符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="string">&quot;&quot;&quot; 有趣</span></span><br><span class="line"><span class="string">是啊</span></span><br><span class="line"><span class="string">嘻嘻&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(var1)</span><br></pre></td></tr></table></figure><p>这个最终将输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">有趣</span><br><span class="line">是啊</span><br><span class="line">嘻嘻</span><br></pre></td></tr></table></figure><h5 id="关于字符串的一些基本用法"><a href="#关于字符串的一些基本用法" class="headerlink" title="关于字符串的一些基本用法"></a>关于字符串的一些基本用法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="string">&quot;&quot;&quot;I love Python&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(var1)</span><br><span class="line"><span class="comment">#下面是一些基本用法#</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;var1[0]:&quot;</span>, var1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;var1[:6]:&quot;</span>, var1[:<span class="number">6</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;var1[6:]:&quot;</span>, var1[<span class="number">6</span>:])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;var1[3:6]:&quot;</span>, var1[<span class="number">3</span>:<span class="number">6</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">I love Python</span><br><span class="line">var1[0]: I</span><br><span class="line">var1[:6]: I love</span><br><span class="line">var1[6:]:  Python</span><br><span class="line">var1[3:6]: ove</span><br></pre></td></tr></table></figure><h5 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="string">&quot;&quot;&quot;I love Python&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;拼接结果：&#x27;</span>, var1+<span class="string">&#x27;我爱Python&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h5><p>不喜欢定义，直接上代码，看着直观</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var1 = <span class="string">&#x27;学习&#x27;</span></span><br><span class="line">var2 = <span class="string">&#x27;Python&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;var1 + var2 输出结果：&quot;</span>, var1 + var2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;var1 * 2 输出结果：&quot;</span>, var1 * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;学&#x27;</span> <span class="keyword">in</span> var1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;学在变量var1中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;学不在变量var1中&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;爱&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> var1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爱不在变量var1中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爱在变量var1中&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var1 + var2 输出结果： 学习Python</span><br><span class="line">var1 * 2 输出结果： 学习学习</span><br><span class="line">学在变量var1中</span><br><span class="line">爱不在变量var1中</span><br></pre></td></tr></table></figure><h5 id="input函数"><a href="#input函数" class="headerlink" title="input函数"></a>input函数</h5><p>提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sc = <span class="built_in">input</span>(<span class="string">&quot;Enter something please: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(sc)</span><br></pre></td></tr></table></figure><h5 id="类型转换（参考sololearn）"><a href="#类型转换（参考sololearn）" class="headerlink" title="类型转换（参考sololearn）"></a>类型转换（参考sololearn）</h5><p>在Python中，由于涉及不同的类型而无法完成某些操作。<br>Eg：不能将包含数字2和3的两个字符串加在一起以产生整数 5，因为将对字符串执行运算，结果为’23’。<br>那么如何解决这个问题，答案是类型转换<br>考虑下面这个代码，并比较输出结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>+<span class="string">&quot;5&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>+<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;2&quot;</span>)+<span class="built_in">int</span>(<span class="string">&quot;5&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="string">&quot;2&quot;</span>+<span class="string">&quot;5&quot;</span>))</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">25</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">25</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一个python程序</title>
      <link href="/2020/02/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AApython%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/02/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AApython%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>前无古人后无来者，遇到吃蝙蝠这傻逼。我也是服，你说说你，在这里我就要批评你了啥，他的肉是比你多，还是比你香呀，好吃吗？我就是从跟这儿跳下去，也绝不吃你一口蝙蝠肉，这回吃火了把，无人不知，无人不晓吧，你可牛逼了，害了那么多人，舒服了吧，整个中国因为你停下休息，多少人去见了你吃的蝙蝠，满意了呀，我躲在家学python，也是醉了！<br><img src="http://i1.fuimg.com/710494/f39e5a861a29e605.png"></p><h3 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好，蝙蝠侠！&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><pre><code>你好，蝙蝠侠!</code></pre><p>注：因为图片还得从图床上面拉取，所以为了方便，就直接把输出结果放在代码框里了。</p>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python简介</title>
      <link href="/2020/02/03/python%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/02/03/python%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>我的python学习之路，虽说现在大二，还没学习python，大然会开这个课程但是这个是选修，估计到时候又是和学习网页设计一样没啥效果，打算现在开始学习python，准备坚持写博客，然后打算用自己通俗易懂的话进行描述，如果有专业大老儿碰巧看到请勿笑话！</p><h3 id="Python-简介Python-简介"><a href="#Python-简介Python-简介" class="headerlink" title="Python 简介Python 简介"></a>Python 简介Python 简介</h3><p>Python是一个高层次的结合了解释性、编译性、互动性和面向对象的脚本语言。<br>Python的设计具有很强的可读性，相比其他语言经常使用英文关键字，其他语言的一些标点符号，它具有比其他语言更有特色语法结构。<br>Python 是一种解释型语言： 这意味着开发过程中没有了编译这个环节。类似于PHP和Perl语言。<br>Python 是交互式语言： 这意味着，您可以在一个Python提示符，直接互动执行写你的程序。<br>Python 是面向对象语言: 这意味着Python支持面向对象的风格或代码封装在对象的编程技术。<br>Python是初学者的语言：Python 对初级程序员而言，是一种伟大的语言，它支持广泛的应用程序开发，从简单的文字处理到 WWW 浏览器再到游戏。</p><h3 id="Python发展历史"><a href="#Python发展历史" class="headerlink" title="Python发展历史"></a>Python发展历史</h3><p>Python是由Guido van Rossum在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。<br>Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。<br>像Perl语言一样, Python 源代码同样遵循 GPL(GNU General Public License)协议。<br>现在Python是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。</p><h3 id="Python特点"><a href="#Python特点" class="headerlink" title="Python特点"></a>Python特点</h3><p>1.易于学习：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。<br>2.易于阅读：Python代码定义的更清晰。<br>3.易于维护：Python的成功在于它的源代码是相当容易维护的。<br>4.一个广泛的标准库：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。<br>5.互动模式：互动模式的支持，您可以从终端输入并获得结果的语言，互动的测试和调试代码片断。<br>6.便携式：Python可以运行在多种硬件平台和所有平台上都具有相同的接口。<br>7.可扩展：可以添加低层次的模块到Python解释器。这些模块使程序员可以添加或定制自己的工具，更有效。<br>8.数据库：Python提供所有主要的商业数据库的接口。<br>9.GUI编程：Python支持GUI可以创建和移植到许多系统调用。<br>10.可扩展性：相比 shell 脚本，Python 提供了一个更好的结构，且支持大型程序。</p>]]></content>
      
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html知识点总结</title>
      <link href="/2020/02/03/html%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2020/02/03/html%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>上学期学习html都忘记的差不多了，简单的写一下博客！</p><pre><code>1 链接   &lt;a href=&quot;http://www.runoob.com&quot;&gt;这是一个链接&lt;/a&gt;2 图像   &lt;img src=&quot;/images/logo.png&quot; width=&quot;258&quot; height=&quot;39&quot; /&gt;3 换行   &lt;br&gt;4 hr       元素可用于分隔内容5 注释    &lt;!-- 这是一个注释 --&gt;6 字体     &lt;font size=&quot;5&quot;&gt;这是5号字体文本&lt;/font&gt;7 左右显示字体   &lt;p&gt;该段落文字从左到右显示。&lt;/p&gt;                            &lt;p&gt;&lt;bdo dir=&quot;rtl&quot;&gt;该段落文字从右到左显示。&lt;/bdo&gt;&lt;/p&gt; 8 段落里面引用  &lt;q&gt;&lt;/q&gt;9 删除字效果和插入字效果   &lt;p&gt;My favorite color is &lt;del&gt;blue&lt;/del&gt; &lt;ins&gt;red&lt;/ins&gt;!&lt;/p&gt;10 HTML 文本格式化标签标签 描述&lt;b&gt; 定义粗体文本&lt;em&gt; 定义着重文字&lt;i&gt; 定义斜体字&lt;small&gt; 定义小号字&lt;strong&gt; 定义加重语气&lt;sub&gt; 定义下标字&lt;sup&gt; 定义上标字&lt;ins&gt; 定义插入字&lt;del&gt; 定义删除字HTML &quot;计算机输出&quot; 标签标签 描述&lt;code&gt; 定义计算机代码&lt;kbd&gt; 定义键盘码&lt;samp&gt; 定义计算机代码样本&lt;var&gt; 定义变量&lt;pre&gt; 定义预格式文本HTML 引文, 引用, 及标签定义标签 描述&lt;abbr&gt; 定义缩写&lt;address&gt; 定义地址&lt;bdo&gt; 定义文字方向&lt;blockquote&gt; 定义长的引用&lt;q&gt; 定义短的引用语&lt;cite&gt; 定义引用、引证&lt;dfn&gt; 定义一个定义项目。11&lt;p&gt;创建图片链接:&lt;a href=&quot;//www.runoob.com/html/html-tutorial.html&quot;&gt;&lt;img  border=&quot;10&quot; src=&quot;smiley.gif&quot; alt=&quot;HTML 教程&quot; width=&quot;32&quot; height=&quot;32&quot;&gt;&lt;/a&gt;&lt;/p&gt;（其中border是调节图片边框的  例如0代表没有）12  &lt;p&gt;这是一个电子邮件链接：&lt;a href=&quot;mailto:someone@example.com?Subject=Hello%20again&quot; target=&quot;_top&quot;&gt;发送邮件&lt;/a&gt;&lt;/p&gt;13   定义没有下划线的链接        &lt;a href=&quot;//www.runoob.com/&quot; style=&quot;text-decoration:none;&quot;&gt;访问 runoob.com!&lt;/a&gt;14 文本框 （定义在head之间）  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;styles.css&quot;&gt;15 定义背景颜色  全局 &lt;body style=&quot;background-color:yellow;&quot;&gt;                           标题和段落  16 颜色和大小  &lt;h1 style=&quot;font-family:verdana;&quot;&gt;一个标题&lt;/h1&gt;                        &lt;p style=&quot;font-family:arial;color:red;font-size:20px;&quot;&gt;一个段落。&lt;/p&gt;17 剧中  &lt;h1 style=&quot;text-align:center;&quot;&gt;居中对齐的标题&lt;/h1&gt;18插入图像和动画   一个图像:&lt;p&gt; &lt;img src=&quot;smiley.gif&quot; alt=&quot;Smiley face&quot; width=&quot;32&quot; height=&quot;32&quot;&gt;&lt;/p&gt;&lt;p&gt;一个动图:&lt;img src=&quot;hackanm.gif&quot; alt=&quot;Computer man&quot; width=&quot;48&quot; height=&quot;48&quot;&gt;&lt;/p&gt;19  不同位置的图片  &lt;p&gt;一个来自文件夹中的图像:&lt;/p&gt;&lt;img src=&quot;/images/chrome.gif&quot; alt=&quot;Google Chrome&quot; width=&quot;33&quot; height=&quot;32&quot;&gt;    &lt;p&gt;一个来自菜鸟教程的图像:&lt;/p&gt;&lt;img src=&quot;//www.runoob.com/images/logo.png&quot; alt=&quot;runoob.com&quot; width=&quot;336&quot; height=&quot;69&quot;&gt;20 表格  &lt;h4&gt;一行三列:&lt;/h4&gt;&lt;table border=&quot;1&quot;&gt;&lt;tr&gt;  &lt;td&gt;100&lt;/td&gt;  &lt;td&gt;200&lt;/td&gt;  &lt;td&gt;300&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;21 colspan   rowspan    边距 cellpadding22表单  &lt;form action=&quot;&quot;&gt;First name: &lt;input type=&quot;text&quot; name=&quot;firstname&quot;&gt;&lt;br&gt;Last name: &lt;input type=&quot;text&quot; name=&quot;lastname&quot;&gt;&lt;/form&gt;密码框为password</code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据集结构之双向链表</title>
      <link href="/2020/02/03/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/02/03/%E6%95%B0%E6%8D%AE%E9%9B%86%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>双向链表也叫头尾链表，头尾链表可以在头结点和尾结点分别进行插入和删除操作</p><p>首先建立结点类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> firstlastlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">public</span> Node next;  <span class="comment">//节点下一个值</span></span><br><span class="line">    <span class="keyword">public</span> Node privious;  <span class="comment">//节点上一个值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data=value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> firstlastlist;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstLastList</span> &#123;</span><br><span class="line">    Node first;<span class="comment">//头结点</span></span><br><span class="line">    Node last;<span class="comment">//尾结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FirstLastList</span><span class="params">()</span>&#123;</span><br><span class="line">        first=<span class="literal">null</span>;</span><br><span class="line">        last=<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> first==<span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFirst</span><span class="params">(<span class="type">int</span> value)</span>&#123;<span class="comment">//插入元素，在头结点前面插入</span></span><br><span class="line">        Node node=<span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            last=node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.next=first;</span><br><span class="line">        first=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertlast</span><span class="params">(<span class="type">int</span> value)</span>&#123;<span class="comment">//从尾结点插入</span></span><br><span class="line">        Node node=<span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            first=node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            last.next=node;<span class="comment">//从尾结点插入</span></span><br><span class="line">        &#125;</span><br><span class="line">        last=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deletFirst</span><span class="params">()</span>&#123;<span class="comment">//删除元素，从头结点开始</span></span><br><span class="line">        <span class="keyword">if</span>(first.next==<span class="literal">null</span>)&#123;<span class="comment">//如果头结点的下一个结点为空，则只剩一个结点，此时将尾结点置为空，以便下次使用</span></span><br><span class="line">            last=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Node temp=first;</span><br><span class="line">        first=first.next;<span class="comment">//把后面的结点往前移进行删除，最后剩一个结点时first和last均为null</span></span><br><span class="line">        <span class="keyword">return</span> temp.data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;<span class="comment">//打印链表的数据，从头结点开始</span></span><br><span class="line">        Node t=first;</span><br><span class="line">        <span class="keyword">while</span>(t.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">            t.display();</span><br><span class="line">            t=t.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当t的下一个结点为null时，此时t到了尾结点，然后跳出循环，打印尾结点</span></span><br><span class="line">        t.display();;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">chazhao</span><span class="params">(<span class="type">int</span> value)</span>&#123;<span class="comment">//按值查找</span></span><br><span class="line">        Node tt=first;</span><br><span class="line">        <span class="keyword">while</span>(tt.data!=value)&#123;<span class="comment">//当tt结点的值不符合要求时，往他的邻结点查找</span></span><br><span class="line">            <span class="keyword">if</span>(tt.next==<span class="literal">null</span>)&#123;<span class="comment">//当结点的值不符合且后面也没有结点时，则返回null，没找到</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tt=tt.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">shangchu</span><span class="params">(<span class="type">int</span> value)</span>&#123;<span class="comment">//按值删除并输出值</span></span><br><span class="line">        Node tt=first;</span><br><span class="line">        Node ty=first;<span class="comment">//ty作为新一个tt的上一个结点，用来进行删除操作</span></span><br><span class="line">        <span class="keyword">while</span>(tt.data!=value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tt.next==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ty=tt;</span><br><span class="line">            tt=tt.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tt==first)&#123;</span><br><span class="line">            first=first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ty.next=tt.next;<span class="comment">//把该节点前一个结点的下一个结点值变为该节点的下一个结点，即完成了删除操作</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> firstlastlist;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFirstlastList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        FirstLastList tt=<span class="keyword">new</span> <span class="title class_">FirstLastList</span>();</span><br><span class="line">        tt.insertFirst(<span class="number">1</span>);</span><br><span class="line">        tt.insertFirst(<span class="number">2</span>);</span><br><span class="line">        tt.insertFirst(<span class="number">3</span>);</span><br><span class="line">        tt.display();</span><br><span class="line">        tt.deletFirst();</span><br><span class="line">        tt.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下所示：<br>    3<br>    2<br>    1<br>    2<br>    1 </p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之单向链表</title>
      <link href="/2020/02/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
      <url>/2020/02/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>单链表是链表中结构最简单的。一个单链表的节点 (Node) 分为两个部分，第一个部分 (data) 保存或者显示关于节点的信息，另一个部分存储下一个节点的地址。最后一个节点存储地址的部分指向空值。</p><p>　　单向链表只可向一个方向遍历，一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。而插入一个节点，对于单向链表，我们只提供在链表头插入，只需要将当前插入的节点设置为头节点，next 指向原头节点即可。删除一个节点，我们将该节点的上一个节点的 next 指向该节点的下一个节点。<br>  图解如下：<br><img src="https://s2.ax1x.com/2020/02/29/3ymXxP.png"></p><p>首先建立一个链表结点的类，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据</span></span><br><span class="line">    <span class="keyword">public</span> Node next;  <span class="comment">//节点下一个值</span></span><br><span class="line">    <span class="keyword">public</span> Node privious;  <span class="comment">//节点上一个值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data=value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(data+<span class="string">&quot; &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>初始化链表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkList</span>&#123;</span><br><span class="line">    Node first;<span class="comment">//头结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkList</span><span class="params">()</span>&#123;</span><br><span class="line">        first=<span class="literal">null</span>;<span class="comment">//初始化头结点为null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFirst</span><span class="params">(<span class="type">int</span> value)</span>&#123;<span class="comment">//插入元素，在头结点前面插入</span></span><br><span class="line">        Node node=<span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">        node.next=first;</span><br><span class="line">        first=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deletFirst</span><span class="params">()</span>&#123;<span class="comment">//删除元素，从头结点开始</span></span><br><span class="line">        Node temp=first;</span><br><span class="line">        first=first.next;<span class="comment">//把头结点的下一个结点赋给它，即删除了头结点</span></span><br><span class="line">        <span class="keyword">return</span> temp.data;<span class="comment">//返回删除的结点的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;<span class="comment">//将链表的数据打印出来</span></span><br><span class="line">        Node t=first;</span><br><span class="line">        <span class="keyword">while</span>(t.next!=<span class="literal">null</span>)&#123;<span class="comment">//打印出除尾结点以外的数据</span></span><br><span class="line">            t.display();</span><br><span class="line">            t=t.next;</span><br><span class="line">        &#125;</span><br><span class="line">        t.display();<span class="comment">//打印尾结点的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">chazhao</span><span class="params">(<span class="type">int</span> value)</span>&#123;<span class="comment">//按值查找</span></span><br><span class="line">        Node tt=first;</span><br><span class="line">        <span class="keyword">while</span>(tt.data!=value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tt.next==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            tt=tt.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tt;<span class="comment">//返回查找的结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">shangchu</span><span class="params">(<span class="type">int</span> value)</span>&#123;<span class="comment">//按值删除并输出值</span></span><br><span class="line">        Node tt=first;</span><br><span class="line">        Node ty=first;</span><br><span class="line">        <span class="keyword">while</span>(tt.data!=value)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tt.next==<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ty=tt;<span class="comment">//ty是要删除的结点的前一个结点，因为后面一句代码将tt的值变成了tt的下一个结点</span></span><br><span class="line">            tt=tt.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tt==first)&#123;</span><br><span class="line">            first=first.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ty.next=tt.next;<span class="comment">//将tt的前面的结点的下一个结点变成tt的下一结点，即删除了tt结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tt;<span class="comment">//返回删除的结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写一个测试数据类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> linklist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextLinkList</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        LinkList a=<span class="keyword">new</span> <span class="title class_">LinkList</span>();</span><br><span class="line">        a.insertFirst(<span class="number">1</span>);<span class="comment">//插入数据</span></span><br><span class="line">        a.insertFirst(<span class="number">2</span>);</span><br><span class="line">        a.insertFirst(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;打印数据&quot;</span>);</span><br><span class="line">        a.display();<span class="comment">//打印数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">        a.deletFirst();<span class="comment">//删除头结点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除头节点后的数据&quot;</span>);</span><br><span class="line">        a.display();<span class="comment">//打印数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">        Node node=a.chazhao(<span class="number">1</span>);<span class="comment">//查找data值为1的结点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查找data值为1的结点&quot;</span>);</span><br><span class="line">        System.out.println(node.data);<span class="comment">//输出数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">        Node node1=a.shangchu(<span class="number">1</span>);<span class="comment">//删除结点data值为1的数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除结点data值为1的数据&quot;</span>);</span><br><span class="line">        System.out.println(node1.data);<span class="comment">//打印数据</span></span><br><span class="line">        System.out.println(<span class="string">&quot;************&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;打印剩下数据&quot;</span>);</span><br><span class="line">        a.display();</span><br><span class="line"></span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">打印数据</span><br><span class="line"><span class="number">3</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">1</span> </span><br><span class="line">************</span><br><span class="line">删除头节点后的数据</span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">1</span> </span><br><span class="line">************</span><br><span class="line">查找data值为<span class="number">1</span>的结点</span><br><span class="line"><span class="number">1</span></span><br><span class="line">************</span><br><span class="line">删除结点data值为<span class="number">1</span>的数据</span><br><span class="line"><span class="number">1</span></span><br><span class="line">************</span><br><span class="line">打印剩下数据</span><br><span class="line"><span class="number">2</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之栈</title>
      <link href="/2020/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/"/>
      <url>/2020/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="栈的基本介绍"><a href="#栈的基本介绍" class="headerlink" title="栈的基本介绍"></a>栈的基本介绍</h2><p>栈是一种只允许在一端进行插入或删除的线性表，也就是说先进后出。栈的操作端通常被称为栈顶，另一端被称为栈底，栈的插入操作称为压栈（push），栈删除操作称为出栈（pop）。压栈是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；出栈则是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p><p>操作代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stack</span>&#123;</span><br><span class="line">    <span class="type">int</span> top=-<span class="number">1</span>;  <span class="comment">//栈顶</span></span><br><span class="line">    <span class="type">long</span> arr[];  <span class="comment">//定义一个数组，用来存放栈里面的元素</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">Stack</span><span class="params">()</span>&#123;</span><br><span class="line">        arr=<span class="keyword">new</span> <span class="title class_">long</span>[<span class="number">5</span>];<span class="comment">//初始化数组,知名元素个数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Stack</span><span class="params">(<span class="type">int</span> maxsize)</span>&#123;  <span class="comment">//自定义栈内元素个数</span></span><br><span class="line">        arr=<span class="keyword">new</span> <span class="title class_">long</span>[maxsize];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//入栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> value)</span>&#123;</span><br><span class="line">        arr[++top]=value;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[top--];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查看</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[top];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">IsEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top==-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//满</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">IsFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top==arr.length-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextStack</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Stack a=<span class="keyword">new</span> <span class="title class_">Stack</span>();</span><br><span class="line">        a.push(<span class="number">1</span>);</span><br><span class="line">        a.push(<span class="number">2</span>);</span><br><span class="line">        a.push(<span class="number">3</span>);</span><br><span class="line">        a.push(<span class="number">4</span>);</span><br><span class="line">        a.push(<span class="number">5</span>);</span><br><span class="line">        System.out.println(a.IsEmpty());</span><br><span class="line">        System.out.println(a.IsFull());</span><br><span class="line">        System.out.println(a.pop());</span><br><span class="line">        System.out.println(a.peek());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><code>false true 5 4 </code></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之队列</title>
      <link href="/2020/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/"/>
      <url>/2020/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p><strong>队列</strong>（queue）是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。</p><p>　　队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。因为<strong>队列只允许在一端插入，在另一端删除，</strong>所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为<strong>先进先出</strong>（FIFO—first in first out）线性表。</p><p>　　比如我们去电影院排队买票，第一个进入排队序列的都是第一个买到票离开队列的人，而最后进入排队序列排队的都是最后买到票的。</p><p>　　在比如在计算机操作系统中，有各种队列在安静的工作着，比如打印机在打印列队中等待打印。</p><p>　　队列分为：</p><p>　　①、单向队列（Queue）：只能在一端插入数据，另一端删除数据。</p><p>　　②、双向队列（Deque）：每一端都可以进行插入数据和删除数据操作。</p><p>　　这里我们还会介绍一种队列——优先级队列，优先级队列是比栈和队列更专用的数据结构，在优先级队列中，数据项按照关键字进行排序，关键字最小（或者最大）的数据项往往在队列的最前面，而数据项在插入的时候都会插入到合适的位置以确保队列的有序。</p><p>  Java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Queue</span>&#123;</span><br><span class="line">    <span class="type">int</span> front;  <span class="comment">//对头</span></span><br><span class="line">    <span class="type">int</span> end;    <span class="comment">//队尾，从队尾添加元素，从对头删除元素</span></span><br><span class="line">    <span class="type">int</span> elements;  <span class="comment">//元素个数</span></span><br><span class="line">    <span class="type">long</span> arr[];</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Queue</span><span class="params">(<span class="type">int</span> maxsize)</span>&#123;</span><br><span class="line">        <span class="type">int</span> front=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> end=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> elements=<span class="number">0</span>;</span><br><span class="line">        arr=<span class="keyword">new</span> <span class="title class_">long</span>[maxsize];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">long</span> value)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (end==arr.length)end=<span class="number">0</span>;</span><br><span class="line">    arr[end]=value;</span><br><span class="line">    ++elements;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">remove</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (front==arr.length)front=<span class="number">0</span>;</span><br><span class="line">        elements--;</span><br><span class="line">        <span class="keyword">return</span> arr[front++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查看</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">long</span> <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[end];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elements==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判满</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">isFull</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elements==arr.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写一个测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestQueue</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Queue b=<span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="number">8</span>);</span><br><span class="line">        b.insert(<span class="number">2</span>);</span><br><span class="line">        b.insert(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">//b.insert(7);</span></span><br><span class="line">       <span class="comment">// b.insert(1);</span></span><br><span class="line">       <span class="comment">// b.insert(3);</span></span><br><span class="line">        System.out.println(b.isEmpty());</span><br><span class="line">        System.out.println(b.isFull());</span><br><span class="line">        System.out.println(<span class="string">&quot;队尾&quot;</span>+b.peek());</span><br><span class="line">        System.out.println(b.remove());</span><br><span class="line">        System.out.println(<span class="string">&quot;队尾&quot;</span>+b.peek());</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下：</p><pre><code>falsefalse队尾88队尾80队尾8</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找算法</title>
      <link href="/2020/02/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
      <url>/2020/02/01/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="一个游戏："><a href="#一个游戏：" class="headerlink" title="一个游戏："></a>一个游戏：</h2><p>讲二分查找算法之前，先讲个猜数字游戏的规则：从1-100中猜测一个预先设置的数字，猜测者每次猜测一个数字，设定数字的人会告知比猜测的数字大或者小或者猜对了。</p><p> ###  ·简单算法：</p><p>我们可以每次从1开始猜测，第二次猜2，依次增加，如果数字设置的小还好，如果设置较大，那么猜测的次数将大大增加，我们称这种算法为简单算法。</p><p> </p><h3 id="·二分查找算法（又叫折半算法）："><a href="#·二分查找算法（又叫折半算法）：" class="headerlink" title="·二分查找算法（又叫折半算法）："></a>·二分查找算法（又叫折半算法）：</h3><p>正确的做法是从50开始猜，如果大了，我们第二次开始猜25，如果小了，我们就猜75，以此类推，这样1-100中的数字，我们一定能在7次猜对对方给出的数字，这就是二分查找算法的思路。</p><h3 id="二分查找算法图示："><a href="#二分查找算法图示：" class="headerlink" title="二分查找算法图示："></a>二分查找算法图示：</h3><p><img src="https://s2.ax1x.com/2020/02/29/3y9Jrn.png"><br>二分算法次数：</p><p>样本放大，如果是从1-1亿中猜数字，那么简单猜测的步数就是1亿次，而二分查找算法的步数是27次，算法的威力就提现出来了。二分查找算法的步数的计算公式是log₂n（n是数字范围）</p><p> </p><h3 id="算法的代码实现（Java版）："><a href="#算法的代码实现（Java版）：" class="headerlink" title="~算法的代码实现（Java版）："></a>~算法的代码实现（Java版）：</h3><h4 id="1、循环实现二分查找算法"><a href="#1、循环实现二分查找算法" class="headerlink" title="1、循环实现二分查找算法"></a>1、循环实现二分查找算法</h4><pre><code>/** * 循环实现二分查找算法 * @param list：需要查找的有序数组 * @param result：查找的目标值 * @return */public static int binarySearch(int[] list, int result)&#123;    int low = 0;    int high = list.length - 1;    if (result &lt; list[0] || result &gt; list[high])&#123;        return -1;    &#125;    while (low &lt;= high)&#123;        int mid = (low + high) / 2;        int guess = list[mid];        if (guess == result)&#123;            return mid;        &#125;        if (guess &gt; result)&#123;            high = mid - 1;        &#125;else &#123;            low = mid + 1;        &#125;    &#125;    return -1;&#125;</code></pre><h4 id="2、递归实现二分查找算法-2、递归实现二分查找算法"><a href="#2、递归实现二分查找算法-2、递归实现二分查找算法" class="headerlink" title="2、递归实现二分查找算法   2、递归实现二分查找算法"></a>2、递归实现二分查找算法   2、递归实现二分查找算法</h4><pre><code>/** * 递归实现二分查找算法 * @param list：需要查找的有序数组 * @param result：查找的目标值 * @param low：有序数组的最小值 * @param high：有序数组的最大值 * @return */public static int recursionBinarySearch(int[] list, int result, int low, int high)&#123;    if (result &lt; list[0] || result &gt; list[high])&#123;        return -1;    &#125;    int mid = (low + high) / 2;    if (list[mid] &gt; result)&#123;        return  recursionBinarySearch(list, result, low, mid - 1);    &#125;else if (list[mid] &lt; result)&#123;        return recursionBinarySearch(list, result, mid + 1, high);    &#125;else &#123;        return mid;    &#125;&#125;</code></pre><p> </p><h4 id="二分查找算法的时间复杂度：二分查找算法的时间复杂度："><a href="#二分查找算法的时间复杂度：二分查找算法的时间复杂度：" class="headerlink" title="二分查找算法的时间复杂度：二分查找算法的时间复杂度："></a>二分查找算法的时间复杂度：二分查找算法的时间复杂度：</h4><p>推导方法：从上图来分析，假设查找的次数为K</p><p>第1次查找剩余元素为：N&#x2F;2^1(K&#x3D;1)<br>第2次查找剩余元素为：N&#x2F;2^2(K&#x3D;2)<br>……<br>第N次查找剩余元素为：N&#x2F;2^K<br>从上面的推导可以得出N&#x2F;2^K &gt;&#x3D; 1(也就是一定会有一个元素)，大O标识的最糟糕的时间复杂度，那么，按最坏的结果计算，查到最后一个元素才找到最后的数字，也就是N&#x2F;2^K &#x3D; 1，从而可以推导出N &#x3D; 2^K，进而推导出：K &#x3D; log₂N</p><p>所以二分查找算法的时间复杂度为：O（log₂n）</p><p> </p><p>二分查找算法优点：</p><p>查找次数较少<br>查找速度快<br>平均性能好 </p><p>二分查找算法缺点：</p><p>要求列表为有序列表<br>插入删除困难<br>不适用于经常变动的数据列表 </p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>二分查找算法比简单查找要快的多，这种快随着元素的增加呈指数型的增加，算法运行时间不是以秒未单位，而是从增速的角度度量的，像简单查找算法O(n)的时间复杂度代表的是一种线性增长速度。</p><h3 id="因为有梦想所以才快乐"><a href="#因为有梦想所以才快乐" class="headerlink" title="因为有梦想所以才快乐"></a>因为有梦想所以才快乐</h3><p><img src="https://s2.ax1x.com/2020/02/29/3y97qI.png"></p>]]></content>
      
      
      <categories>
          
          <category> 查找 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之数组</title>
      <link href="/2020/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84/"/>
      <url>/2020/02/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>数组是应用最广泛的一种数据结构，常常被植入到编程语言中，作为基本数据类型使用，因此，在一些教材中，数组并没有被当做一种数据结构单独拿出来讲解（其实数组就是一段连续的内存，即使在物理内存中不是连续的，在逻辑上肯定是连续的）。其实没必要在概念上做纠缠，数组可以当做学习数据结构的敲门砖，以此为基础，了解数据结构的基本概念以及构建方法</p><p>数据结构不仅是数据的容器，还要提供对数据的操作方法，比如检索、插入、删除、排序等</p><h2 id="2-无序数组"><a href="#2-无序数组" class="headerlink" title="2.无序数组"></a>2.无序数组</h2><p>下面我们建立一个类，对数组的检索、插入、删除、打印操作进行封装，简便起见，我们假设数组中没有重复值（实际上数组可以包含重复值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array</span> &#123;`</span><br><span class="line">      <span class="keyword">private</span> String [] strArray;</span><br><span class="line">      <span class="keyword">private</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>;       <span class="comment">//数组元素个数</span></span><br><span class="line">            </span><br><span class="line">      <span class="comment">//构造方法，传入数组最大长度</span></span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">Array</span><span class="params">(<span class="type">int</span> max)</span>&#123;</span><br><span class="line">             strArray = <span class="keyword">new</span> <span class="title class_">String</span> [max];</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="comment">//检测数组是否包含某个元素，如果存在返回其下标，不存在则返回-1</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">contains</span><span class="params">(String target)</span>&#123;</span><br><span class="line">             <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(strArray[i].equals(target))&#123;</span><br><span class="line">                           index = i;</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">return</span> index;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="comment">//插入</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String elem)</span> &#123;</span><br><span class="line">             strArray[length] = elem;</span><br><span class="line">             length++;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="comment">//删除某个指定的元素值，删除成功则返回true，否则返回false</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(String target)</span>&#123;</span><br><span class="line">             <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">             <span class="keyword">if</span>((index = contains(target)) !=-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> i=index;i&lt;length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">                           <span class="comment">//删除元素之后的所有元素前移一位</span></span><br><span class="line">                           strArray[i] =strArray[i+<span class="number">1</span>]; </span><br><span class="line">                    &#125;</span><br><span class="line">                    length--;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">             &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">      <span class="comment">//列出所有元素</span></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>&#123;</span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">                    System.out.print(strArray[i]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">             &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="·无序数组的优点："><a href="#·无序数组的优点：" class="headerlink" title="·无序数组的优点："></a>·无序数组的优点：</h3><p>插入快，如果知道下标，可以很快的存取</p><h3 id="·无序数组的缺点："><a href="#·无序数组的缺点：" class="headerlink" title="·无序数组的缺点："></a>·无序数组的缺点：</h3><p>查找慢，删除慢，大小固定。</p><h2 id="3-有序数组"><a href="#3-有序数组" class="headerlink" title="3.有序数组"></a>3.有序数组</h2><p>所谓的有序数组就是指数组中的元素是按一定规则排列的，其好处就是在根据元素值查找时可以是使用二分查找，查找效率要比无序数组高很多，在数据量很大时更加明显。当然缺点也显而易见，当插入一个元素时，首先要判断该元素应该插入的下标，然后对该下标之后的所有元素后移一位，才能进行插入，这无疑增加了很大的开销。</p><p>因此，<strong>有序数组适用于查找频繁，而插入、删除操作较少的情况</strong></p><p>有序数组的封装类如下，为了方便，我们依然假设数组中是没有重复值的，并且数据是按照由小到大的顺序排列的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderArray</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] intArray;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 数组元素个数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 构造方法，传入数组最大长度</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">OrderArray</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">intArray = <span class="keyword">new</span> <span class="title class_">int</span>[max];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 用二分查找法定位某个元素，如果存在返回其下标，不存在则返回-1</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">lowerBound</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 搜索段最小元素的小标</span></span><br><span class="line"><span class="type">int</span> <span class="variable">upperBound</span> <span class="operator">=</span> length - <span class="number">1</span>; <span class="comment">// 搜索段最大元素的下标</span></span><br><span class="line"><span class="type">int</span> curIn; <span class="comment">// 当前检测元素的下标</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (upperBound &lt; <span class="number">0</span>) &#123; <span class="comment">// 如果数组为空，直接返回-1</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">curIn = (lowerBound + upperBound) / <span class="number">2</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (target == intArray[curIn]) &#123;</span><br><span class="line"><span class="keyword">return</span> curIn;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (curIn == lowerBound) &#123; <span class="comment">// 在当前下标与搜索段的最小下标重合时，代表搜索段中只包含1个或2个元素</span></span><br><span class="line"><span class="comment">// 既然走到该分支，证明上一个if分支不满足，即目标元素不等于低位元素</span></span><br><span class="line"><span class="keyword">if</span> (target == intArray[upperBound]) &#123; <span class="comment">// 等于高位元素，返回</span></span><br><span class="line"><span class="keyword">return</span> upperBound;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 高位元素也不等于目标元素，证明数组中没有该元素，搜索结束</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;<span class="comment">// 搜索段中的元素至少有三个，且当前元素不等于目标元素</span></span><br><span class="line"><span class="keyword">if</span> (intArray[curIn] &lt; target) &#123;</span><br><span class="line"><span class="comment">// 如果当前元素小于目标元素，则将下一个搜索段的最小下标置为当前元素的下标</span></span><br><span class="line">lowerBound = curIn;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 如果当前元素大于目标元素，则将下一个搜索段的最大下标置为当前元素的下标</span></span><br><span class="line">upperBound = curIn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 插入</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> elem)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">location</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 判断应插入位置的下标</span></span><br><span class="line"><span class="keyword">for</span> (; location &lt; length; location++) &#123;</span><br><span class="line"><span class="keyword">if</span> (intArray[location] &gt; elem)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// System.out.println(location);</span></span><br><span class="line"><span class="comment">// 将插入下标之后的所有元素后移一位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> length; i &gt; location; i--) &#123;</span><br><span class="line">intArray[i] = intArray[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">intArray[location] = elem;</span><br><span class="line"> </span><br><span class="line">length++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 删除某个指定的元素值，删除成功则返回true，否则返回false</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> target)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((index = find(target)) != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> index; i &lt; length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 删除元素之后的所有元素前移一位</span></span><br><span class="line">intArray[i] = intArray[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 列出所有元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">System.out.print(intArray[i] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">OrderArray</span> <span class="variable">orderArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderArray</span>(<span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line">orderArray.insert(<span class="number">3</span>);</span><br><span class="line">orderArray.insert(<span class="number">4</span>);</span><br><span class="line">orderArray.insert(<span class="number">6</span>);</span><br><span class="line">orderArray.insert(<span class="number">8</span>);</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> orderArray.find(<span class="number">8</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;在队列中的位置是&quot;</span> + i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法之基本概念</title>
      <link href="/2020/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p><img src="https://s2.ax1x.com/2020/02/29/3ykiX4.png"></p><p>数据结构之间的相互关系称为<strong>逻辑结构</strong>。通常分为四类基本结构：</p><p><strong>●集合：</strong>结构中的数据元素除了同属于一种类型外，别无其他关系。<br><strong>●线性结构：</strong>结构中的数据元素之间存在一对一的关系。<br><strong>●树形结构：</strong>结构中的数据元素之间存在一对多的关系。<br>**●图状结构或网状结构:**结构中的数据元素之间存在多对多的关系。</p><p>数据结构在计算机中有两种不同的存储方法:</p><p>**●顺序存储结构:**数据元素在存储器中的相对位置来表示数据元素之间的逻辑关系。<br>**●链式存储结构:**在每一个数据元素 中增加一个存放地址的指针，呲指针来表示数据元素之间<br>的逻辑关系。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
